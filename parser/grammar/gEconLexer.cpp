/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : ../gEcon_CURRENT/src/parser/grammar/gEcon.g
 *     -                            On : 2016-12-04 14:10:32
 *     -                 for the lexer : gEconLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "gEconLexer.hpp"
/* ----------------------------------------- */



	namespace  parser  {


/** String literals used by gEconLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x6F, 0x75, 0x74, 0x70, 0x75, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_2[]  = { 0x6C, 0x6F, 0x67, 0x66, 0x69, 0x6C, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_3[]  = { 0x6C, 0x6F, 0x6E, 0x67,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_4[]  = { 0x73, 0x68, 0x6F, 0x72, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_5[]  = { 0x4C, 0x61, 0x54, 0x65, 0x58,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_6[]  = { 0x6C, 0x61, 0x74, 0x65, 0x78,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_7[]  = { 0x76, 0x65, 0x72, 0x62, 0x6F, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_8[]  = { 0x6C, 0x61, 0x6E, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_9[]  = { 0x62, 0x61, 0x63, 0x6B, 0x77, 0x61, 0x72, 0x64, 0x63, 0x6F, 0x6D, 0x70,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_10[]  = { 0x4A, 0x61, 0x63, 0x6F, 0x62, 0x69, 0x61, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_11[]  = { 0x74, 0x72, 0x75, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_12[]  = { 0x54, 0x52, 0x55, 0x45,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_13[]  = { 0x66, 0x61, 0x6C, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_14[]  = { 0x46, 0x41, 0x4C, 0x53, 0x45,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_15[]  = { 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_16[]  = { 0x69, 0x6E, 0x64, 0x65, 0x78, 0x73, 0x65, 0x74, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_17[]  = { 0x74, 0x72, 0x79, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_18[]  = { 0x62, 0x6C, 0x6F, 0x63, 0x6B,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_19[]  = { 0x64, 0x65, 0x66, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_20[]  = { 0x63, 0x6F, 0x6E, 0x74, 0x72, 0x6F, 0x6C, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_21[]  = { 0x6F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_22[]  = { 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6E, 0x74, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_23[]  = { 0x66, 0x6F, 0x63, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_24[]  = { 0x69, 0x64, 0x65, 0x6E, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_25[]  = { 0x73, 0x68, 0x6F, 0x63, 0x6B, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_26[]  = { 0x63, 0x61, 0x6C, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_27[]  = { 0x73, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_28[]  = { 0x53, 0x53,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_29[]  = { 0x69, 0x6E, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_30[]  = { 0x49, 0x6E, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_31[]  = { 0x49, 0x4E, 0x46,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_32[]  = { 0x53, 0x55, 0x4D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_33[]  = { 0x50, 0x52, 0x4F, 0x44,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_34[]  = { 0x4B, 0x52, 0x4F, 0x4E, 0x45, 0x43, 0x4B, 0x45, 0x52, 0x5F, 0x44, 0x45, 0x4C, 0x54, 0x41,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_35[]  = { 0x73, 0x71, 0x72, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_36[]  = { 0x65, 0x78, 0x70,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_37[]  = { 0x6C, 0x6F, 0x67,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_38[]  = { 0x73, 0x69, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_39[]  = { 0x63, 0x6F, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_40[]  = { 0x74, 0x61, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_41[]  = { 0x61, 0x73, 0x69, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_42[]  = { 0x61, 0x63, 0x6F, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_43[]  = { 0x61, 0x74, 0x61, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_44[]  = { 0x73, 0x69, 0x6E, 0x68,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_45[]  = { 0x63, 0x6F, 0x73, 0x68,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_46[]  = { 0x74, 0x61, 0x6E, 0x68,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_47[]  = { 0x65, 0x72, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_48[]  = { 0x7C, 0x7C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_49[]  = { 0x3A, 0x3A,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_50[]  = { 0x2E, 0x2E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_51[]  = { 0x2D, 0x3E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_52[]  = { 0x3D, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_53[]  = { 0x21, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_54[]  = { 0x3C, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_55[]  = { 0x2F, 0x2F,  antlr3::ANTLR_STRING_TERMINATOR};

	}



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;

	namespace  parser  {


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



gEconLexer::~gEconLexer()
{
}

void
gEconLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "../gEcon_CURRENT/src/parser/grammar/gEcon.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* gEconLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called gEconLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pgEconLexer initialized for the lex start
 *     - Fail NULL
 */
gEconLexer::gEconLexer(StreamType* instream)
:gEconLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called gEconLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pgEconLexer initialized for the lex start
 *     - Fail NULL
 */
gEconLexer::gEconLexer(StreamType* instream, RecognizerSharedStateType* state)
:gEconLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void gEconLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in gEconLexer.h here so you can get a sense
     * of what goes where.
     */

}


/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    814:1: DOUBLE : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )+ ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )? | ( '0' .. '9' )+ '.' ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )? | '.' ( '0' .. '9' )+ ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )? | '0' ( '0' .. '9' )+ | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' ( '0' .. '9' )+ );
 */
static const ANTLR_INT32 dfa22_eot[20] =
    {
	-1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 
	-1
    };
static const ANTLR_INT32 dfa22_eof[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR_INT32 dfa22_min[20] =
    {
	46, 46, -1, 46, 48, 46, 46, -1, -1, -1, 46, 46, 46, 46, 46, 46, 46, 46, 
	46, -1
    };
static const ANTLR_INT32 dfa22_max[20] =
    {
	57, 57, -1, 57, 57, 57, 57, -1, -1, -1, 57, 57, 57, 57, 57, 57, 57, 57, 
	57, -1
    };
static const ANTLR_INT32 dfa22_accept[20] =
    {
	-1, -1, 3, -1, -1, -1, -1, 1, 2, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	5
    };
static const ANTLR_INT32 dfa22_special[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa22_T_empty	 =   NULL;

static const ANTLR_INT32 dfa22_T0[] =
    {
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7
    };

static const ANTLR_INT32 dfa22_T1[] =
    {
	4, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
    };

static const ANTLR_INT32 dfa22_T2[] =
    {
	4, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17
    };

static const ANTLR_INT32 dfa22_T3[] =
    {
	2, -1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3
    };

static const ANTLR_INT32 dfa22_T4[] =
    {
	4, -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
    };

static const ANTLR_INT32 dfa22_T5[] =
    {
	4, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14
    };

static const ANTLR_INT32 dfa22_T6[] =
    {
	4, -1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15
    };

static const ANTLR_INT32 dfa22_T7[] =
    {
	4, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18
    };

static const ANTLR_INT32 dfa22_T8[] =
    {
	4, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12
    };

static const ANTLR_INT32 dfa22_T9[] =
    {
	4, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13
    };

static const ANTLR_INT32 dfa22_T10[] =
    {
	4, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
    };

static const ANTLR_INT32 dfa22_T11[] =
    {
	4, -1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11
    };

static const ANTLR_INT32 dfa22_T12[] =
    {
	4, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa22_transitions[] =
{
    dfa22_T3, dfa22_T4, NULL, dfa22_T12, dfa22_T0, dfa22_T4, dfa22_T10, 
    NULL, NULL, NULL, dfa22_T11, dfa22_T8, dfa22_T9, dfa22_T5, dfa22_T6, 
    dfa22_T1, dfa22_T2, dfa22_T7, dfa22_T7, NULL
};


/* Declare tracking structure for Cyclic DFA 22
 */
class gEconLexerCyclicDFA22 : public CyclicDFA< gEconLexerImplTraits, gEconLexer >, public gEconLexerTokens
{
public:
	typedef CyclicDFA< gEconLexerImplTraits, gEconLexer >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	gEconLexerCyclicDFA22( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static gEconLexerCyclicDFA22  cdfa22(
	    22,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"814:1: DOUBLE : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )+ ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )? | ( '0' .. '9' )+ '.' ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )? | '.' ( '0' .. '9' )+ ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )? | '0' ( '0' .. '9' )+ | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' ( '0' .. '9' )+ );",
	    dfa22_eot,	    /* EOT table			    */
	    dfa22_eof,	    /* EOF table			    */
	    dfa22_min,	    /* Minimum tokens for each state    */
	    dfa22_max,	    /* Maximum tokens for each state    */
	    dfa22_accept,	/* Accept table			    */
	    dfa22_special,	/* Special transition states	    */
	    dfa22_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 22
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( OUTPUT | R | LOGF | LONG | SHORT | LATEX | VERBOSE | LANDSCAPE | BACKWARDCOMP | JACOBIAN | BTRUE | BFALSE | OPTS | SETS | TRYREDUCE | BLOCK | DEFS | CONTROLS | OBJ | CONSTRAINTS | FOCS | IDS | SHOCKS | CALIBR | SS | INF | E | SUM | PROD | DELTA | SQRT | EXP | LOG | SIN | COS | TAN | ASIN | ACOS | ATAN | SINH | COSH | TANH | ERF | ZERO | INT | DOUBLE | SLETTER | CLETTER | ID | UID | DID | UDID | IDU | DIDU | WS | TILDE | QUESTION | EXCLAM | DOLLAR | AT | AND | OR | DOR | SEMI | COLON | DBLCOLON | DDOT | COMMA | RARROW | PLUS | MINUS | MUL | DIV | POW | EQ | DEQ | NEQ | LEQ | QUOTE | DQUOTE | BACKSLASH | LBRACE | RBRACE | LPAREN | RPAREN | LBRACK | RBRACK | LANGBR | RANGBR | COMMENT );
 */
static const ANTLR_INT32 dfa43_eot[344] =
    {
	-1, 61, 64, 61, 61, 72, 61, 61, 72, 61, 72, 61, 72, 61, 61, 61, 72, 72, 
	92, 72, 72, 61, 61, 100, 106, -1, 61, 72, -1, -1, -1, -1, 111, -1, -1, 
	-1, 113, -1, 115, -1, 117, -1, -1, 118, -1, 120, 122, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 124, 124, 124, -1, 127, 124, -1, 124, 124, 124, 
	133, 124, 124, 124, -1, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 133, 124, 124, 124, -1, 124, 124, 124, 124, 124, 
	124, 124, -1, -1, 101, 165, 166, 106, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 124, -1, 124, 124, -1, 172, 124, 124, 124, 
	124, -1, 124, 180, 124, 124, 124, 124, 124, 124, 124, 189, 124, 124, 124, 
	124, 124, 195, 124, 124, 124, 201, 124, 203, 195, 195, 124, 124, 206, 207, 
	124, 124, 124, -1, -1, 106, 124, 124, 124, 124, -1, 216, 124, 124, 124, 
	124, 221, 222, -1, 124, 124, 124, 124, 124, 228, 124, 230, -1, 228, 124, 
	232, 124, 124, -1, 124, 124, 124, 124, 239, -1, 124, -1, 241, 124, -1, 
	-1, 243, 244, 245, 106, 124, 124, 124, 124, -1, 251, 124, 253, 124, -1, 
	-1, 251, 124, 124, 257, 124, -1, 124, -1, 260, -1, 260, 124, 124, 124, 
	124, 124, -1, 124, -1, 124, -1, -1, -1, 106, 269, 124, 124, 124, -1, 124, 
	-1, 274, 124, 124, -1, 124, 124, -1, 124, 124, 124, 124, 124, 124, 124, 
	106, -1, 287, 124, 289, 124, -1, 291, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 106, -1, 124, -1, 124, -1, 124, 306, 124, 124, 124, 124, 
	311, 124, 124, 124, 106, 316, 317, 124, -1, 319, 320, 124, 124, -1, 124, 
	124, 124, 106, -1, -1, 124, -1, -1, 328, 124, 124, 124, 127, 106, 124, 
	-1, 335, 336, 337, 124, 101, 339, -1, -1, -1, 124, -1, 124, 124, 343, -1
    };
static const ANTLR_INT32 dfa43_eof[344] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR_INT32 dfa43_min[344] =
    {
	9, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 46, 46, 46, 48, 48, 48, -1, -1, -1, 61, -1, -1, -1, 
	124, -1, 58, -1, 62, -1, -1, 47, -1, 61, 61, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 48, 48, 48, -1, 48, 48, -1, 48, 48, 48, 48, 48, 48, 48, 
	-1, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, -1, 48, 48, 48, 48, 48, 48, 48, -1, -1, 48, 48, 48, 46, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, 48, 
	48, -1, 48, 48, 48, 48, 48, -1, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, -1, -1, 46, 48, 48, 48, 48, -1, 48, 48, 48, 48, 48, 48, 48, 
	-1, 48, 48, 48, 48, 48, 48, 48, 48, -1, 48, 48, 48, 48, 48, -1, 48, 48, 
	48, 48, 48, -1, 48, -1, 48, 48, -1, -1, 48, 48, 48, 46, 48, 48, 48, 48, 
	-1, 48, 48, 48, 48, -1, -1, 48, 48, 48, 48, 48, -1, 48, -1, 48, -1, 48, 
	48, 48, 48, 48, 48, -1, 48, -1, 48, -1, -1, -1, 46, 48, 48, 48, 48, -1, 
	48, -1, 48, 48, 48, -1, 48, 48, -1, 48, 48, 48, 48, 48, 48, 48, 46, -1, 
	48, 48, 48, 48, -1, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 46, -1, 
	48, -1, 48, -1, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 46, 48, 48, 48, 
	-1, 48, 48, 48, 48, -1, 48, 48, 48, 46, -1, -1, 48, -1, -1, 48, 48, 48, 
	48, 48, 46, 48, -1, 48, 48, 48, 48, 48, 48, -1, -1, -1, 48, -1, 48, 48, 
	48, -1
    };
static const ANTLR_INT32 dfa43_max[344] =
    {
	126, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 57, 122, 122, 122, -1, 
	-1, -1, 61, -1, -1, -1, 124, -1, 58, -1, 62, -1, -1, 47, -1, 61, 61, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 122, 122, 122, -1, 122, 122, -1, 
	122, 122, 122, 122, 122, 122, 122, -1, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, -1, 122, 122, 
	122, 122, 122, 122, 122, -1, -1, 122, 122, 122, 122, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 122, -1, 122, 122, -1, 
	122, 122, 122, 122, 122, -1, 122, 122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, -1, -1, 122, 122, 122, 122, 122, -1, 
	122, 122, 122, 122, 122, 122, 122, -1, 122, 122, 122, 122, 122, 122, 122, 
	122, -1, 122, 122, 122, 122, 122, -1, 122, 122, 122, 122, 122, -1, 122, 
	-1, 122, 122, -1, -1, 122, 122, 122, 122, 122, 122, 122, 122, -1, 122, 
	122, 122, 122, -1, -1, 122, 122, 122, 122, 122, -1, 122, -1, 122, -1, 122, 
	122, 122, 122, 122, 122, -1, 122, -1, 122, -1, -1, -1, 122, 122, 122, 122, 
	122, -1, 122, -1, 122, 122, 122, -1, 122, 122, -1, 122, 122, 122, 122, 
	122, 122, 122, 122, -1, 122, 122, 122, 122, -1, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, -1, 122, -1, 122, -1, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, -1, 122, 122, 122, 
	122, -1, 122, 122, 122, 122, -1, -1, 122, -1, -1, 122, 122, 122, 122, 122, 
	122, 122, -1, 122, 122, 122, 122, 122, 122, -1, -1, -1, 122, -1, 122, 122, 
	122, -1
    };
static const ANTLR_INT32 dfa43_accept[344] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 56, 57, -1, 59, 60, 61, 
	-1, 64, -1, 68, -1, 70, 72, -1, 74, -1, -1, 79, 80, 81, 82, 83, 84, 85, 
	86, 87, 89, 90, -1, -1, -1, 47, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 27, -1, -1, -1, -1, -1, -1, -1, 44, 46, -1, -1, -1, -1, 45, 67, 
	52, 50, 77, 58, 63, 62, 66, 65, 69, 71, 73, 76, 75, 78, 88, -1, 49, -1, 
	-1, 53, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 54, 51, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, 
	34, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, 26, -1, -1, 
	-1, -1, -1, 35, -1, 28, -1, -1, 32, 43, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, 31, 40, -1, -1, -1, -1, -1, 11, -1, 42, -1, 21, -1, 
	-1, -1, -1, -1, -1, 41, -1, 29, -1, 37, 38, 39, -1, -1, -1, -1, -1, 6, 
	-1, 5, -1, -1, -1, 16, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 
	-1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, 
	3, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, 
	-1, -1, -1, 18, -1, -1, -1, -1, 19, 8, -1, 15, 14, -1, -1, -1, -1, -1, 
	-1, -1, 22, -1, -1, -1, -1, -1, -1, 17, 20, 24, -1, 9, -1, -1, -1, 30
    };
static const ANTLR_INT32 dfa43_special[344] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa43_T_empty	 =   NULL;

static const ANTLR_INT32 dfa43_T0[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 318, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T1[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 305, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T2[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 292, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T3[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 276, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T4[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 200, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T5[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 334, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T6[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 327, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T7[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T8[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 140, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T9[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 277, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T10[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 258, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T11[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 227, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T12[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 185, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T13[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 293, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T14[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 186, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T15[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 60, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 59, 63, 63, 63, 63, 58, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T16[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 144, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T17[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 190, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T18[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 199, 198, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T19[] =
    {
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333, -1, -1, -1, -1, -1, -1, 
	-1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, -1, -1, -1, 
	-1, 103, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104
    };

static const ANTLR_INT32 dfa43_T20[] =
    {
	101, -1, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, -1, -1, -1, 
	-1, -1, -1, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	-1, -1, -1, -1, 103, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104
    };

static const ANTLR_INT32 dfa43_T21[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 182, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T22[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 137, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T23[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 255, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T24[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 224, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T25[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 148, 63, 
	149, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T26[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 275, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T27[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 179, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T28[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T29[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 218, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T30[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 252, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T31[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 273, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T32[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 290, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T33[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 304, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T34[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 138, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T35[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 183, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T36[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 85, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T37[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 225, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T38[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 256, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T39[] =
    {
	101, -1, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, -1, -1, -1, 
	-1, -1, -1, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	-1, -1, -1, -1, 103, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104
    };

static const ANTLR_INT32 dfa43_T40[] =
    {
	110
    };

static const ANTLR_INT32 dfa43_T41[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 272, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T42[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 250, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T43[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 173, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T44[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	136, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T45[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 181, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T46[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 219, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T47[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	217, 63, 63
    };

static const ANTLR_INT32 dfa43_T48[] =
    {
	112
    };

static const ANTLR_INT32 dfa43_T49[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 174, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T50[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 223, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T51[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 82, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T52[] =
    {
	29, 29, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 29, 32, 48, 57, 33, 57, 35, 47, 52, 53, 42, 41, 39, 
	40, 25, 43, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 38, 37, 46, 45, 56, 
	31, 34, 27, 27, 27, 27, 18, 12, 27, 27, 17, 8, 20, 5, 27, 27, 27, 19, 27, 
	2, 16, 10, 27, 27, 27, 27, 27, 27, 54, 49, 55, 44, 28, -1, 22, 7, 15, 14, 
	21, 11, 26, 26, 13, 26, 26, 3, 26, 26, 1, 26, 26, 26, 4, 9, 26, 6, 26, 
	26, 26, 26, 50, 36, 51, 30
    };

static const ANTLR_INT32 dfa43_T53[] =
    {
	114
    };

static const ANTLR_INT32 dfa43_T54[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 79, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T55[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 123, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T56[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 168, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T57[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 212, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T58[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 247, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T59[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 215, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T60[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 323, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T61[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 330, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T62[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 299, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T63[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 312, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T64[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	171, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T65[] =
    {
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108, -1, -1, -1, -1, -1, -1, 
	-1, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, -1, -1, -1, 
	-1, -1, -1, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109
    };

static const ANTLR_INT32 dfa43_T66[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 265, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T67[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 283, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T68[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 76, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T69[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 238, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T70[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 262, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T71[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 235, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T72[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 196, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T73[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 150, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T74[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 321, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T75[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 309, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T76[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 296, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T77[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 280, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T78[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 192, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T79[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 146, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T80[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 237, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T81[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 264, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T82[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 236, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T83[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 263, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T84[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 281, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T85[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 297, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T86[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 310, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T87[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 322, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T88[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 329, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T89[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 214, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T90[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 98, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 97, 99, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T91[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 170, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T92[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 271, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T93[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 128, 63, 63, 63, 63, 63, 63, 129, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T94[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 249, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T95[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 71, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T96[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 303, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T97[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 288, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T98[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 298, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T99[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 282, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T100[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 152, 63, 63, 63, 63, 153, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T101[] =
    {
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, -1, -1, -1, -1, -1, -1, 
	-1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, -1, -1, -1, 
	-1, -1, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104
    };

static const ANTLR_INT32 dfa43_T102[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 126, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T103[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 73, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T104[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 278, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T105[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 294, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T106[] =
    {
	101, -1, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, -1, -1, -1, 
	-1, -1, -1, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	-1, -1, -1, -1, 103, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104
    };

static const ANTLR_INT32 dfa43_T107[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 229, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T108[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 259, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T109[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 187, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T110[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 308, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T111[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 279, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T112[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 295, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T113[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	234, 63, 63
    };

static const ANTLR_INT32 dfa43_T114[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 261, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T115[] =
    {
	116
    };

static const ANTLR_INT32 dfa43_T116[] =
    {
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102, -1, -1, -1, -1, -1, -1, 
	-1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, -1, -1, -1, 
	-1, 103, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104
    };

static const ANTLR_INT32 dfa43_T117[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 197, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T118[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	151, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T119[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 226, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T120[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 184, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T121[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 139, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T122[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 307, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T123[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 233, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T124[] =
    {
	101, -1, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, -1, -1, -1, 
	-1, -1, -1, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	-1, -1, -1, -1, 103, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104
    };

static const ANTLR_INT32 dfa43_T125[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 147, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T126[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 193, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T127[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 145, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T128[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 67, 70, 63, 63, 63, 63, 63, 63, 63, 69, 63, 68, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T129[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 191, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T130[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T131[] =
    {
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, -1, -1, -1, -1, -1, -1, 
	-1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, -1, -1, -1, 
	-1, 103, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104
    };

static const ANTLR_INT32 dfa43_T132[] =
    {
	101, -1, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, -1, -1, -1, 
	-1, -1, -1, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	-1, -1, -1, -1, 103, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104
    };

static const ANTLR_INT32 dfa43_T133[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 194, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T134[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 270, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T135[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 80, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 81, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T136[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 188, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T137[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 169, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T138[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 125, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T139[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 248, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T140[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 213, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T141[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 342, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T142[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 340, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T143[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	341, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T144[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 338, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T145[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 134, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T146[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 178, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T147[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 204, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T148[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 158, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T149[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 325, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T150[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 314, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T151[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 301, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T152[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 285, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T153[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 267, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T154[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 242, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T155[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 205, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T156[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 159, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T157[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T158[] =
    {
	101, -1, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, -1, -1, -1, 
	-1, -1, -1, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	-1, -1, -1, -1, 103, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104
    };

static const ANTLR_INT32 dfa43_T159[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 162, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T160[] =
    {
	57
    };

static const ANTLR_INT32 dfa43_T161[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 160, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T162[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 284, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T163[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 300, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T164[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 240, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T165[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 266, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T166[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 331, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T167[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 313, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T168[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 324, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T169[] =
    {
	119
    };

static const ANTLR_INT32 dfa43_T170[] =
    {
	101, -1, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, -1, -1, -1, 
	-1, -1, -1, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	-1, -1, -1, -1, 103, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104
    };

static const ANTLR_INT32 dfa43_T171[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 220, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T172[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 74, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 75, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T173[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 78, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 77, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T174[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 254, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T175[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 84, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 83, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T176[] =
    {
	101, -1, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, -1, -1, -1, 
	-1, -1, -1, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	-1, -1, -1, -1, 103, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104
    };

static const ANTLR_INT32 dfa43_T177[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 202, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T178[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 154, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T179[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 131, 63, 63, 63, 63, 63, 130, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T180[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 155, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T181[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 87, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 86, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T182[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	156, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T183[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 96, 63, 63, 63, 63, 63, 
	95, 63, 63
    };

static const ANTLR_INT32 dfa43_T184[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 157, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T185[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 177, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 176, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T186[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 132, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T187[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 141, 63, 63, 
	63, 142, 63
    };

static const ANTLR_INT32 dfa43_T188[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 66, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 65, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T189[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 135, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T190[] =
    {
	101, -1, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, -1, -1, -1, 
	-1, -1, -1, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	-1, -1, -1, -1, 103, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104
    };

static const ANTLR_INT32 dfa43_T191[] =
    {
	101, -1, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, -1, -1, -1, 
	-1, -1, -1, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	-1, -1, -1, -1, 103, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104
    };

static const ANTLR_INT32 dfa43_T192[] =
    {
	121
    };

static const ANTLR_INT32 dfa43_T193[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 93, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T194[] =
    {
	101, -1, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, -1, -1, -1, 
	-1, -1, -1, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	-1, -1, -1, -1, 103, -1, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 
	104
    };

static const ANTLR_INT32 dfa43_T195[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 94, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T196[] =
    {
	107, -1, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101
    };

static const ANTLR_INT32 dfa43_T197[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 88, 
	63, 89, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T198[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 210, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T199[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 91, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 90, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T200[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 332, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T201[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 164, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T202[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 208, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T203[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 163, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T204[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 209, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T205[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	161, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };

static const ANTLR_INT32 dfa43_T206[] =
    {
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, 62, -1, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 143, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa43_transitions[] =
{
    dfa43_T52, dfa43_T15, dfa43_T7, dfa43_T188, dfa43_T128, dfa43_T95, dfa43_T103, 
    dfa43_T172, dfa43_T68, dfa43_T173, dfa43_T54, dfa43_T135, dfa43_T51, 
    dfa43_T175, dfa43_T36, dfa43_T181, dfa43_T197, dfa43_T199, dfa43_T7, 
    dfa43_T193, dfa43_T195, dfa43_T183, dfa43_T90, dfa43_T20, dfa43_T106, 
    dfa43_T196, dfa43_T7, dfa43_T7, dfa43_T65, NULL, NULL, NULL, dfa43_T40, 
    NULL, NULL, NULL, dfa43_T48, NULL, dfa43_T53, NULL, dfa43_T115, NULL, 
    NULL, dfa43_T160, NULL, dfa43_T169, dfa43_T192, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, dfa43_T55, dfa43_T138, dfa43_T102, 
    NULL, dfa43_T157, dfa43_T7, NULL, dfa43_T93, dfa43_T179, dfa43_T186, 
    dfa43_T7, dfa43_T145, dfa43_T189, dfa43_T44, NULL, dfa43_T22, dfa43_T34, 
    dfa43_T121, dfa43_T8, dfa43_T187, dfa43_T206, dfa43_T16, dfa43_T127, 
    dfa43_T79, dfa43_T125, dfa43_T25, dfa43_T73, dfa43_T118, dfa43_T100, 
    dfa43_T178, dfa43_T7, dfa43_T180, dfa43_T182, dfa43_T184, NULL, dfa43_T148, 
    dfa43_T156, dfa43_T161, dfa43_T205, dfa43_T159, dfa43_T203, dfa43_T201, 
    NULL, NULL, dfa43_T116, dfa43_T101, dfa43_T131, dfa43_T39, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, dfa43_T56, NULL, dfa43_T137, dfa43_T91, NULL, dfa43_T64, 
    dfa43_T43, dfa43_T49, dfa43_T28, dfa43_T185, NULL, dfa43_T146, dfa43_T27, 
    dfa43_T45, dfa43_T21, dfa43_T35, dfa43_T120, dfa43_T12, dfa43_T14, dfa43_T109, 
    dfa43_T136, dfa43_T17, dfa43_T129, dfa43_T78, dfa43_T126, dfa43_T133, 
    dfa43_T7, dfa43_T72, dfa43_T117, dfa43_T18, dfa43_T4, dfa43_T177, dfa43_T7, 
    dfa43_T7, dfa43_T7, dfa43_T147, dfa43_T155, dfa43_T7, dfa43_T7, dfa43_T202, 
    dfa43_T204, dfa43_T198, NULL, NULL, dfa43_T191, dfa43_T57, dfa43_T140, 
    dfa43_T89, dfa43_T59, NULL, dfa43_T7, dfa43_T47, dfa43_T29, dfa43_T46, 
    dfa43_T171, dfa43_T7, dfa43_T7, NULL, dfa43_T50, dfa43_T24, dfa43_T37, 
    dfa43_T119, dfa43_T11, dfa43_T7, dfa43_T107, dfa43_T7, NULL, dfa43_T7, 
    dfa43_T130, dfa43_T7, dfa43_T123, dfa43_T113, NULL, dfa43_T71, dfa43_T82, 
    dfa43_T80, dfa43_T69, dfa43_T7, NULL, dfa43_T164, NULL, dfa43_T7, dfa43_T154, 
    NULL, NULL, dfa43_T7, dfa43_T7, dfa43_T7, dfa43_T176, dfa43_T58, dfa43_T139, 
    dfa43_T94, dfa43_T42, NULL, dfa43_T7, dfa43_T30, dfa43_T7, dfa43_T174, 
    NULL, NULL, dfa43_T7, dfa43_T23, dfa43_T38, dfa43_T7, dfa43_T10, NULL, 
    dfa43_T108, NULL, dfa43_T7, NULL, dfa43_T7, dfa43_T114, dfa43_T70, dfa43_T83, 
    dfa43_T81, dfa43_T66, NULL, dfa43_T165, NULL, dfa43_T153, NULL, NULL, 
    NULL, dfa43_T124, dfa43_T7, dfa43_T134, dfa43_T92, dfa43_T41, NULL, 
    dfa43_T31, NULL, dfa43_T7, dfa43_T26, dfa43_T3, NULL, dfa43_T9, dfa43_T104, 
    NULL, dfa43_T111, dfa43_T77, dfa43_T84, dfa43_T99, dfa43_T67, dfa43_T162, 
    dfa43_T152, dfa43_T170, NULL, dfa43_T7, dfa43_T97, dfa43_T7, dfa43_T32, 
    NULL, dfa43_T7, dfa43_T2, dfa43_T13, dfa43_T105, dfa43_T112, dfa43_T76, 
    dfa43_T85, dfa43_T98, dfa43_T62, dfa43_T163, dfa43_T151, dfa43_T190, 
    NULL, dfa43_T96, NULL, dfa43_T33, NULL, dfa43_T1, dfa43_T7, dfa43_T122, 
    dfa43_T110, dfa43_T75, dfa43_T86, dfa43_T7, dfa43_T63, dfa43_T167, dfa43_T150, 
    dfa43_T132, dfa43_T7, dfa43_T7, dfa43_T0, NULL, dfa43_T7, dfa43_T7, 
    dfa43_T74, dfa43_T87, NULL, dfa43_T60, dfa43_T168, dfa43_T149, dfa43_T194, 
    NULL, NULL, dfa43_T6, NULL, NULL, dfa43_T7, dfa43_T88, dfa43_T61, dfa43_T166, 
    dfa43_T200, dfa43_T158, dfa43_T5, NULL, dfa43_T7, dfa43_T7, dfa43_T7, 
    dfa43_T144, dfa43_T19, dfa43_T7, NULL, NULL, NULL, dfa43_T142, NULL, 
    dfa43_T143, dfa43_T141, dfa43_T7, NULL
};


/* Declare tracking structure for Cyclic DFA 43
 */
class gEconLexerCyclicDFA43 : public CyclicDFA< gEconLexerImplTraits, gEconLexer >, public gEconLexerTokens
{
public:
	typedef CyclicDFA< gEconLexerImplTraits, gEconLexer >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	gEconLexerCyclicDFA43( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static gEconLexerCyclicDFA43  cdfa43(
	    43,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"1:1: Tokens : ( OUTPUT | R | LOGF | LONG | SHORT | LATEX | VERBOSE | LANDSCAPE | BACKWARDCOMP | JACOBIAN | BTRUE | BFALSE | OPTS | SETS | TRYREDUCE | BLOCK | DEFS | CONTROLS | OBJ | CONSTRAINTS | FOCS | IDS | SHOCKS | CALIBR | SS | INF | E | SUM | PROD | DELTA | SQRT | EXP | LOG | SIN | COS | TAN | ASIN | ACOS | ATAN | SINH | COSH | TANH | ERF | ZERO | INT | DOUBLE | SLETTER | CLETTER | ID | UID | DID | UDID | IDU | DIDU | WS | TILDE | QUESTION | EXCLAM | DOLLAR | AT | AND | OR | DOR | SEMI | COLON | DBLCOLON | DDOT | COMMA | RARROW | PLUS | MINUS | MUL | DIV | POW | EQ | DEQ | NEQ | LEQ | QUOTE | DQUOTE | BACKSLASH | LBRACE | RBRACE | LPAREN | RPAREN | LBRACK | RBRACK | LANGBR | RANGBR | COMMENT );",
	    dfa43_eot,	    /* EOT table			    */
	    dfa43_eof,	    /* EOF table			    */
	    dfa43_min,	    /* Minimum tokens for each state    */
	    dfa43_max,	    /* Maximum tokens for each state    */
	    dfa43_accept,	/* Accept table			    */
	    dfa43_special,	/* Special transition states	    */
	    dfa43_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 43
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 741:9: ( 'output' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OUTPUT
 *
 * Looks to match the characters the constitute the token OUTPUT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mOUTPUT()
{
    ANTLR_UINT32	_type;
      


    _type	    = OUTPUT;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:741:9: ( 'output' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:741:11: 'output'
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleOUTPUTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOUTPUTEx; /* Prevent compiler warnings */
    ruleOUTPUTEx: ;

}
// $ANTLR end OUTPUT

//   Comes from: 742:9: ( 'R' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start R
 *
 * Looks to match the characters the constitute the token R
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mR()
{
    ANTLR_UINT32	_type;
      


    _type	    = R;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:742:9: ( 'R' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:742:11: 'R'
    {
         this->matchc('R');
        if  (this->hasException())
        {
            goto ruleREx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleREx; /* Prevent compiler warnings */
    ruleREx: ;

}
// $ANTLR end R

//   Comes from: 743:9: ( 'logfile' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LOGF
 *
 * Looks to match the characters the constitute the token LOGF
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mLOGF()
{
    ANTLR_UINT32	_type;
      


    _type	    = LOGF;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:743:9: ( 'logfile' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:743:11: 'logfile'
    {
        this->matchs(lit_2);
        if  (this->hasException())
        {
            goto ruleLOGFEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLOGFEx; /* Prevent compiler warnings */
    ruleLOGFEx: ;

}
// $ANTLR end LOGF

//   Comes from: 744:9: ( 'long' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LONG
 *
 * Looks to match the characters the constitute the token LONG
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mLONG()
{
    ANTLR_UINT32	_type;
      


    _type	    = LONG;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:744:9: ( 'long' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:744:11: 'long'
    {
        this->matchs(lit_3);
        if  (this->hasException())
        {
            goto ruleLONGEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLONGEx; /* Prevent compiler warnings */
    ruleLONGEx: ;

}
// $ANTLR end LONG

//   Comes from: 745:9: ( 'short' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SHORT
 *
 * Looks to match the characters the constitute the token SHORT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mSHORT()
{
    ANTLR_UINT32	_type;
      


    _type	    = SHORT;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:745:9: ( 'short' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:745:11: 'short'
    {
        this->matchs(lit_4);
        if  (this->hasException())
        {
            goto ruleSHORTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSHORTEx; /* Prevent compiler warnings */
    ruleSHORTEx: ;

}
// $ANTLR end SHORT

//   Comes from: 746:9: ( 'LaTeX' | 'latex' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LATEX
 *
 * Looks to match the characters the constitute the token LATEX
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mLATEX()
{
    ANTLR_UINT32	_type;
      


    _type	    = LATEX;


    {
        //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:746:9: ( 'LaTeX' | 'latex' )

        ANTLR_UINT32 alt1;

        alt1=2;

        switch ( this->LA(1) )
        {
        case 'L':
        	{
        		alt1=1;
        	}
            break;
        case 'l':
        	{
        		alt1=2;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< gEconLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 1 );
            ex->set_state( 0 );


            goto ruleLATEXEx;

        }

        switch (alt1)
        {
    	case 1:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:746:11: 'LaTeX'
    	    {
    	        this->matchs(lit_5);
    	        if  (this->hasException())
    	        {
    	            goto ruleLATEXEx;
    	        }




    	    }
    	    break;
    	case 2:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:746:19: 'latex'
    	    {
    	        this->matchs(lit_6);
    	        if  (this->hasException())
    	        {
    	            goto ruleLATEXEx;
    	        }




    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLATEXEx; /* Prevent compiler warnings */
    ruleLATEXEx: ;

}
// $ANTLR end LATEX

//   Comes from: 747:9: ( 'verbose' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start VERBOSE
 *
 * Looks to match the characters the constitute the token VERBOSE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mVERBOSE()
{
    ANTLR_UINT32	_type;
      


    _type	    = VERBOSE;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:747:9: ( 'verbose' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:747:11: 'verbose'
    {
        this->matchs(lit_7);
        if  (this->hasException())
        {
            goto ruleVERBOSEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleVERBOSEEx; /* Prevent compiler warnings */
    ruleVERBOSEEx: ;

}
// $ANTLR end VERBOSE

//   Comes from: 748:14: ( 'landscape' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LANDSCAPE
 *
 * Looks to match the characters the constitute the token LANDSCAPE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mLANDSCAPE()
{
    ANTLR_UINT32	_type;
      


    _type	    = LANDSCAPE;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:748:14: ( 'landscape' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:748:16: 'landscape'
    {
        this->matchs(lit_8);
        if  (this->hasException())
        {
            goto ruleLANDSCAPEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLANDSCAPEEx; /* Prevent compiler warnings */
    ruleLANDSCAPEEx: ;

}
// $ANTLR end LANDSCAPE

//   Comes from: 749:14: ( 'backwardcomp' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BACKWARDCOMP
 *
 * Looks to match the characters the constitute the token BACKWARDCOMP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mBACKWARDCOMP()
{
    ANTLR_UINT32	_type;
      


    _type	    = BACKWARDCOMP;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:749:14: ( 'backwardcomp' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:749:16: 'backwardcomp'
    {
        this->matchs(lit_9);
        if  (this->hasException())
        {
            goto ruleBACKWARDCOMPEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleBACKWARDCOMPEx; /* Prevent compiler warnings */
    ruleBACKWARDCOMPEx: ;

}
// $ANTLR end BACKWARDCOMP

//   Comes from: 750:10: ( 'Jacobian' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start JACOBIAN
 *
 * Looks to match the characters the constitute the token JACOBIAN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mJACOBIAN()
{
    ANTLR_UINT32	_type;
      


    _type	    = JACOBIAN;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:750:10: ( 'Jacobian' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:750:12: 'Jacobian'
    {
        this->matchs(lit_10);
        if  (this->hasException())
        {
            goto ruleJACOBIANEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleJACOBIANEx; /* Prevent compiler warnings */
    ruleJACOBIANEx: ;

}
// $ANTLR end JACOBIAN

//   Comes from: 753:9: ( 'true' | 'TRUE' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BTRUE
 *
 * Looks to match the characters the constitute the token BTRUE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mBTRUE()
{
    ANTLR_UINT32	_type;
      


    _type	    = BTRUE;


    {
        //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:753:9: ( 'true' | 'TRUE' )

        ANTLR_UINT32 alt2;

        alt2=2;

        switch ( this->LA(1) )
        {
        case 't':
        	{
        		alt2=1;
        	}
            break;
        case 'T':
        	{
        		alt2=2;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< gEconLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 2 );
            ex->set_state( 0 );


            goto ruleBTRUEEx;

        }

        switch (alt2)
        {
    	case 1:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:753:11: 'true'
    	    {
    	        this->matchs(lit_11);
    	        if  (this->hasException())
    	        {
    	            goto ruleBTRUEEx;
    	        }




    	    }
    	    break;
    	case 2:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:753:18: 'TRUE'
    	    {
    	        this->matchs(lit_12);
    	        if  (this->hasException())
    	        {
    	            goto ruleBTRUEEx;
    	        }




    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleBTRUEEx; /* Prevent compiler warnings */
    ruleBTRUEEx: ;

}
// $ANTLR end BTRUE

//   Comes from: 754:9: ( 'false' | 'FALSE' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BFALSE
 *
 * Looks to match the characters the constitute the token BFALSE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mBFALSE()
{
    ANTLR_UINT32	_type;
      


    _type	    = BFALSE;


    {
        //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:754:9: ( 'false' | 'FALSE' )

        ANTLR_UINT32 alt3;

        alt3=2;

        switch ( this->LA(1) )
        {
        case 'f':
        	{
        		alt3=1;
        	}
            break;
        case 'F':
        	{
        		alt3=2;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< gEconLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 3 );
            ex->set_state( 0 );


            goto ruleBFALSEEx;

        }

        switch (alt3)
        {
    	case 1:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:754:11: 'false'
    	    {
    	        this->matchs(lit_13);
    	        if  (this->hasException())
    	        {
    	            goto ruleBFALSEEx;
    	        }




    	    }
    	    break;
    	case 2:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:754:19: 'FALSE'
    	    {
    	        this->matchs(lit_14);
    	        if  (this->hasException())
    	        {
    	            goto ruleBFALSEEx;
    	        }




    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleBFALSEEx; /* Prevent compiler warnings */
    ruleBFALSEEx: ;

}
// $ANTLR end BFALSE

//   Comes from: 757:13: ( 'options' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPTS
 *
 * Looks to match the characters the constitute the token OPTS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mOPTS()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPTS;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:757:13: ( 'options' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:757:15: 'options'
    {
        this->matchs(lit_15);
        if  (this->hasException())
        {
            goto ruleOPTSEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPTSEx; /* Prevent compiler warnings */
    ruleOPTSEx: ;

}
// $ANTLR end OPTS

//   Comes from: 758:13: ( 'indexsets' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SETS
 *
 * Looks to match the characters the constitute the token SETS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mSETS()
{
    ANTLR_UINT32	_type;
      


    _type	    = SETS;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:758:13: ( 'indexsets' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:758:15: 'indexsets'
    {
        this->matchs(lit_16);
        if  (this->hasException())
        {
            goto ruleSETSEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSETSEx; /* Prevent compiler warnings */
    ruleSETSEx: ;

}
// $ANTLR end SETS

//   Comes from: 759:13: ( 'tryreduce' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TRYREDUCE
 *
 * Looks to match the characters the constitute the token TRYREDUCE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mTRYREDUCE()
{
    ANTLR_UINT32	_type;
      


    _type	    = TRYREDUCE;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:759:13: ( 'tryreduce' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:759:15: 'tryreduce'
    {
        this->matchs(lit_17);
        if  (this->hasException())
        {
            goto ruleTRYREDUCEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTRYREDUCEEx; /* Prevent compiler warnings */
    ruleTRYREDUCEEx: ;

}
// $ANTLR end TRYREDUCE

//   Comes from: 760:13: ( 'block' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BLOCK
 *
 * Looks to match the characters the constitute the token BLOCK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mBLOCK()
{
    ANTLR_UINT32	_type;
      


    _type	    = BLOCK;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:760:13: ( 'block' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:760:15: 'block'
    {
        this->matchs(lit_18);
        if  (this->hasException())
        {
            goto ruleBLOCKEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleBLOCKEx; /* Prevent compiler warnings */
    ruleBLOCKEx: ;

}
// $ANTLR end BLOCK

//   Comes from: 761:13: ( 'definitions' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DEFS
 *
 * Looks to match the characters the constitute the token DEFS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mDEFS()
{
    ANTLR_UINT32	_type;
      


    _type	    = DEFS;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:761:13: ( 'definitions' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:761:15: 'definitions'
    {
        this->matchs(lit_19);
        if  (this->hasException())
        {
            goto ruleDEFSEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDEFSEx; /* Prevent compiler warnings */
    ruleDEFSEx: ;

}
// $ANTLR end DEFS

//   Comes from: 762:13: ( 'controls' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CONTROLS
 *
 * Looks to match the characters the constitute the token CONTROLS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mCONTROLS()
{
    ANTLR_UINT32	_type;
      


    _type	    = CONTROLS;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:762:13: ( 'controls' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:762:15: 'controls'
    {
        this->matchs(lit_20);
        if  (this->hasException())
        {
            goto ruleCONTROLSEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCONTROLSEx; /* Prevent compiler warnings */
    ruleCONTROLSEx: ;

}
// $ANTLR end CONTROLS

//   Comes from: 763:13: ( 'objective' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OBJ
 *
 * Looks to match the characters the constitute the token OBJ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mOBJ()
{
    ANTLR_UINT32	_type;
      


    _type	    = OBJ;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:763:13: ( 'objective' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:763:15: 'objective'
    {
        this->matchs(lit_21);
        if  (this->hasException())
        {
            goto ruleOBJEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOBJEx; /* Prevent compiler warnings */
    ruleOBJEx: ;

}
// $ANTLR end OBJ

//   Comes from: 764:13: ( 'constraints' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CONSTRAINTS
 *
 * Looks to match the characters the constitute the token CONSTRAINTS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mCONSTRAINTS()
{
    ANTLR_UINT32	_type;
      


    _type	    = CONSTRAINTS;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:764:13: ( 'constraints' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:764:15: 'constraints'
    {
        this->matchs(lit_22);
        if  (this->hasException())
        {
            goto ruleCONSTRAINTSEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCONSTRAINTSEx; /* Prevent compiler warnings */
    ruleCONSTRAINTSEx: ;

}
// $ANTLR end CONSTRAINTS

//   Comes from: 765:13: ( 'focs' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FOCS
 *
 * Looks to match the characters the constitute the token FOCS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mFOCS()
{
    ANTLR_UINT32	_type;
      


    _type	    = FOCS;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:765:13: ( 'focs' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:765:15: 'focs'
    {
        this->matchs(lit_23);
        if  (this->hasException())
        {
            goto ruleFOCSEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleFOCSEx; /* Prevent compiler warnings */
    ruleFOCSEx: ;

}
// $ANTLR end FOCS

//   Comes from: 766:13: ( 'identities' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IDS
 *
 * Looks to match the characters the constitute the token IDS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mIDS()
{
    ANTLR_UINT32	_type;
      


    _type	    = IDS;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:766:13: ( 'identities' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:766:15: 'identities'
    {
        this->matchs(lit_24);
        if  (this->hasException())
        {
            goto ruleIDSEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIDSEx; /* Prevent compiler warnings */
    ruleIDSEx: ;

}
// $ANTLR end IDS

//   Comes from: 767:13: ( 'shocks' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SHOCKS
 *
 * Looks to match the characters the constitute the token SHOCKS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mSHOCKS()
{
    ANTLR_UINT32	_type;
      


    _type	    = SHOCKS;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:767:13: ( 'shocks' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:767:15: 'shocks'
    {
        this->matchs(lit_25);
        if  (this->hasException())
        {
            goto ruleSHOCKSEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSHOCKSEx; /* Prevent compiler warnings */
    ruleSHOCKSEx: ;

}
// $ANTLR end SHOCKS

//   Comes from: 768:13: ( 'calibration' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CALIBR
 *
 * Looks to match the characters the constitute the token CALIBR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mCALIBR()
{
    ANTLR_UINT32	_type;
      


    _type	    = CALIBR;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:768:13: ( 'calibration' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:768:15: 'calibration'
    {
        this->matchs(lit_26);
        if  (this->hasException())
        {
            goto ruleCALIBREx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCALIBREx; /* Prevent compiler warnings */
    ruleCALIBREx: ;

}
// $ANTLR end CALIBR

//   Comes from: 771:5: ( 'ss' | 'SS' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS
 *
 * Looks to match the characters the constitute the token SS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mSS()
{
    ANTLR_UINT32	_type;
      


    _type	    = SS;


    {
        //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:771:5: ( 'ss' | 'SS' )

        ANTLR_UINT32 alt4;

        alt4=2;

        switch ( this->LA(1) )
        {
        case 's':
        	{
        		alt4=1;
        	}
            break;
        case 'S':
        	{
        		alt4=2;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< gEconLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 4 );
            ex->set_state( 0 );


            goto ruleSSEx;

        }

        switch (alt4)
        {
    	case 1:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:771:7: 'ss'
    	    {
    	        this->matchs(lit_27);
    	        if  (this->hasException())
    	        {
    	            goto ruleSSEx;
    	        }




    	    }
    	    break;
    	case 2:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:771:12: 'SS'
    	    {
    	        this->matchs(lit_28);
    	        if  (this->hasException())
    	        {
    	            goto ruleSSEx;
    	        }




    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSSEx; /* Prevent compiler warnings */
    ruleSSEx: ;

}
// $ANTLR end SS

//   Comes from: 773:5: ( 'inf' | 'Inf' | 'INF' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INF
 *
 * Looks to match the characters the constitute the token INF
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mINF()
{
    ANTLR_UINT32	_type;
      


    _type	    = INF;


    {
        //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:773:5: ( 'inf' | 'Inf' | 'INF' )

        ANTLR_UINT32 alt5;

        alt5=3;

        switch ( this->LA(1) )
        {
        case 'i':
        	{
        		alt5=1;
        	}
            break;
        case 'I':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'n':
        			{
        				alt5=2;
        			}
        		    break;
        		case 'N':
        			{
        				alt5=3;
        			}
        		    break;

        		default:
        		    ExceptionBaseType* ex = new ANTLR_Exception< gEconLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        		    ex->set_decisionNum( 5 );
        		    ex->set_state( 2 );


        		    goto ruleINFEx;

        		}

        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< gEconLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 5 );
            ex->set_state( 0 );


            goto ruleINFEx;

        }

        switch (alt5)
        {
    	case 1:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:773:7: 'inf'
    	    {
    	        this->matchs(lit_29);
    	        if  (this->hasException())
    	        {
    	            goto ruleINFEx;
    	        }




    	    }
    	    break;
    	case 2:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:773:13: 'Inf'
    	    {
    	        this->matchs(lit_30);
    	        if  (this->hasException())
    	        {
    	            goto ruleINFEx;
    	        }




    	    }
    	    break;
    	case 3:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:773:19: 'INF'
    	    {
    	        this->matchs(lit_31);
    	        if  (this->hasException())
    	        {
    	            goto ruleINFEx;
    	        }




    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleINFEx; /* Prevent compiler warnings */
    ruleINFEx: ;

}
// $ANTLR end INF

//   Comes from: 776:5: ( 'E' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start E
 *
 * Looks to match the characters the constitute the token E
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mE()
{
    ANTLR_UINT32	_type;
      


    _type	    = E;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:776:5: ( 'E' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:776:7: 'E'
    {
         this->matchc('E');
        if  (this->hasException())
        {
            goto ruleEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleEEx; /* Prevent compiler warnings */
    ruleEEx: ;

}
// $ANTLR end E

//   Comes from: 779:9: ( 'SUM' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SUM
 *
 * Looks to match the characters the constitute the token SUM
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mSUM()
{
    ANTLR_UINT32	_type;
      


    _type	    = SUM;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:779:9: ( 'SUM' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:779:11: 'SUM'
    {
        this->matchs(lit_32);
        if  (this->hasException())
        {
            goto ruleSUMEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSUMEx; /* Prevent compiler warnings */
    ruleSUMEx: ;

}
// $ANTLR end SUM

//   Comes from: 780:9: ( 'PROD' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PROD
 *
 * Looks to match the characters the constitute the token PROD
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mPROD()
{
    ANTLR_UINT32	_type;
      


    _type	    = PROD;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:780:9: ( 'PROD' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:780:11: 'PROD'
    {
        this->matchs(lit_33);
        if  (this->hasException())
        {
            goto rulePRODEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePRODEx; /* Prevent compiler warnings */
    rulePRODEx: ;

}
// $ANTLR end PROD

//   Comes from: 781:9: ( 'KRONECKER_DELTA' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DELTA
 *
 * Looks to match the characters the constitute the token DELTA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mDELTA()
{
    ANTLR_UINT32	_type;
      


    _type	    = DELTA;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:781:9: ( 'KRONECKER_DELTA' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:781:11: 'KRONECKER_DELTA'
    {
        this->matchs(lit_34);
        if  (this->hasException())
        {
            goto ruleDELTAEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDELTAEx; /* Prevent compiler warnings */
    ruleDELTAEx: ;

}
// $ANTLR end DELTA

//   Comes from: 784:9: ( 'sqrt' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SQRT
 *
 * Looks to match the characters the constitute the token SQRT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mSQRT()
{
    ANTLR_UINT32	_type;
      


    _type	    = SQRT;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:784:9: ( 'sqrt' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:784:11: 'sqrt'
    {
        this->matchs(lit_35);
        if  (this->hasException())
        {
            goto ruleSQRTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSQRTEx; /* Prevent compiler warnings */
    ruleSQRTEx: ;

}
// $ANTLR end SQRT

//   Comes from: 785:9: ( 'exp' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXP
 *
 * Looks to match the characters the constitute the token EXP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mEXP()
{
    ANTLR_UINT32	_type;
      


    _type	    = EXP;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:785:9: ( 'exp' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:785:11: 'exp'
    {
        this->matchs(lit_36);
        if  (this->hasException())
        {
            goto ruleEXPEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleEXPEx; /* Prevent compiler warnings */
    ruleEXPEx: ;

}
// $ANTLR end EXP

//   Comes from: 786:9: ( 'log' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LOG
 *
 * Looks to match the characters the constitute the token LOG
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mLOG()
{
    ANTLR_UINT32	_type;
      


    _type	    = LOG;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:786:9: ( 'log' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:786:11: 'log'
    {
        this->matchs(lit_37);
        if  (this->hasException())
        {
            goto ruleLOGEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLOGEx; /* Prevent compiler warnings */
    ruleLOGEx: ;

}
// $ANTLR end LOG

//   Comes from: 787:9: ( 'sin' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SIN
 *
 * Looks to match the characters the constitute the token SIN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mSIN()
{
    ANTLR_UINT32	_type;
      


    _type	    = SIN;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:787:9: ( 'sin' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:787:11: 'sin'
    {
        this->matchs(lit_38);
        if  (this->hasException())
        {
            goto ruleSINEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSINEx; /* Prevent compiler warnings */
    ruleSINEx: ;

}
// $ANTLR end SIN

//   Comes from: 788:9: ( 'cos' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COS
 *
 * Looks to match the characters the constitute the token COS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mCOS()
{
    ANTLR_UINT32	_type;
      


    _type	    = COS;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:788:9: ( 'cos' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:788:11: 'cos'
    {
        this->matchs(lit_39);
        if  (this->hasException())
        {
            goto ruleCOSEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOSEx; /* Prevent compiler warnings */
    ruleCOSEx: ;

}
// $ANTLR end COS

//   Comes from: 789:9: ( 'tan' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TAN
 *
 * Looks to match the characters the constitute the token TAN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mTAN()
{
    ANTLR_UINT32	_type;
      


    _type	    = TAN;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:789:9: ( 'tan' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:789:11: 'tan'
    {
        this->matchs(lit_40);
        if  (this->hasException())
        {
            goto ruleTANEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTANEx; /* Prevent compiler warnings */
    ruleTANEx: ;

}
// $ANTLR end TAN

//   Comes from: 790:9: ( 'asin' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ASIN
 *
 * Looks to match the characters the constitute the token ASIN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mASIN()
{
    ANTLR_UINT32	_type;
      


    _type	    = ASIN;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:790:9: ( 'asin' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:790:11: 'asin'
    {
        this->matchs(lit_41);
        if  (this->hasException())
        {
            goto ruleASINEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleASINEx; /* Prevent compiler warnings */
    ruleASINEx: ;

}
// $ANTLR end ASIN

//   Comes from: 791:9: ( 'acos' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ACOS
 *
 * Looks to match the characters the constitute the token ACOS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mACOS()
{
    ANTLR_UINT32	_type;
      


    _type	    = ACOS;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:791:9: ( 'acos' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:791:11: 'acos'
    {
        this->matchs(lit_42);
        if  (this->hasException())
        {
            goto ruleACOSEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleACOSEx; /* Prevent compiler warnings */
    ruleACOSEx: ;

}
// $ANTLR end ACOS

//   Comes from: 792:9: ( 'atan' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ATAN
 *
 * Looks to match the characters the constitute the token ATAN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mATAN()
{
    ANTLR_UINT32	_type;
      


    _type	    = ATAN;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:792:9: ( 'atan' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:792:11: 'atan'
    {
        this->matchs(lit_43);
        if  (this->hasException())
        {
            goto ruleATANEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleATANEx; /* Prevent compiler warnings */
    ruleATANEx: ;

}
// $ANTLR end ATAN

//   Comes from: 793:9: ( 'sinh' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SINH
 *
 * Looks to match the characters the constitute the token SINH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mSINH()
{
    ANTLR_UINT32	_type;
      


    _type	    = SINH;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:793:9: ( 'sinh' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:793:11: 'sinh'
    {
        this->matchs(lit_44);
        if  (this->hasException())
        {
            goto ruleSINHEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSINHEx; /* Prevent compiler warnings */
    ruleSINHEx: ;

}
// $ANTLR end SINH

//   Comes from: 794:9: ( 'cosh' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COSH
 *
 * Looks to match the characters the constitute the token COSH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mCOSH()
{
    ANTLR_UINT32	_type;
      


    _type	    = COSH;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:794:9: ( 'cosh' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:794:11: 'cosh'
    {
        this->matchs(lit_45);
        if  (this->hasException())
        {
            goto ruleCOSHEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOSHEx; /* Prevent compiler warnings */
    ruleCOSHEx: ;

}
// $ANTLR end COSH

//   Comes from: 795:9: ( 'tanh' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TANH
 *
 * Looks to match the characters the constitute the token TANH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mTANH()
{
    ANTLR_UINT32	_type;
      


    _type	    = TANH;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:795:9: ( 'tanh' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:795:11: 'tanh'
    {
        this->matchs(lit_46);
        if  (this->hasException())
        {
            goto ruleTANHEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTANHEx; /* Prevent compiler warnings */
    ruleTANHEx: ;

}
// $ANTLR end TANH

//   Comes from: 796:9: ( 'erf' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ERF
 *
 * Looks to match the characters the constitute the token ERF
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mERF()
{
    ANTLR_UINT32	_type;
      


    _type	    = ERF;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:796:9: ( 'erf' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:796:11: 'erf'
    {
        this->matchs(lit_47);
        if  (this->hasException())
        {
            goto ruleERFEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleERFEx; /* Prevent compiler warnings */
    ruleERFEx: ;

}
// $ANTLR end ERF

//   Comes from: 799:5: ( '0' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ZERO
 *
 * Looks to match the characters the constitute the token ZERO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mZERO()
{
    ANTLR_UINT32	_type;
      


    _type	    = ZERO;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:799:5: ( '0' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:799:9: '0'
    {
         this->matchc('0');
        if  (this->hasException())
        {
            goto ruleZEROEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleZEROEx; /* Prevent compiler warnings */
    ruleZEROEx: ;

}
// $ANTLR end ZERO

//   Comes from: 801:5: ( '0' | '1' .. '9' | '1' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INT
 *
 * Looks to match the characters the constitute the token INT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mINT()
{
    ANTLR_UINT32	_type;
      


    _type	    = INT;


    {
        //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:801:5: ( '0' | '1' .. '9' | '1' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' )

        ANTLR_UINT32 alt6;

        alt6=11;

        switch ( this->LA(1) )
        {
        case '0':
        	{
        		alt6=1;
        	}
            break;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		switch ( this->LA(2) )
        		{
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        		case '8':
        		case '9':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        							{
        								switch ( this->LA(5) )
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        									{
        										switch ( this->LA(6) )
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        											{
        												switch ( this->LA(7) )
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        													{
        														switch ( this->LA(8) )
        														{
        														case '0':
        														case '1':
        														case '2':
        														case '3':
        														case '4':
        														case '5':
        														case '6':
        														case '7':
        														case '8':
        														case '9':
        															{
        																switch ( this->LA(9) )
        																{
        																case '0':
        																case '1':
        																case '2':
        																case '3':
        																case '4':
        																case '5':
        																case '6':
        																case '7':
        																case '8':
        																case '9':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case '0':
        																		case '1':
        																		case '2':
        																		case '3':
        																		case '4':
        																		case '5':
        																		case '6':
        																		case '7':
        																		case '8':
        																		case '9':
        																			{
        																				alt6=11;
        																			}
        																		    break;

        																		default:
        																		    alt6=10;
        																		}

        																	}
        																    break;

        																default:
        																    alt6=9;
        																}

        															}
        														    break;

        														default:
        														    alt6=8;
        														}

        													}
        												    break;

        												default:
        												    alt6=7;
        												}

        											}
        										    break;

        										default:
        										    alt6=6;
        										}

        									}
        								    break;

        								default:
        								    alt6=5;
        								}

        							}
        						    break;

        						default:
        						    alt6=4;
        						}

        					}
        				    break;

        				default:
        				    alt6=3;
        				}

        			}
        		    break;

        		default:
        		    alt6=2;
        		}

        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< gEconLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 6 );
            ex->set_state( 0 );


            goto ruleINTEx;

        }

        switch (alt6)
        {
    	case 1:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:801:9: '0'
    	    {
    	         this->matchc('0');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:802:9: '1' .. '9'
    	    {
    	        this->matchRange('1', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:803:9: '1' .. '9' '0' .. '9'
    	    {
    	        this->matchRange('1', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	    }
    	    break;
    	case 4:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:804:9: '1' .. '9' '0' .. '9' '0' .. '9'
    	    {
    	        this->matchRange('1', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	    }
    	    break;
    	case 5:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:805:9: '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9'
    	    {
    	        this->matchRange('1', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	    }
    	    break;
    	case 6:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:806:9: '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9'
    	    {
    	        this->matchRange('1', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	    }
    	    break;
    	case 7:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:807:9: '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9'
    	    {
    	        this->matchRange('1', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	    }
    	    break;
    	case 8:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:808:9: '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9'
    	    {
    	        this->matchRange('1', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	    }
    	    break;
    	case 9:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:809:9: '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9'
    	    {
    	        this->matchRange('1', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	    }
    	    break;
    	case 10:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:810:9: '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9'
    	    {
    	        this->matchRange('1', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	    }
    	    break;
    	case 11:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:811:9: '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9'
    	    {
    	        this->matchRange('1', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleINTEx;
    	        }


    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleINTEx; /* Prevent compiler warnings */
    ruleINTEx: ;

}
// $ANTLR end INT

//   Comes from: 815:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )+ ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )? | ( '0' .. '9' )+ '.' ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )? | '.' ( '0' .. '9' )+ ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )? | '0' ( '0' .. '9' )+ | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOUBLE
 *
 * Looks to match the characters the constitute the token DOUBLE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mDOUBLE()
{
    ANTLR_UINT32	_type;
      


    _type	    = DOUBLE;


    {
        //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:815:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )+ ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )? | ( '0' .. '9' )+ '.' ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )? | '.' ( '0' .. '9' )+ ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )? | '0' ( '0' .. '9' )+ | '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' ( '0' .. '9' )+ )

        ANTLR_UINT32 alt22;

        alt22=5;

        alt22 = cdfa22.predict(this, this->get_rec(), this->get_istream(), cdfa22 );
        if  (this->hasException())
        {
            goto ruleDOUBLEEx;
        }

        switch (alt22)
        {
    	case 1:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:815:9: ( '0' .. '9' )+ '.' ( '0' .. '9' )+ ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )?
    	    {
    	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:815:9: ( '0' .. '9' )+
    	        {
    	            int cnt7=0;

    	            for (;;)
    	            {
    	                int alt7=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt7=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt7)
    	        	{
    	        	    case 1:
    	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleDOUBLEEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt7 >= 1 )
    	        		{
    	        		    goto loop7;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< gEconLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleDOUBLEEx;
    	        	}
    	        	cnt7++;
    	            }
    	            loop7: ;	/* Jump to here if this rule does not match */
    	        }

    	         this->matchc('.');
    	        if  (this->hasException())
    	        {
    	            goto ruleDOUBLEEx;
    	        }


    	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:815:23: ( '0' .. '9' )+
    	        {
    	            int cnt8=0;

    	            for (;;)
    	            {
    	                int alt8=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt8=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt8)
    	        	{
    	        	    case 1:
    	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleDOUBLEEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt8 >= 1 )
    	        		{
    	        		    goto loop8;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< gEconLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleDOUBLEEx;
    	        	}
    	        	cnt8++;
    	            }
    	            loop8: ;	/* Jump to here if this rule does not match */
    	        }

    	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:815:33: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )?
    	        {
    	            int alt11=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt11=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt11)
    	            {
    	        	case 1:
    	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:815:34: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    	        	    {
    	        	        if ( this->LA(1) == 'E' || this->LA(1) == 'e' )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleDOUBLEEx;
    	        	        }


    	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:815:46: ( '+' | '-' )?
    	        	        {
    	        	            int alt9=2;
    	        	            switch ( this->LA(1) )
    	        	            {
    	        	                case '+':
    	        	                case '-':
    	        	                	{
    	        	                		alt9=1;
    	        	                	}
    	        	                    break;
    	        	            }

    	        	            switch (alt9)
    	        	            {
    	        	        	case 1:
    	        	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    	        	        	    {
    	        	        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
    	        	        	        {
    	        	        	            this->consume();
    	        	        	        }
    	        	        	        else
    	        	        	        {
    	        	        	            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	            this->recover();
    	        	        	            goto ruleDOUBLEEx;
    	        	        	        }


    	        	        	    }
    	        	        	    break;

    	        	            }
    	        	        }

    	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:815:59: ( '0' .. '9' )+
    	        	        {
    	        	            int cnt10=0;

    	        	            for (;;)
    	        	            {
    	        	                int alt10=2;
    	        	        	switch ( this->LA(1) )
    	        	        	{
    	        	        	case '0':
    	        	        	case '1':
    	        	        	case '2':
    	        	        	case '3':
    	        	        	case '4':
    	        	        	case '5':
    	        	        	case '6':
    	        	        	case '7':
    	        	        	case '8':
    	        	        	case '9':
    	        	        		{
    	        	        			alt10=1;
    	        	        		}
    	        	        	    break;

    	        	        	}

    	        	        	switch (alt10)
    	        	        	{
    	        	        	    case 1:
    	        	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    	        	        	        {
    	        	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	        	            {
    	        	        	                this->consume();
    	        	        	            }
    	        	        	            else
    	        	        	            {
    	        	        	                new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	                this->recover();
    	        	        	                goto ruleDOUBLEEx;
    	        	        	            }


    	        	        	        }
    	        	        	        break;

    	        	        	    default:

    	        	        		if ( cnt10 >= 1 )
    	        	        		{
    	        	        		    goto loop10;
    	        	        		}
    	        	        		/* mismatchedSetEx()
    	        	        		 */
    	        	        		new ANTLR_Exception< gEconLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        	        		goto ruleDOUBLEEx;
    	        	        	}
    	        	        	cnt10++;
    	        	            }
    	        	            loop10: ;	/* Jump to here if this rule does not match */
    	        	        }

    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 2:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:816:9: ( '0' .. '9' )+ '.' ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )?
    	    {
    	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:816:9: ( '0' .. '9' )+
    	        {
    	            int cnt12=0;

    	            for (;;)
    	            {
    	                int alt12=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt12=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt12)
    	        	{
    	        	    case 1:
    	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleDOUBLEEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt12 >= 1 )
    	        		{
    	        		    goto loop12;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< gEconLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleDOUBLEEx;
    	        	}
    	        	cnt12++;
    	            }
    	            loop12: ;	/* Jump to here if this rule does not match */
    	        }

    	         this->matchc('.');
    	        if  (this->hasException())
    	        {
    	            goto ruleDOUBLEEx;
    	        }


    	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:816:23: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )?
    	        {
    	            int alt15=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt15=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt15)
    	            {
    	        	case 1:
    	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:816:24: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    	        	    {
    	        	        if ( this->LA(1) == 'E' || this->LA(1) == 'e' )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleDOUBLEEx;
    	        	        }


    	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:816:36: ( '+' | '-' )?
    	        	        {
    	        	            int alt13=2;
    	        	            switch ( this->LA(1) )
    	        	            {
    	        	                case '+':
    	        	                case '-':
    	        	                	{
    	        	                		alt13=1;
    	        	                	}
    	        	                    break;
    	        	            }

    	        	            switch (alt13)
    	        	            {
    	        	        	case 1:
    	        	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    	        	        	    {
    	        	        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
    	        	        	        {
    	        	        	            this->consume();
    	        	        	        }
    	        	        	        else
    	        	        	        {
    	        	        	            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	            this->recover();
    	        	        	            goto ruleDOUBLEEx;
    	        	        	        }


    	        	        	    }
    	        	        	    break;

    	        	            }
    	        	        }

    	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:816:49: ( '0' .. '9' )+
    	        	        {
    	        	            int cnt14=0;

    	        	            for (;;)
    	        	            {
    	        	                int alt14=2;
    	        	        	switch ( this->LA(1) )
    	        	        	{
    	        	        	case '0':
    	        	        	case '1':
    	        	        	case '2':
    	        	        	case '3':
    	        	        	case '4':
    	        	        	case '5':
    	        	        	case '6':
    	        	        	case '7':
    	        	        	case '8':
    	        	        	case '9':
    	        	        		{
    	        	        			alt14=1;
    	        	        		}
    	        	        	    break;

    	        	        	}

    	        	        	switch (alt14)
    	        	        	{
    	        	        	    case 1:
    	        	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    	        	        	        {
    	        	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	        	            {
    	        	        	                this->consume();
    	        	        	            }
    	        	        	            else
    	        	        	            {
    	        	        	                new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	                this->recover();
    	        	        	                goto ruleDOUBLEEx;
    	        	        	            }


    	        	        	        }
    	        	        	        break;

    	        	        	    default:

    	        	        		if ( cnt14 >= 1 )
    	        	        		{
    	        	        		    goto loop14;
    	        	        		}
    	        	        		/* mismatchedSetEx()
    	        	        		 */
    	        	        		new ANTLR_Exception< gEconLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        	        		goto ruleDOUBLEEx;
    	        	        	}
    	        	        	cnt14++;
    	        	            }
    	        	            loop14: ;	/* Jump to here if this rule does not match */
    	        	        }

    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 3:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:817:9: '.' ( '0' .. '9' )+ ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )?
    	    {
    	         this->matchc('.');
    	        if  (this->hasException())
    	        {
    	            goto ruleDOUBLEEx;
    	        }


    	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:817:13: ( '0' .. '9' )+
    	        {
    	            int cnt16=0;

    	            for (;;)
    	            {
    	                int alt16=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt16=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt16)
    	        	{
    	        	    case 1:
    	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleDOUBLEEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt16 >= 1 )
    	        		{
    	        		    goto loop16;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< gEconLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleDOUBLEEx;
    	        	}
    	        	cnt16++;
    	            }
    	            loop16: ;	/* Jump to here if this rule does not match */
    	        }

    	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:817:23: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )?
    	        {
    	            int alt19=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt19=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt19)
    	            {
    	        	case 1:
    	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:817:24: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    	        	    {
    	        	        if ( this->LA(1) == 'E' || this->LA(1) == 'e' )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleDOUBLEEx;
    	        	        }


    	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:817:36: ( '+' | '-' )?
    	        	        {
    	        	            int alt17=2;
    	        	            switch ( this->LA(1) )
    	        	            {
    	        	                case '+':
    	        	                case '-':
    	        	                	{
    	        	                		alt17=1;
    	        	                	}
    	        	                    break;
    	        	            }

    	        	            switch (alt17)
    	        	            {
    	        	        	case 1:
    	        	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    	        	        	    {
    	        	        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
    	        	        	        {
    	        	        	            this->consume();
    	        	        	        }
    	        	        	        else
    	        	        	        {
    	        	        	            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	            this->recover();
    	        	        	            goto ruleDOUBLEEx;
    	        	        	        }


    	        	        	    }
    	        	        	    break;

    	        	            }
    	        	        }

    	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:817:49: ( '0' .. '9' )+
    	        	        {
    	        	            int cnt18=0;

    	        	            for (;;)
    	        	            {
    	        	                int alt18=2;
    	        	        	switch ( this->LA(1) )
    	        	        	{
    	        	        	case '0':
    	        	        	case '1':
    	        	        	case '2':
    	        	        	case '3':
    	        	        	case '4':
    	        	        	case '5':
    	        	        	case '6':
    	        	        	case '7':
    	        	        	case '8':
    	        	        	case '9':
    	        	        		{
    	        	        			alt18=1;
    	        	        		}
    	        	        	    break;

    	        	        	}

    	        	        	switch (alt18)
    	        	        	{
    	        	        	    case 1:
    	        	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    	        	        	        {
    	        	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	        	            {
    	        	        	                this->consume();
    	        	        	            }
    	        	        	            else
    	        	        	            {
    	        	        	                new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	                this->recover();
    	        	        	                goto ruleDOUBLEEx;
    	        	        	            }


    	        	        	        }
    	        	        	        break;

    	        	        	    default:

    	        	        		if ( cnt18 >= 1 )
    	        	        		{
    	        	        		    goto loop18;
    	        	        		}
    	        	        		/* mismatchedSetEx()
    	        	        		 */
    	        	        		new ANTLR_Exception< gEconLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        	        		goto ruleDOUBLEEx;
    	        	        	}
    	        	        	cnt18++;
    	        	            }
    	        	            loop18: ;	/* Jump to here if this rule does not match */
    	        	        }

    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 4:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:818:9: '0' ( '0' .. '9' )+
    	    {
    	         this->matchc('0');
    	        if  (this->hasException())
    	        {
    	            goto ruleDOUBLEEx;
    	        }


    	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:818:13: ( '0' .. '9' )+
    	        {
    	            int cnt20=0;

    	            for (;;)
    	            {
    	                int alt20=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt20=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt20)
    	        	{
    	        	    case 1:
    	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleDOUBLEEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt20 >= 1 )
    	        		{
    	        		    goto loop20;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< gEconLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleDOUBLEEx;
    	        	}
    	        	cnt20++;
    	            }
    	            loop20: ;	/* Jump to here if this rule does not match */
    	        }

    	    }
    	    break;
    	case 5:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:819:9: '1' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' '0' .. '9' ( '0' .. '9' )+
    	    {
    	        this->matchRange('1', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleDOUBLEEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleDOUBLEEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleDOUBLEEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleDOUBLEEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleDOUBLEEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleDOUBLEEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleDOUBLEEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleDOUBLEEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleDOUBLEEx;
    	        }


    	        this->matchRange('0', '9');
    	        if  (this->hasException())
    	        {
    	            goto ruleDOUBLEEx;
    	        }


    	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:819:99: ( '0' .. '9' )+
    	        {
    	            int cnt21=0;

    	            for (;;)
    	            {
    	                int alt21=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt21=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt21)
    	        	{
    	        	    case 1:
    	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleDOUBLEEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt21 >= 1 )
    	        		{
    	        		    goto loop21;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< gEconLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleDOUBLEEx;
    	        	}
    	        	cnt21++;
    	            }
    	            loop21: ;	/* Jump to here if this rule does not match */
    	        }

    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDOUBLEEx; /* Prevent compiler warnings */
    ruleDOUBLEEx: ;

}
// $ANTLR end DOUBLE

//   Comes from: 824:5: ( 'a' .. 'z' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SLETTER
 *
 * Looks to match the characters the constitute the token SLETTER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mSLETTER()
{
    ANTLR_UINT32	_type;
      


    _type	    = SLETTER;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:824:5: ( 'a' .. 'z' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    {
        if ( ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleSLETTEREx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSLETTEREx; /* Prevent compiler warnings */
    ruleSLETTEREx: ;

}
// $ANTLR end SLETTER

//   Comes from: 828:5: ( 'A' .. 'Z' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CLETTER
 *
 * Looks to match the characters the constitute the token CLETTER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mCLETTER()
{
    ANTLR_UINT32	_type;
      


    _type	    = CLETTER;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:828:5: ( 'A' .. 'Z' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    {
        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleCLETTEREx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCLETTEREx; /* Prevent compiler warnings */
    ruleCLETTEREx: ;

}
// $ANTLR end CLETTER

//   Comes from: 831:5: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ID
 *
 * Looks to match the characters the constitute the token ID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mID()
{
    ANTLR_UINT32	_type;
      


    _type	    = ID;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:831:5: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )* )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:831:7: ( 'a' .. 'z' | 'A' .. 'Z' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )*
    {
        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleIDEx;
        }


        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:831:27: ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )*

        for (;;)
        {
            int alt24=2;
            switch ( this->LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt24=1;
            	}
                break;

            }

            switch (alt24)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:831:28: ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )
        	    {
        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:831:28: ( '_' )?
        	        {
        	            int alt23=2;
        	            switch ( this->LA(1) )
        	            {
        	                case '_':
        	                	{
        	                		alt23=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt23)
        	            {
        	        	case 1:
        	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:831:29: '_'
        	        	    {
        	        	         this->matchc('_');
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleIDEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleIDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop24;	/* break out of the loop */
        	    break;
            }
        }
        loop24: ; /* Jump out to here if this rule does not match */


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIDEx; /* Prevent compiler warnings */
    ruleIDEx: ;

}
// $ANTLR end ID

//   Comes from: 835:5: ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UID
 *
 * Looks to match the characters the constitute the token UID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mUID()
{
    ANTLR_UINT32	_type;
      


    _type	    = UID;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:835:5: ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )* )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:835:7: ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )*
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:835:7: ( '_' )?
        {
            int alt25=2;
            switch ( this->LA(1) )
            {
                case '_':
                	{
                		alt25=1;
                	}
                    break;
            }

            switch (alt25)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:835:7: '_'
        	    {
        	         this->matchc('_');
        	        if  (this->hasException())
        	        {
        	            goto ruleUIDEx;
        	        }


        	    }
        	    break;

            }
        }

        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleUIDEx;
        }


        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:835:32: ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )*

        for (;;)
        {
            int alt27=2;
            switch ( this->LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt27=1;
            	}
                break;

            }

            switch (alt27)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:835:33: ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )
        	    {
        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:835:33: ( '_' )?
        	        {
        	            int alt26=2;
        	            switch ( this->LA(1) )
        	            {
        	                case '_':
        	                	{
        	                		alt26=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt26)
        	            {
        	        	case 1:
        	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:835:34: '_'
        	        	    {
        	        	         this->matchc('_');
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleUIDEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleUIDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop27;	/* break out of the loop */
        	    break;
            }
        }
        loop27: ; /* Jump out to here if this rule does not match */


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleUIDEx; /* Prevent compiler warnings */
    ruleUIDEx: ;

}
// $ANTLR end UID

//   Comes from: 839:5: ( ( '0' .. '9' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DID
 *
 * Looks to match the characters the constitute the token DID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mDID()
{
    ANTLR_UINT32	_type;
      


    _type	    = DID;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:839:5: ( ( '0' .. '9' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )+ )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:839:7: ( '0' .. '9' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )+
    {
        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleDIDEx;
        }


        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:839:17: ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )+
        {
            int cnt29=0;

            for (;;)
            {
                int alt29=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        	case 'A':
        	case 'B':
        	case 'C':
        	case 'D':
        	case 'E':
        	case 'F':
        	case 'G':
        	case 'H':
        	case 'I':
        	case 'J':
        	case 'K':
        	case 'L':
        	case 'M':
        	case 'N':
        	case 'O':
        	case 'P':
        	case 'Q':
        	case 'R':
        	case 'S':
        	case 'T':
        	case 'U':
        	case 'V':
        	case 'W':
        	case 'X':
        	case 'Y':
        	case 'Z':
        	case '_':
        	case 'a':
        	case 'b':
        	case 'c':
        	case 'd':
        	case 'e':
        	case 'f':
        	case 'g':
        	case 'h':
        	case 'i':
        	case 'j':
        	case 'k':
        	case 'l':
        	case 'm':
        	case 'n':
        	case 'o':
        	case 'p':
        	case 'q':
        	case 'r':
        	case 's':
        	case 't':
        	case 'u':
        	case 'v':
        	case 'w':
        	case 'x':
        	case 'y':
        	case 'z':
        		{
        			alt29=1;
        		}
        	    break;

        	}

        	switch (alt29)
        	{
        	    case 1:
        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:839:18: ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )
        	        {
        	            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:839:18: ( '_' )?
        	            {
        	                int alt28=2;
        	                switch ( this->LA(1) )
        	                {
        	                    case '_':
        	                    	{
        	                    		alt28=1;
        	                    	}
        	                        break;
        	                }

        	                switch (alt28)
        	                {
        	            	case 1:
        	            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:839:19: '_'
        	            	    {
        	            	         this->matchc('_');
        	            	        if  (this->hasException())
        	            	        {
        	            	            goto ruleDIDEx;
        	            	        }


        	            	    }
        	            	    break;

        	                }
        	            }

        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleDIDEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt29 >= 1 )
        		{
        		    goto loop29;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< gEconLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleDIDEx;
        	}
        	cnt29++;
            }
            loop29: ;	/* Jump to here if this rule does not match */
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDIDEx; /* Prevent compiler warnings */
    ruleDIDEx: ;

}
// $ANTLR end DID

//   Comes from: 843:5: ( '_' ( '0' .. '9' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UDID
 *
 * Looks to match the characters the constitute the token UDID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mUDID()
{
    ANTLR_UINT32	_type;
      


    _type	    = UDID;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:843:5: ( '_' ( '0' .. '9' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )* )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:843:7: '_' ( '0' .. '9' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )*
    {
         this->matchc('_');
        if  (this->hasException())
        {
            goto ruleUDIDEx;
        }


        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleUDIDEx;
        }


        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:843:21: ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )*

        for (;;)
        {
            int alt31=2;
            switch ( this->LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt31=1;
            	}
                break;

            }

            switch (alt31)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:843:22: ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )
        	    {
        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:843:22: ( '_' )?
        	        {
        	            int alt30=2;
        	            switch ( this->LA(1) )
        	            {
        	                case '_':
        	                	{
        	                		alt30=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt30)
        	            {
        	        	case 1:
        	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:843:23: '_'
        	        	    {
        	        	         this->matchc('_');
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleUDIDEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleUDIDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop31;	/* break out of the loop */
        	    break;
            }
        }
        loop31: ; /* Jump out to here if this rule does not match */


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleUDIDEx; /* Prevent compiler warnings */
    ruleUDIDEx: ;

}
// $ANTLR end UDID

//   Comes from: 847:5: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )* ( '_' )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IDU
 *
 * Looks to match the characters the constitute the token IDU
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mIDU()
{
    ANTLR_UINT32	_type;
      


    _type	    = IDU;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:847:5: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )* ( '_' )? )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:847:7: ( 'a' .. 'z' | 'A' .. 'Z' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )* ( '_' )?
    {
        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleIDUEx;
        }


        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:847:27: ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )*

        for (;;)
        {
            int alt33=2;
            switch ( this->LA(1) )
            {
            case '_':
            	{
            		switch ( this->LA(2) )
            		{
            		case '0':
            		case '1':
            		case '2':
            		case '3':
            		case '4':
            		case '5':
            		case '6':
            		case '7':
            		case '8':
            		case '9':
            		case 'A':
            		case 'B':
            		case 'C':
            		case 'D':
            		case 'E':
            		case 'F':
            		case 'G':
            		case 'H':
            		case 'I':
            		case 'J':
            		case 'K':
            		case 'L':
            		case 'M':
            		case 'N':
            		case 'O':
            		case 'P':
            		case 'Q':
            		case 'R':
            		case 'S':
            		case 'T':
            		case 'U':
            		case 'V':
            		case 'W':
            		case 'X':
            		case 'Y':
            		case 'Z':
            		case 'a':
            		case 'b':
            		case 'c':
            		case 'd':
            		case 'e':
            		case 'f':
            		case 'g':
            		case 'h':
            		case 'i':
            		case 'j':
            		case 'k':
            		case 'l':
            		case 'm':
            		case 'n':
            		case 'o':
            		case 'p':
            		case 'q':
            		case 'r':
            		case 's':
            		case 't':
            		case 'u':
            		case 'v':
            		case 'w':
            		case 'x':
            		case 'y':
            		case 'z':
            			{
            				alt33=1;
            			}
            		    break;

            		}

            	}
                break;
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt33=1;
            	}
                break;

            }

            switch (alt33)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:847:28: ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )
        	    {
        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:847:28: ( '_' )?
        	        {
        	            int alt32=2;
        	            switch ( this->LA(1) )
        	            {
        	                case '_':
        	                	{
        	                		alt32=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt32)
        	            {
        	        	case 1:
        	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:847:29: '_'
        	        	    {
        	        	         this->matchc('_');
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleIDUEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleIDUEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop33;	/* break out of the loop */
        	    break;
            }
        }
        loop33: ; /* Jump out to here if this rule does not match */


        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:847:65: ( '_' )?
        {
            int alt34=2;
            switch ( this->LA(1) )
            {
                case '_':
                	{
                		alt34=1;
                	}
                    break;
            }

            switch (alt34)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:847:65: '_'
        	    {
        	         this->matchc('_');
        	        if  (this->hasException())
        	        {
        	            goto ruleIDUEx;
        	        }


        	    }
        	    break;

            }
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIDUEx; /* Prevent compiler warnings */
    ruleIDUEx: ;

}
// $ANTLR end IDU

//   Comes from: 851:5: ( ( '0' .. '9' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )* ( '_' )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIDU
 *
 * Looks to match the characters the constitute the token DIDU
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mDIDU()
{
    ANTLR_UINT32	_type;
      


    _type	    = DIDU;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:851:5: ( ( '0' .. '9' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )* ( '_' )? )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:851:7: ( '0' .. '9' ) ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )* ( '_' )?
    {
        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleDIDUEx;
        }


        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:851:17: ( ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ) )*

        for (;;)
        {
            int alt36=2;
            switch ( this->LA(1) )
            {
            case '_':
            	{
            		switch ( this->LA(2) )
            		{
            		case '0':
            		case '1':
            		case '2':
            		case '3':
            		case '4':
            		case '5':
            		case '6':
            		case '7':
            		case '8':
            		case '9':
            		case 'A':
            		case 'B':
            		case 'C':
            		case 'D':
            		case 'E':
            		case 'F':
            		case 'G':
            		case 'H':
            		case 'I':
            		case 'J':
            		case 'K':
            		case 'L':
            		case 'M':
            		case 'N':
            		case 'O':
            		case 'P':
            		case 'Q':
            		case 'R':
            		case 'S':
            		case 'T':
            		case 'U':
            		case 'V':
            		case 'W':
            		case 'X':
            		case 'Y':
            		case 'Z':
            		case 'a':
            		case 'b':
            		case 'c':
            		case 'd':
            		case 'e':
            		case 'f':
            		case 'g':
            		case 'h':
            		case 'i':
            		case 'j':
            		case 'k':
            		case 'l':
            		case 'm':
            		case 'n':
            		case 'o':
            		case 'p':
            		case 'q':
            		case 'r':
            		case 's':
            		case 't':
            		case 'u':
            		case 'v':
            		case 'w':
            		case 'x':
            		case 'y':
            		case 'z':
            			{
            				alt36=1;
            			}
            		    break;

            		}

            	}
                break;
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt36=1;
            	}
                break;

            }

            switch (alt36)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:851:18: ( '_' )? ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )
        	    {
        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:851:18: ( '_' )?
        	        {
        	            int alt35=2;
        	            switch ( this->LA(1) )
        	            {
        	                case '_':
        	                	{
        	                		alt35=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt35)
        	            {
        	        	case 1:
        	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:851:19: '_'
        	        	    {
        	        	         this->matchc('_');
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleDIDUEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleDIDUEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop36;	/* break out of the loop */
        	    break;
            }
        }
        loop36: ; /* Jump out to here if this rule does not match */


        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:851:55: ( '_' )?
        {
            int alt37=2;
            switch ( this->LA(1) )
            {
                case '_':
                	{
                		alt37=1;
                	}
                    break;
            }

            switch (alt37)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:851:55: '_'
        	    {
        	         this->matchc('_');
        	        if  (this->hasException())
        	        {
        	            goto ruleDIDUEx;
        	        }


        	    }
        	    break;

            }
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDIDUEx; /* Prevent compiler warnings */
    ruleDIDUEx: ;

}
// $ANTLR end DIDU

//   Comes from: 855:5: ( ( ' ' | '\\t' | '\\n' | '\\r' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mWS()
{
    ANTLR_UINT32	_type;
      


    _type	    = WS;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:855:5: ( ( ' ' | '\\t' | '\\n' | '\\r' )+ )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:855:9: ( ' ' | '\\t' | '\\n' | '\\r' )+
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:855:9: ( ' ' | '\\t' | '\\n' | '\\r' )+
        {
            int cnt38=0;

            for (;;)
            {
                int alt38=2;
        	switch ( this->LA(1) )
        	{
        	case '\t':
        	case '\n':
        	case '\r':
        	case ' ':
        		{
        			alt38=1;
        		}
        	    break;

        	}

        	switch (alt38)
        	{
        	    case 1:
        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
        	        {
        	            if ( ((this->LA(1) >= '\t') && (this->LA(1) <= '\n')) || this->LA(1) == '\r' || this->LA(1) == ' ' )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleWSEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt38 >= 1 )
        		{
        		    goto loop38;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< gEconLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleWSEx;
        	}
        	cnt38++;
            }
            loop38: ;	/* Jump to here if this rule does not match */
        }

        {
             this->get_state()->get_channel() = HIDDEN; 
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 858:10: ( '~' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TILDE
 *
 * Looks to match the characters the constitute the token TILDE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mTILDE()
{
    ANTLR_UINT32	_type;
      


    _type	    = TILDE;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:858:10: ( '~' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:858:12: '~'
    {
         this->matchc('~');
        if  (this->hasException())
        {
            goto ruleTILDEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTILDEEx; /* Prevent compiler warnings */
    ruleTILDEEx: ;

}
// $ANTLR end TILDE

//   Comes from: 859:10: ( '?' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start QUESTION
 *
 * Looks to match the characters the constitute the token QUESTION
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mQUESTION()
{
    ANTLR_UINT32	_type;
      


    _type	    = QUESTION;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:859:10: ( '?' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:859:12: '?'
    {
         this->matchc('?');
        if  (this->hasException())
        {
            goto ruleQUESTIONEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleQUESTIONEx; /* Prevent compiler warnings */
    ruleQUESTIONEx: ;

}
// $ANTLR end QUESTION

//   Comes from: 860:10: ( '!' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXCLAM
 *
 * Looks to match the characters the constitute the token EXCLAM
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mEXCLAM()
{
    ANTLR_UINT32	_type;
      


    _type	    = EXCLAM;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:860:10: ( '!' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:860:12: '!'
    {
         this->matchc('!');
        if  (this->hasException())
        {
            goto ruleEXCLAMEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleEXCLAMEx; /* Prevent compiler warnings */
    ruleEXCLAMEx: ;

}
// $ANTLR end EXCLAM

//   Comes from: 861:10: ( '$' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOLLAR
 *
 * Looks to match the characters the constitute the token DOLLAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mDOLLAR()
{
    ANTLR_UINT32	_type;
      


    _type	    = DOLLAR;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:861:10: ( '$' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:861:12: '$'
    {
         this->matchc('$');
        if  (this->hasException())
        {
            goto ruleDOLLAREx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDOLLAREx; /* Prevent compiler warnings */
    ruleDOLLAREx: ;

}
// $ANTLR end DOLLAR

//   Comes from: 862:10: ( '@' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start AT
 *
 * Looks to match the characters the constitute the token AT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mAT()
{
    ANTLR_UINT32	_type;
      


    _type	    = AT;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:862:10: ( '@' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:862:12: '@'
    {
         this->matchc('@');
        if  (this->hasException())
        {
            goto ruleATEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleATEx; /* Prevent compiler warnings */
    ruleATEx: ;

}
// $ANTLR end AT

//   Comes from: 863:10: ( '&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start AND
 *
 * Looks to match the characters the constitute the token AND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mAND()
{
    ANTLR_UINT32	_type;
      


    _type	    = AND;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:863:10: ( '&' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:863:12: '&'
    {
         this->matchc('&');
        if  (this->hasException())
        {
            goto ruleANDEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleANDEx; /* Prevent compiler warnings */
    ruleANDEx: ;

}
// $ANTLR end AND

//   Comes from: 864:10: ( '|' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OR
 *
 * Looks to match the characters the constitute the token OR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mOR()
{
    ANTLR_UINT32	_type;
      


    _type	    = OR;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:864:10: ( '|' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:864:12: '|'
    {
         this->matchc('|');
        if  (this->hasException())
        {
            goto ruleOREx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOREx; /* Prevent compiler warnings */
    ruleOREx: ;

}
// $ANTLR end OR

//   Comes from: 865:10: ( '||' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOR
 *
 * Looks to match the characters the constitute the token DOR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mDOR()
{
    ANTLR_UINT32	_type;
      


    _type	    = DOR;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:865:10: ( '||' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:865:12: '||'
    {
        this->matchs(lit_48);
        if  (this->hasException())
        {
            goto ruleDOREx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDOREx; /* Prevent compiler warnings */
    ruleDOREx: ;

}
// $ANTLR end DOR

//   Comes from: 866:10: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SEMI
 *
 * Looks to match the characters the constitute the token SEMI
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mSEMI()
{
    ANTLR_UINT32	_type;
      


    _type	    = SEMI;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:866:10: ( ';' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:866:12: ';'
    {
         this->matchc(';');
        if  (this->hasException())
        {
            goto ruleSEMIEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSEMIEx; /* Prevent compiler warnings */
    ruleSEMIEx: ;

}
// $ANTLR end SEMI

//   Comes from: 867:10: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COLON
 *
 * Looks to match the characters the constitute the token COLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mCOLON()
{
    ANTLR_UINT32	_type;
      


    _type	    = COLON;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:867:10: ( ':' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:867:12: ':'
    {
         this->matchc(':');
        if  (this->hasException())
        {
            goto ruleCOLONEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOLONEx; /* Prevent compiler warnings */
    ruleCOLONEx: ;

}
// $ANTLR end COLON

//   Comes from: 868:10: ( '::' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DBLCOLON
 *
 * Looks to match the characters the constitute the token DBLCOLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mDBLCOLON()
{
    ANTLR_UINT32	_type;
      


    _type	    = DBLCOLON;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:868:10: ( '::' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:868:12: '::'
    {
        this->matchs(lit_49);
        if  (this->hasException())
        {
            goto ruleDBLCOLONEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDBLCOLONEx; /* Prevent compiler warnings */
    ruleDBLCOLONEx: ;

}
// $ANTLR end DBLCOLON

//   Comes from: 869:10: ( '..' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DDOT
 *
 * Looks to match the characters the constitute the token DDOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mDDOT()
{
    ANTLR_UINT32	_type;
      


    _type	    = DDOT;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:869:10: ( '..' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:869:12: '..'
    {
        this->matchs(lit_50);
        if  (this->hasException())
        {
            goto ruleDDOTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDDOTEx; /* Prevent compiler warnings */
    ruleDDOTEx: ;

}
// $ANTLR end DDOT

//   Comes from: 870:10: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMA
 *
 * Looks to match the characters the constitute the token COMMA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mCOMMA()
{
    ANTLR_UINT32	_type;
      


    _type	    = COMMA;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:870:10: ( ',' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:870:12: ','
    {
         this->matchc(',');
        if  (this->hasException())
        {
            goto ruleCOMMAEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOMMAEx; /* Prevent compiler warnings */
    ruleCOMMAEx: ;

}
// $ANTLR end COMMA

//   Comes from: 871:10: ( '->' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RARROW
 *
 * Looks to match the characters the constitute the token RARROW
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mRARROW()
{
    ANTLR_UINT32	_type;
      


    _type	    = RARROW;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:871:10: ( '->' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:871:12: '->'
    {
        this->matchs(lit_51);
        if  (this->hasException())
        {
            goto ruleRARROWEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleRARROWEx; /* Prevent compiler warnings */
    ruleRARROWEx: ;

}
// $ANTLR end RARROW

//   Comes from: 872:10: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PLUS
 *
 * Looks to match the characters the constitute the token PLUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mPLUS()
{
    ANTLR_UINT32	_type;
      


    _type	    = PLUS;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:872:10: ( '+' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:872:12: '+'
    {
         this->matchc('+');
        if  (this->hasException())
        {
            goto rulePLUSEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePLUSEx; /* Prevent compiler warnings */
    rulePLUSEx: ;

}
// $ANTLR end PLUS

//   Comes from: 873:10: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MINUS
 *
 * Looks to match the characters the constitute the token MINUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mMINUS()
{
    ANTLR_UINT32	_type;
      


    _type	    = MINUS;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:873:10: ( '-' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:873:12: '-'
    {
         this->matchc('-');
        if  (this->hasException())
        {
            goto ruleMINUSEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMINUSEx; /* Prevent compiler warnings */
    ruleMINUSEx: ;

}
// $ANTLR end MINUS

//   Comes from: 874:10: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MUL
 *
 * Looks to match the characters the constitute the token MUL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mMUL()
{
    ANTLR_UINT32	_type;
      


    _type	    = MUL;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:874:10: ( '*' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:874:12: '*'
    {
         this->matchc('*');
        if  (this->hasException())
        {
            goto ruleMULEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMULEx; /* Prevent compiler warnings */
    ruleMULEx: ;

}
// $ANTLR end MUL

//   Comes from: 875:10: ( '/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIV
 *
 * Looks to match the characters the constitute the token DIV
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mDIV()
{
    ANTLR_UINT32	_type;
      


    _type	    = DIV;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:875:10: ( '/' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:875:12: '/'
    {
         this->matchc('/');
        if  (this->hasException())
        {
            goto ruleDIVEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDIVEx; /* Prevent compiler warnings */
    ruleDIVEx: ;

}
// $ANTLR end DIV

//   Comes from: 876:10: ( '^' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start POW
 *
 * Looks to match the characters the constitute the token POW
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mPOW()
{
    ANTLR_UINT32	_type;
      


    _type	    = POW;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:876:10: ( '^' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:876:12: '^'
    {
         this->matchc('^');
        if  (this->hasException())
        {
            goto rulePOWEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePOWEx; /* Prevent compiler warnings */
    rulePOWEx: ;

}
// $ANTLR end POW

//   Comes from: 877:10: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EQ
 *
 * Looks to match the characters the constitute the token EQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mEQ()
{
    ANTLR_UINT32	_type;
      


    _type	    = EQ;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:877:10: ( '=' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:877:12: '='
    {
         this->matchc('=');
        if  (this->hasException())
        {
            goto ruleEQEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleEQEx; /* Prevent compiler warnings */
    ruleEQEx: ;

}
// $ANTLR end EQ

//   Comes from: 878:10: ( '==' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DEQ
 *
 * Looks to match the characters the constitute the token DEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mDEQ()
{
    ANTLR_UINT32	_type;
      


    _type	    = DEQ;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:878:10: ( '==' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:878:12: '=='
    {
        this->matchs(lit_52);
        if  (this->hasException())
        {
            goto ruleDEQEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDEQEx; /* Prevent compiler warnings */
    ruleDEQEx: ;

}
// $ANTLR end DEQ

//   Comes from: 879:10: ( '!=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NEQ
 *
 * Looks to match the characters the constitute the token NEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mNEQ()
{
    ANTLR_UINT32	_type;
      


    _type	    = NEQ;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:879:10: ( '!=' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:879:12: '!='
    {
        this->matchs(lit_53);
        if  (this->hasException())
        {
            goto ruleNEQEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleNEQEx; /* Prevent compiler warnings */
    ruleNEQEx: ;

}
// $ANTLR end NEQ

//   Comes from: 880:10: ( '<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LEQ
 *
 * Looks to match the characters the constitute the token LEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mLEQ()
{
    ANTLR_UINT32	_type;
      


    _type	    = LEQ;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:880:10: ( '<=' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:880:12: '<='
    {
        this->matchs(lit_54);
        if  (this->hasException())
        {
            goto ruleLEQEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLEQEx; /* Prevent compiler warnings */
    ruleLEQEx: ;

}
// $ANTLR end LEQ

//   Comes from: 881:10: ( '\\'' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start QUOTE
 *
 * Looks to match the characters the constitute the token QUOTE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mQUOTE()
{
    ANTLR_UINT32	_type;
      


    _type	    = QUOTE;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:881:10: ( '\\'' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:881:12: '\\''
    {
         this->matchc('\'');
        if  (this->hasException())
        {
            goto ruleQUOTEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleQUOTEEx; /* Prevent compiler warnings */
    ruleQUOTEEx: ;

}
// $ANTLR end QUOTE

//   Comes from: 882:10: ( '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DQUOTE
 *
 * Looks to match the characters the constitute the token DQUOTE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mDQUOTE()
{
    ANTLR_UINT32	_type;
      


    _type	    = DQUOTE;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:882:10: ( '\"' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:882:12: '\"'
    {
         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleDQUOTEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDQUOTEEx; /* Prevent compiler warnings */
    ruleDQUOTEEx: ;

}
// $ANTLR end DQUOTE

//   Comes from: 883:10: ( '\\\\' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BACKSLASH
 *
 * Looks to match the characters the constitute the token BACKSLASH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mBACKSLASH()
{
    ANTLR_UINT32	_type;
      


    _type	    = BACKSLASH;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:883:10: ( '\\\\' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:883:12: '\\\\'
    {
         this->matchc('\\');
        if  (this->hasException())
        {
            goto ruleBACKSLASHEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleBACKSLASHEx; /* Prevent compiler warnings */
    ruleBACKSLASHEx: ;

}
// $ANTLR end BACKSLASH

//   Comes from: 887:9: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LBRACE
 *
 * Looks to match the characters the constitute the token LBRACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mLBRACE()
{
    ANTLR_UINT32	_type;
      


    _type	    = LBRACE;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:887:9: ( '{' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:887:11: '{'
    {
         this->matchc('{');
        if  (this->hasException())
        {
            goto ruleLBRACEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLBRACEEx; /* Prevent compiler warnings */
    ruleLBRACEEx: ;

}
// $ANTLR end LBRACE

//   Comes from: 888:9: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RBRACE
 *
 * Looks to match the characters the constitute the token RBRACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mRBRACE()
{
    ANTLR_UINT32	_type;
      


    _type	    = RBRACE;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:888:9: ( '}' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:888:11: '}'
    {
         this->matchc('}');
        if  (this->hasException())
        {
            goto ruleRBRACEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleRBRACEEx; /* Prevent compiler warnings */
    ruleRBRACEEx: ;

}
// $ANTLR end RBRACE

//   Comes from: 889:9: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LPAREN
 *
 * Looks to match the characters the constitute the token LPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mLPAREN()
{
    ANTLR_UINT32	_type;
      


    _type	    = LPAREN;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:889:9: ( '(' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:889:11: '('
    {
         this->matchc('(');
        if  (this->hasException())
        {
            goto ruleLPARENEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLPARENEx; /* Prevent compiler warnings */
    ruleLPARENEx: ;

}
// $ANTLR end LPAREN

//   Comes from: 890:9: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RPAREN
 *
 * Looks to match the characters the constitute the token RPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mRPAREN()
{
    ANTLR_UINT32	_type;
      


    _type	    = RPAREN;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:890:9: ( ')' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:890:11: ')'
    {
         this->matchc(')');
        if  (this->hasException())
        {
            goto ruleRPARENEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleRPARENEx; /* Prevent compiler warnings */
    ruleRPARENEx: ;

}
// $ANTLR end RPAREN

//   Comes from: 891:9: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LBRACK
 *
 * Looks to match the characters the constitute the token LBRACK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mLBRACK()
{
    ANTLR_UINT32	_type;
      


    _type	    = LBRACK;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:891:9: ( '[' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:891:11: '['
    {
         this->matchc('[');
        if  (this->hasException())
        {
            goto ruleLBRACKEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLBRACKEx; /* Prevent compiler warnings */
    ruleLBRACKEx: ;

}
// $ANTLR end LBRACK

//   Comes from: 892:9: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RBRACK
 *
 * Looks to match the characters the constitute the token RBRACK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mRBRACK()
{
    ANTLR_UINT32	_type;
      


    _type	    = RBRACK;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:892:9: ( ']' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:892:11: ']'
    {
         this->matchc(']');
        if  (this->hasException())
        {
            goto ruleRBRACKEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleRBRACKEx; /* Prevent compiler warnings */
    ruleRBRACKEx: ;

}
// $ANTLR end RBRACK

//   Comes from: 893:9: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LANGBR
 *
 * Looks to match the characters the constitute the token LANGBR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mLANGBR()
{
    ANTLR_UINT32	_type;
      


    _type	    = LANGBR;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:893:9: ( '<' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:893:11: '<'
    {
         this->matchc('<');
        if  (this->hasException())
        {
            goto ruleLANGBREx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLANGBREx; /* Prevent compiler warnings */
    ruleLANGBREx: ;

}
// $ANTLR end LANGBR

//   Comes from: 894:9: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RANGBR
 *
 * Looks to match the characters the constitute the token RANGBR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mRANGBR()
{
    ANTLR_UINT32	_type;
      


    _type	    = RANGBR;


    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:894:9: ( '>' )
    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:894:11: '>'
    {
         this->matchc('>');
        if  (this->hasException())
        {
            goto ruleRANGBREx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleRANGBREx; /* Prevent compiler warnings */
    ruleRANGBREx: ;

}
// $ANTLR end RANGBR

//   Comes from: 898:5: ( '#' (~ ( '\\n' | '\\r' ) )* | '%' (~ ( '\\n' | '\\r' ) )* | '//' (~ ( '\\n' | '\\r' ) )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void gEconLexer::mCOMMENT()
{
    ANTLR_UINT32	_type;
      


    _type	    = COMMENT;


    {
        //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:898:5: ( '#' (~ ( '\\n' | '\\r' ) )* | '%' (~ ( '\\n' | '\\r' ) )* | '//' (~ ( '\\n' | '\\r' ) )* )

        ANTLR_UINT32 alt42;

        alt42=3;

        switch ( this->LA(1) )
        {
        case '#':
        	{
        		alt42=1;
        	}
            break;
        case '%':
        	{
        		alt42=2;
        	}
            break;
        case '/':
        	{
        		alt42=3;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< gEconLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 42 );
            ex->set_state( 0 );


            goto ruleCOMMENTEx;

        }

        switch (alt42)
        {
    	case 1:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:898:9: '#' (~ ( '\\n' | '\\r' ) )*
    	    {
    	         this->matchc('#');
    	        if  (this->hasException())
    	        {
    	            goto ruleCOMMENTEx;
    	        }


    	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:898:13: (~ ( '\\n' | '\\r' ) )*

    	        for (;;)
    	        {
    	            int alt39=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA39_0 = this->LA(1);
    	                if ( (((LA39_0 >= 0x0000) && (LA39_0 <= '\t')) || ((LA39_0 >= 0x000B) && (LA39_0 <= '\f')) || ((LA39_0 >= 0x000E) && (LA39_0 <= 0xFFFF))))
    	                {
    	                    alt39=1;
    	                }

    	            }
    	            switch (alt39)
    	            {
    	        	case 1:
    	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    	        	    {
    	        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '\t')) || ((this->LA(1) >= 0x000B) && (this->LA(1) <= '\f')) || ((this->LA(1) >= 0x000E) && (this->LA(1) <= 0xFFFF)) )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop39;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop39: ; /* Jump out to here if this rule does not match */


    	        {
    	             this->get_state()->get_channel() = HIDDEN; 
    	        }


    	    }
    	    break;
    	case 2:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:899:9: '%' (~ ( '\\n' | '\\r' ) )*
    	    {
    	         this->matchc('%');
    	        if  (this->hasException())
    	        {
    	            goto ruleCOMMENTEx;
    	        }


    	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:899:13: (~ ( '\\n' | '\\r' ) )*

    	        for (;;)
    	        {
    	            int alt40=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA40_0 = this->LA(1);
    	                if ( (((LA40_0 >= 0x0000) && (LA40_0 <= '\t')) || ((LA40_0 >= 0x000B) && (LA40_0 <= '\f')) || ((LA40_0 >= 0x000E) && (LA40_0 <= 0xFFFF))))
    	                {
    	                    alt40=1;
    	                }

    	            }
    	            switch (alt40)
    	            {
    	        	case 1:
    	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    	        	    {
    	        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '\t')) || ((this->LA(1) >= 0x000B) && (this->LA(1) <= '\f')) || ((this->LA(1) >= 0x000E) && (this->LA(1) <= 0xFFFF)) )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop40;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop40: ; /* Jump out to here if this rule does not match */


    	        {
    	             this->get_state()->get_channel() = HIDDEN; 
    	        }


    	    }
    	    break;
    	case 3:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:900:9: '//' (~ ( '\\n' | '\\r' ) )*
    	    {
    	        this->matchs(lit_55);
    	        if  (this->hasException())
    	        {
    	            goto ruleCOMMENTEx;
    	        }




    	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:900:14: (~ ( '\\n' | '\\r' ) )*

    	        for (;;)
    	        {
    	            int alt41=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA41_0 = this->LA(1);
    	                if ( (((LA41_0 >= 0x0000) && (LA41_0 <= '\t')) || ((LA41_0 >= 0x000B) && (LA41_0 <= '\f')) || ((LA41_0 >= 0x000E) && (LA41_0 <= 0xFFFF))))
    	                {
    	                    alt41=1;
    	                }

    	            }
    	            switch (alt41)
    	            {
    	        	case 1:
    	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:
    	        	    {
    	        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '\t')) || ((this->LA(1) >= 0x000B) && (this->LA(1) <= '\f')) || ((this->LA(1) >= 0x000E) && (this->LA(1) <= 0xFFFF)) )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< gEconLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop41;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop41: ; /* Jump out to here if this rule does not match */


    	        {
    	             this->get_state()->get_channel() = HIDDEN; 
    	        }


    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
gEconLexer::mTokens()
{
    {
        //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:8: ( OUTPUT | R | LOGF | LONG | SHORT | LATEX | VERBOSE | LANDSCAPE | BACKWARDCOMP | JACOBIAN | BTRUE | BFALSE | OPTS | SETS | TRYREDUCE | BLOCK | DEFS | CONTROLS | OBJ | CONSTRAINTS | FOCS | IDS | SHOCKS | CALIBR | SS | INF | E | SUM | PROD | DELTA | SQRT | EXP | LOG | SIN | COS | TAN | ASIN | ACOS | ATAN | SINH | COSH | TANH | ERF | ZERO | INT | DOUBLE | SLETTER | CLETTER | ID | UID | DID | UDID | IDU | DIDU | WS | TILDE | QUESTION | EXCLAM | DOLLAR | AT | AND | OR | DOR | SEMI | COLON | DBLCOLON | DDOT | COMMA | RARROW | PLUS | MINUS | MUL | DIV | POW | EQ | DEQ | NEQ | LEQ | QUOTE | DQUOTE | BACKSLASH | LBRACE | RBRACE | LPAREN | RPAREN | LBRACK | RBRACK | LANGBR | RANGBR | COMMENT )

        ANTLR_UINT32 alt43;

        alt43=90;

        alt43 = cdfa43.predict(this, this->get_rec(), this->get_istream(), cdfa43 );
        if  (this->hasException())
        {
            goto ruleTokensEx;
        }

        switch (alt43)
        {
    	case 1:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:10: OUTPUT
    	    {
    	        /* 1:10: OUTPUT */
    	        mOUTPUT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:17: R
    	    {
    	        /* 1:17: R */
    	        mR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:19: LOGF
    	    {
    	        /* 1:19: LOGF */
    	        mLOGF();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:24: LONG
    	    {
    	        /* 1:24: LONG */
    	        mLONG();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:29: SHORT
    	    {
    	        /* 1:29: SHORT */
    	        mSHORT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:35: LATEX
    	    {
    	        /* 1:35: LATEX */
    	        mLATEX();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:41: VERBOSE
    	    {
    	        /* 1:41: VERBOSE */
    	        mVERBOSE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:49: LANDSCAPE
    	    {
    	        /* 1:49: LANDSCAPE */
    	        mLANDSCAPE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:59: BACKWARDCOMP
    	    {
    	        /* 1:59: BACKWARDCOMP */
    	        mBACKWARDCOMP();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:72: JACOBIAN
    	    {
    	        /* 1:72: JACOBIAN */
    	        mJACOBIAN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:81: BTRUE
    	    {
    	        /* 1:81: BTRUE */
    	        mBTRUE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:87: BFALSE
    	    {
    	        /* 1:87: BFALSE */
    	        mBFALSE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:94: OPTS
    	    {
    	        /* 1:94: OPTS */
    	        mOPTS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:99: SETS
    	    {
    	        /* 1:99: SETS */
    	        mSETS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:104: TRYREDUCE
    	    {
    	        /* 1:104: TRYREDUCE */
    	        mTRYREDUCE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:114: BLOCK
    	    {
    	        /* 1:114: BLOCK */
    	        mBLOCK();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:120: DEFS
    	    {
    	        /* 1:120: DEFS */
    	        mDEFS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:125: CONTROLS
    	    {
    	        /* 1:125: CONTROLS */
    	        mCONTROLS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:134: OBJ
    	    {
    	        /* 1:134: OBJ */
    	        mOBJ();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:138: CONSTRAINTS
    	    {
    	        /* 1:138: CONSTRAINTS */
    	        mCONSTRAINTS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:150: FOCS
    	    {
    	        /* 1:150: FOCS */
    	        mFOCS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:155: IDS
    	    {
    	        /* 1:155: IDS */
    	        mIDS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:159: SHOCKS
    	    {
    	        /* 1:159: SHOCKS */
    	        mSHOCKS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 24:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:166: CALIBR
    	    {
    	        /* 1:166: CALIBR */
    	        mCALIBR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 25:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:173: SS
    	    {
    	        /* 1:173: SS */
    	        mSS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 26:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:176: INF
    	    {
    	        /* 1:176: INF */
    	        mINF();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 27:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:180: E
    	    {
    	        /* 1:180: E */
    	        mE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 28:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:182: SUM
    	    {
    	        /* 1:182: SUM */
    	        mSUM();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 29:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:186: PROD
    	    {
    	        /* 1:186: PROD */
    	        mPROD();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 30:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:191: DELTA
    	    {
    	        /* 1:191: DELTA */
    	        mDELTA();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 31:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:197: SQRT
    	    {
    	        /* 1:197: SQRT */
    	        mSQRT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 32:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:202: EXP
    	    {
    	        /* 1:202: EXP */
    	        mEXP();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 33:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:206: LOG
    	    {
    	        /* 1:206: LOG */
    	        mLOG();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 34:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:210: SIN
    	    {
    	        /* 1:210: SIN */
    	        mSIN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 35:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:214: COS
    	    {
    	        /* 1:214: COS */
    	        mCOS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 36:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:218: TAN
    	    {
    	        /* 1:218: TAN */
    	        mTAN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 37:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:222: ASIN
    	    {
    	        /* 1:222: ASIN */
    	        mASIN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 38:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:227: ACOS
    	    {
    	        /* 1:227: ACOS */
    	        mACOS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 39:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:232: ATAN
    	    {
    	        /* 1:232: ATAN */
    	        mATAN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 40:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:237: SINH
    	    {
    	        /* 1:237: SINH */
    	        mSINH();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 41:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:242: COSH
    	    {
    	        /* 1:242: COSH */
    	        mCOSH();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 42:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:247: TANH
    	    {
    	        /* 1:247: TANH */
    	        mTANH();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 43:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:252: ERF
    	    {
    	        /* 1:252: ERF */
    	        mERF();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 44:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:256: ZERO
    	    {
    	        /* 1:256: ZERO */
    	        mZERO();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 45:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:261: INT
    	    {
    	        /* 1:261: INT */
    	        mINT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 46:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:265: DOUBLE
    	    {
    	        /* 1:265: DOUBLE */
    	        mDOUBLE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 47:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:272: SLETTER
    	    {
    	        /* 1:272: SLETTER */
    	        mSLETTER();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 48:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:280: CLETTER
    	    {
    	        /* 1:280: CLETTER */
    	        mCLETTER();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 49:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:288: ID
    	    {
    	        /* 1:288: ID */
    	        mID();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 50:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:291: UID
    	    {
    	        /* 1:291: UID */
    	        mUID();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 51:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:295: DID
    	    {
    	        /* 1:295: DID */
    	        mDID();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 52:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:299: UDID
    	    {
    	        /* 1:299: UDID */
    	        mUDID();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 53:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:304: IDU
    	    {
    	        /* 1:304: IDU */
    	        mIDU();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 54:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:308: DIDU
    	    {
    	        /* 1:308: DIDU */
    	        mDIDU();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 55:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:313: WS
    	    {
    	        /* 1:313: WS */
    	        mWS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 56:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:316: TILDE
    	    {
    	        /* 1:316: TILDE */
    	        mTILDE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 57:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:322: QUESTION
    	    {
    	        /* 1:322: QUESTION */
    	        mQUESTION();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 58:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:331: EXCLAM
    	    {
    	        /* 1:331: EXCLAM */
    	        mEXCLAM();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 59:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:338: DOLLAR
    	    {
    	        /* 1:338: DOLLAR */
    	        mDOLLAR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 60:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:345: AT
    	    {
    	        /* 1:345: AT */
    	        mAT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 61:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:348: AND
    	    {
    	        /* 1:348: AND */
    	        mAND();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 62:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:352: OR
    	    {
    	        /* 1:352: OR */
    	        mOR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 63:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:355: DOR
    	    {
    	        /* 1:355: DOR */
    	        mDOR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 64:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:359: SEMI
    	    {
    	        /* 1:359: SEMI */
    	        mSEMI();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 65:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:364: COLON
    	    {
    	        /* 1:364: COLON */
    	        mCOLON();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 66:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:370: DBLCOLON
    	    {
    	        /* 1:370: DBLCOLON */
    	        mDBLCOLON();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 67:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:379: DDOT
    	    {
    	        /* 1:379: DDOT */
    	        mDDOT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 68:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:384: COMMA
    	    {
    	        /* 1:384: COMMA */
    	        mCOMMA();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 69:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:390: RARROW
    	    {
    	        /* 1:390: RARROW */
    	        mRARROW();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 70:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:397: PLUS
    	    {
    	        /* 1:397: PLUS */
    	        mPLUS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 71:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:402: MINUS
    	    {
    	        /* 1:402: MINUS */
    	        mMINUS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 72:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:408: MUL
    	    {
    	        /* 1:408: MUL */
    	        mMUL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 73:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:412: DIV
    	    {
    	        /* 1:412: DIV */
    	        mDIV();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 74:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:416: POW
    	    {
    	        /* 1:416: POW */
    	        mPOW();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 75:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:420: EQ
    	    {
    	        /* 1:420: EQ */
    	        mEQ();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 76:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:423: DEQ
    	    {
    	        /* 1:423: DEQ */
    	        mDEQ();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 77:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:427: NEQ
    	    {
    	        /* 1:427: NEQ */
    	        mNEQ();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 78:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:431: LEQ
    	    {
    	        /* 1:431: LEQ */
    	        mLEQ();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 79:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:435: QUOTE
    	    {
    	        /* 1:435: QUOTE */
    	        mQUOTE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 80:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:441: DQUOTE
    	    {
    	        /* 1:441: DQUOTE */
    	        mDQUOTE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 81:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:448: BACKSLASH
    	    {
    	        /* 1:448: BACKSLASH */
    	        mBACKSLASH();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 82:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:458: LBRACE
    	    {
    	        /* 1:458: LBRACE */
    	        mLBRACE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 83:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:465: RBRACE
    	    {
    	        /* 1:465: RBRACE */
    	        mRBRACE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 84:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:472: LPAREN
    	    {
    	        /* 1:472: LPAREN */
    	        mLPAREN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 85:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:479: RPAREN
    	    {
    	        /* 1:479: RPAREN */
    	        mRPAREN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 86:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:486: LBRACK
    	    {
    	        /* 1:486: LBRACK */
    	        mLBRACK();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 87:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:493: RBRACK
    	    {
    	        /* 1:493: RBRACK */
    	        mRBRACK();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 88:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:500: LANGBR
    	    {
    	        /* 1:500: LANGBR */
    	        mLANGBR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 89:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:507: RANGBR
    	    {
    	        /* 1:507: RANGBR */
    	        mRANGBR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 90:
    	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:1:514: COMMENT
    	    {
    	        /* 1:514: COMMENT */
    	        mCOMMENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */

	}



/* End of code
 * =============================================================================
 */
