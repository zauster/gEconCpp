/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : ../gEcon_CURRENT/src/parser/grammar/gEcon.g
 *     -                            On : 2016-12-04 14:10:30
 *     -                for the parser : gEconParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "gEconParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace  parser  {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   gEconParserTokenNames[90+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "ACOS",
        (ANTLR_UINT8*) "AND",
        (ANTLR_UINT8*) "ASIN",
        (ANTLR_UINT8*) "AT",
        (ANTLR_UINT8*) "ATAN",
        (ANTLR_UINT8*) "BACKSLASH",
        (ANTLR_UINT8*) "BACKWARDCOMP",
        (ANTLR_UINT8*) "BFALSE",
        (ANTLR_UINT8*) "BLOCK",
        (ANTLR_UINT8*) "BTRUE",
        (ANTLR_UINT8*) "CALIBR",
        (ANTLR_UINT8*) "CLETTER",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "CONSTRAINTS",
        (ANTLR_UINT8*) "CONTROLS",
        (ANTLR_UINT8*) "COS",
        (ANTLR_UINT8*) "COSH",
        (ANTLR_UINT8*) "DBLCOLON",
        (ANTLR_UINT8*) "DDOT",
        (ANTLR_UINT8*) "DEFS",
        (ANTLR_UINT8*) "DELTA",
        (ANTLR_UINT8*) "DEQ",
        (ANTLR_UINT8*) "DID",
        (ANTLR_UINT8*) "DIDU",
        (ANTLR_UINT8*) "DIV",
        (ANTLR_UINT8*) "DOLLAR",
        (ANTLR_UINT8*) "DOR",
        (ANTLR_UINT8*) "DOUBLE",
        (ANTLR_UINT8*) "DQUOTE",
        (ANTLR_UINT8*) "E",
        (ANTLR_UINT8*) "EQ",
        (ANTLR_UINT8*) "ERF",
        (ANTLR_UINT8*) "EXCLAM",
        (ANTLR_UINT8*) "EXP",
        (ANTLR_UINT8*) "FOCS",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "IDS",
        (ANTLR_UINT8*) "IDU",
        (ANTLR_UINT8*) "INF",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "JACOBIAN",
        (ANTLR_UINT8*) "LANDSCAPE",
        (ANTLR_UINT8*) "LANGBR",
        (ANTLR_UINT8*) "LATEX",
        (ANTLR_UINT8*) "LBRACE",
        (ANTLR_UINT8*) "LBRACK",
        (ANTLR_UINT8*) "LEQ",
        (ANTLR_UINT8*) "LOG",
        (ANTLR_UINT8*) "LOGF",
        (ANTLR_UINT8*) "LONG",
        (ANTLR_UINT8*) "LPAREN",
        (ANTLR_UINT8*) "MINUS",
        (ANTLR_UINT8*) "MUL",
        (ANTLR_UINT8*) "NEQ",
        (ANTLR_UINT8*) "OBJ",
        (ANTLR_UINT8*) "OPTS",
        (ANTLR_UINT8*) "OR",
        (ANTLR_UINT8*) "OUTPUT",
        (ANTLR_UINT8*) "PLUS",
        (ANTLR_UINT8*) "POW",
        (ANTLR_UINT8*) "PROD",
        (ANTLR_UINT8*) "QUESTION",
        (ANTLR_UINT8*) "QUOTE",
        (ANTLR_UINT8*) "R",
        (ANTLR_UINT8*) "RANGBR",
        (ANTLR_UINT8*) "RARROW",
        (ANTLR_UINT8*) "RBRACE",
        (ANTLR_UINT8*) "RBRACK",
        (ANTLR_UINT8*) "RPAREN",
        (ANTLR_UINT8*) "SEMI",
        (ANTLR_UINT8*) "SETS",
        (ANTLR_UINT8*) "SHOCKS",
        (ANTLR_UINT8*) "SHORT",
        (ANTLR_UINT8*) "SIN",
        (ANTLR_UINT8*) "SINH",
        (ANTLR_UINT8*) "SLETTER",
        (ANTLR_UINT8*) "SQRT",
        (ANTLR_UINT8*) "SS",
        (ANTLR_UINT8*) "SUM",
        (ANTLR_UINT8*) "TAN",
        (ANTLR_UINT8*) "TANH",
        (ANTLR_UINT8*) "TILDE",
        (ANTLR_UINT8*) "TRYREDUCE",
        (ANTLR_UINT8*) "UDID",
        (ANTLR_UINT8*) "UID",
        (ANTLR_UINT8*) "VERBOSE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "ZERO"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "../gEcon_CURRENT/src/parser/grammar/gEcon.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* gEconParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new gEconParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
gEconParser::gEconParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new gEconParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
gEconParser::gEconParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void gEconParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( gEconParserTokenNames );


}

void
gEconParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
gEconParser::~gEconParser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return gEconParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_opts_in_model83_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000), ANTLR_UINT64_LIT(0x0000000001001000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_opts_in_model83( FOLLOW_opts_in_model83_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_sets_in_model86_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000), ANTLR_UINT64_LIT(0x0000000001000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_sets_in_model86( FOLLOW_sets_in_model86_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_tryreduce_in_model89_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_tryreduce_in_model89( FOLLOW_tryreduce_in_model89_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_in_model93_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_in_model93( FOLLOW_block_in_model93_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EOF_in_model97_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EOF_in_model97( FOLLOW_EOF_in_model97_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OPTS_in_opts115_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OPTS_in_opts115( FOLLOW_OPTS_in_opts115_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_opts117_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000400), ANTLR_UINT64_LIT(0x0000000008000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_opts117( FOLLOW_LBRACE_in_opts117_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_opt_in_opts120_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000400), ANTLR_UINT64_LIT(0x0000000008000100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_opt_in_opts120( FOLLOW_opt_in_opts120_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_opts124_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_opts124( FOLLOW_RBRACE_in_opts124_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opts126_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opts126( FOLLOW_SEMI_in_opts126_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OUTPUT_in_opt144_bits[]	= { ANTLR_UINT64_LIT(0x0042000000000000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OUTPUT_in_opt144( FOLLOW_OUTPUT_in_opt144_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_opt_output_in_opt146_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_opt_output_in_opt146( FOLLOW_opt_output_in_opt146_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_VERBOSE_in_opt154_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_VERBOSE_in_opt154( FOLLOW_VERBOSE_in_opt154_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt156_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt156( FOLLOW_EQ_in_opt156_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt162_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt162( FOLLOW_atom_bool_in_opt162_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt166_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt166( FOLLOW_SEMI_in_opt166_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BACKWARDCOMP_in_opt174_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BACKWARDCOMP_in_opt174( FOLLOW_BACKWARDCOMP_in_opt174_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt176_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt176( FOLLOW_EQ_in_opt176_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt182_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt182( FOLLOW_atom_bool_in_opt182_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt186_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt186( FOLLOW_SEMI_in_opt186_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LOGF_in_opt_output203_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LOGF_in_opt_output203( FOLLOW_LOGF_in_opt_output203_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt_output205_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt_output205( FOLLOW_EQ_in_opt_output205_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt_output211_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt_output211( FOLLOW_atom_bool_in_opt_output211_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt_output215_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt_output215( FOLLOW_SEMI_in_opt_output215_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_R_in_opt_output223_bits[]	= { ANTLR_UINT64_LIT(0x0080401000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_R_in_opt_output223( FOLLOW_R_in_opt_output223_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_opt_output_R_in_opt_output225_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_opt_output_R_in_opt_output225( FOLLOW_opt_output_R_in_opt_output225_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LATEX_in_opt_output233_bits[]	= { ANTLR_UINT64_LIT(0x0080801000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LATEX_in_opt_output233( FOLLOW_LATEX_in_opt_output233_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_opt_output_latex_in_opt_output235_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_opt_output_latex_in_opt_output235( FOLLOW_opt_output_latex_in_opt_output235_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt_output_R252_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt_output_R252( FOLLOW_EQ_in_opt_output_R252_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt_output_R258_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt_output_R258( FOLLOW_atom_bool_in_opt_output_R258_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt_output_R262_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt_output_R262( FOLLOW_SEMI_in_opt_output_R262_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LONG_in_opt_output_R270_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LONG_in_opt_output_R270( FOLLOW_LONG_in_opt_output_R270_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt_output_R272_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt_output_R272( FOLLOW_EQ_in_opt_output_R272_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt_output_R278_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt_output_R278( FOLLOW_atom_bool_in_opt_output_R278_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt_output_R282_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt_output_R282( FOLLOW_SEMI_in_opt_output_R282_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_JACOBIAN_in_opt_output_R290_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_JACOBIAN_in_opt_output_R290( FOLLOW_JACOBIAN_in_opt_output_R290_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt_output_R292_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt_output_R292( FOLLOW_EQ_in_opt_output_R292_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt_output_R298_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt_output_R298( FOLLOW_atom_bool_in_opt_output_R298_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt_output_R302_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt_output_R302( FOLLOW_SEMI_in_opt_output_R302_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt_output_latex319_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt_output_latex319( FOLLOW_EQ_in_opt_output_latex319_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt_output_latex325_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt_output_latex325( FOLLOW_atom_bool_in_opt_output_latex325_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt_output_latex329_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt_output_latex329( FOLLOW_SEMI_in_opt_output_latex329_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LONG_in_opt_output_latex337_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LONG_in_opt_output_latex337( FOLLOW_LONG_in_opt_output_latex337_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt_output_latex339_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt_output_latex339( FOLLOW_EQ_in_opt_output_latex339_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt_output_latex345_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt_output_latex345( FOLLOW_atom_bool_in_opt_output_latex345_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt_output_latex349_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt_output_latex349( FOLLOW_SEMI_in_opt_output_latex349_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANDSCAPE_in_opt_output_latex357_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANDSCAPE_in_opt_output_latex357( FOLLOW_LANDSCAPE_in_opt_output_latex357_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt_output_latex359_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt_output_latex359( FOLLOW_EQ_in_opt_output_latex359_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt_output_latex365_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt_output_latex365( FOLLOW_atom_bool_in_opt_output_latex365_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt_output_latex369_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt_output_latex369( FOLLOW_SEMI_in_opt_output_latex369_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SETS_in_sets386_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SETS_in_sets386( FOLLOW_SETS_in_sets386_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_sets388_bits[]	= { ANTLR_UINT64_LIT(0x81C6C2000000AC00), ANTLR_UINT64_LIT(0x00000000280A4030) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_sets388( FOLLOW_LBRACE_in_sets388_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_seteq_in_sets391_bits[]	= { ANTLR_UINT64_LIT(0x81C6C2000000AC00), ANTLR_UINT64_LIT(0x00000000280A4130) };
static  gEconParserImplTraits::BitsetListType FOLLOW_seteq_in_sets391( FOLLOW_seteq_in_sets391_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setvalid_in_sets395_bits[]	= { ANTLR_UINT64_LIT(0x81C6C2000000AC00), ANTLR_UINT64_LIT(0x00000000280A4130) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setvalid_in_sets395( FOLLOW_setvalid_in_sets395_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_sets399_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_sets399( FOLLOW_RBRACE_in_sets399_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_sets401_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_sets401( FOLLOW_SEMI_in_sets401_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_seteq423_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_seteq423( FOLLOW_id_str_in_seteq423_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_seteq425_bits[]	= { ANTLR_UINT64_LIT(0x81C6C2000000AC00), ANTLR_UINT64_LIT(0x00000000280A4030) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_seteq425( FOLLOW_EQ_in_seteq425_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_in_seteq431_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_in_seteq431( FOLLOW_setex_in_seteq431_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_seteq433_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_seteq433( FOLLOW_SEMI_in_seteq433_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_in_setvalid461_bits[]	= { ANTLR_UINT64_LIT(0x0810000008000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_in_setvalid461( FOLLOW_setex_in_setvalid461_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LEQ_in_setvalid464_bits[]	= { ANTLR_UINT64_LIT(0x81C6C2000000AC00), ANTLR_UINT64_LIT(0x00000000280A4030) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LEQ_in_setvalid464( FOLLOW_LEQ_in_setvalid464_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DEQ_in_setvalid470_bits[]	= { ANTLR_UINT64_LIT(0x81C6C2000000AC00), ANTLR_UINT64_LIT(0x00000000280A4030) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DEQ_in_setvalid470( FOLLOW_DEQ_in_setvalid470_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_NEQ_in_setvalid476_bits[]	= { ANTLR_UINT64_LIT(0x81C6C2000000AC00), ANTLR_UINT64_LIT(0x00000000280A4030) };
static  gEconParserImplTraits::BitsetListType FOLLOW_NEQ_in_setvalid476( FOLLOW_NEQ_in_setvalid476_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_in_setvalid485_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_in_setvalid485( FOLLOW_setex_in_setvalid485_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUESTION_in_setvalid487_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUESTION_in_setvalid487( FOLLOW_QUESTION_in_setvalid487_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_add_in_setex513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_add_in_setex513( FOLLOW_setex_add_in_setex513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_intersect_in_setex_add540_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000202) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_intersect_in_setex_add540( FOLLOW_setex_intersect_in_setex_add540_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OR_in_setex_add554_bits[]	= { ANTLR_UINT64_LIT(0x81C6C2000000AC00), ANTLR_UINT64_LIT(0x00000000280A4030) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OR_in_setex_add554( FOLLOW_OR_in_setex_add554_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_intersect_in_setex_add560_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000202) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_intersect_in_setex_add560( FOLLOW_setex_intersect_in_setex_add560_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BACKSLASH_in_setex_add576_bits[]	= { ANTLR_UINT64_LIT(0x81C6C2000000AC00), ANTLR_UINT64_LIT(0x00000000280A4030) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BACKSLASH_in_setex_add576( FOLLOW_BACKSLASH_in_setex_add576_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_intersect_in_setex_add582_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000202) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_intersect_in_setex_add582( FOLLOW_setex_intersect_in_setex_add582_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_cat_in_setex_intersect617_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000022) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_cat_in_setex_intersect617( FOLLOW_setex_cat_in_setex_intersect617_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_AND_in_setex_intersect622_bits[]	= { ANTLR_UINT64_LIT(0x81C6C2000000AC00), ANTLR_UINT64_LIT(0x00000000280A4030) };
static  gEconParserImplTraits::BitsetListType FOLLOW_AND_in_setex_intersect622( FOLLOW_AND_in_setex_intersect622_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_cat_in_setex_intersect628_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000022) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_cat_in_setex_intersect628( FOLLOW_setex_cat_in_setex_intersect628_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_setex_cat659_bits[]	= { ANTLR_UINT64_LIT(0x80C2FA083000AC00), ANTLR_UINT64_LIT(0x00000000280A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_setex_cat659( FOLLOW_QUOTE_in_setex_cat659_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_IDU_in_setex_cat662_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_IDU_in_setex_cat662( FOLLOW_IDU_in_setex_cat662_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DIDU_in_setex_cat669_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DIDU_in_setex_cat669( FOLLOW_DIDU_in_setex_cat669_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_setex_cat680_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_setex_cat680( FOLLOW_idx_str_in_setex_cat680_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_setex_cat685_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000800000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_setex_cat685( FOLLOW_QUOTE_in_setex_cat685_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_setex_cat687_bits[]	= { ANTLR_UINT64_LIT(0x81C6C2000000AC00), ANTLR_UINT64_LIT(0x00000000280A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_TILDE_in_setex_cat687( FOLLOW_TILDE_in_setex_cat687_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_atom_in_setex_cat695_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000800000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_atom_in_setex_cat695( FOLLOW_setex_atom_in_setex_cat695_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_setex_cat704_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_TILDE_in_setex_cat704( FOLLOW_TILDE_in_setex_cat704_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_setex_cat706_bits[]	= { ANTLR_UINT64_LIT(0x80C2F2081000AC00), ANTLR_UINT64_LIT(0x000000002E0A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_setex_cat706( FOLLOW_QUOTE_in_setex_cat706_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_UID_in_setex_cat709_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_UID_in_setex_cat709( FOLLOW_UID_in_setex_cat709_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_UDID_in_setex_cat715_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_UDID_in_setex_cat715( FOLLOW_UDID_in_setex_cat715_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_setex_cat725_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_setex_cat725( FOLLOW_idx_str_in_setex_cat725_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_setex_cat730_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_setex_cat730( FOLLOW_QUOTE_in_setex_cat730_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_set_in_setex_atom759_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_set_in_setex_atom759( FOLLOW_set_in_setex_atom759_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_setex_atom769_bits[]	= { ANTLR_UINT64_LIT(0x81C6C2000000AC00), ANTLR_UINT64_LIT(0x00000000280A4030) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_setex_atom769( FOLLOW_LPAREN_in_setex_atom769_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_in_setex_atom775_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_in_setex_atom775( FOLLOW_setex_in_setex_atom775_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_setex_atom777_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_setex_atom777( FOLLOW_RPAREN_in_setex_atom777_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ZERO_in_set805_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ZERO_in_set805( FOLLOW_ZERO_in_set805_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_set817_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_set817( FOLLOW_id_str_in_set817_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_set827_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_set827( FOLLOW_LBRACE_in_set827_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_set_in_set833_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_set_in_set833( FOLLOW_list_set_in_set833_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_set837_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_set837( FOLLOW_RBRACE_in_set837_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_set845_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_set845( FOLLOW_LBRACE_in_set845_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_seq_set_in_set851_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_seq_set_in_set851( FOLLOW_seq_set_in_set851_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_set855_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_set855( FOLLOW_RBRACE_in_set855_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_set877_bits[]	= { ANTLR_UINT64_LIT(0x80C2F2081000AC00), ANTLR_UINT64_LIT(0x00000000280A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_set877( FOLLOW_QUOTE_in_list_set877_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_list_set883_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_list_set883( FOLLOW_idx_str_in_list_set883_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_set885_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_set885( FOLLOW_QUOTE_in_list_set885_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_list_set896_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_list_set896( FOLLOW_COMMA_in_list_set896_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_set898_bits[]	= { ANTLR_UINT64_LIT(0x80C2F2081000AC00), ANTLR_UINT64_LIT(0x00000000280A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_set898( FOLLOW_QUOTE_in_list_set898_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_list_set904_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_list_set904( FOLLOW_idx_str_in_list_set904_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_set906_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_set906( FOLLOW_QUOTE_in_list_set906_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set931_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000020000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set931( FOLLOW_QUOTE_in_seq_set931_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SLETTER_in_seq_set937_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SLETTER_in_seq_set937( FOLLOW_SLETTER_in_seq_set937_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set939_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set939( FOLLOW_QUOTE_in_seq_set939_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DDOT_in_seq_set941_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DDOT_in_seq_set941( FOLLOW_DDOT_in_seq_set941_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set943_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000020000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set943( FOLLOW_QUOTE_in_seq_set943_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SLETTER_in_seq_set949_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SLETTER_in_seq_set949( FOLLOW_SLETTER_in_seq_set949_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set951_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set951( FOLLOW_QUOTE_in_seq_set951_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set961_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set961( FOLLOW_QUOTE_in_seq_set961_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_capletter_in_seq_set967_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_capletter_in_seq_set967( FOLLOW_capletter_in_seq_set967_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set969_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set969( FOLLOW_QUOTE_in_seq_set969_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DDOT_in_seq_set971_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DDOT_in_seq_set971( FOLLOW_DDOT_in_seq_set971_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set973_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set973( FOLLOW_QUOTE_in_seq_set973_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_capletter_in_seq_set979_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_capletter_in_seq_set979( FOLLOW_capletter_in_seq_set979_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set981_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set981( FOLLOW_QUOTE_in_seq_set981_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set991_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set991( FOLLOW_QUOTE_in_seq_set991_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_int_in_seq_set997_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_int_in_seq_set997( FOLLOW_atom_int_in_seq_set997_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set999_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set999( FOLLOW_QUOTE_in_seq_set999_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DDOT_in_seq_set1001_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DDOT_in_seq_set1001( FOLLOW_DDOT_in_seq_set1001_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set1003_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set1003( FOLLOW_QUOTE_in_seq_set1003_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_int_in_seq_set1009_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_int_in_seq_set1009( FOLLOW_atom_int_in_seq_set1009_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set1011_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set1011( FOLLOW_QUOTE_in_seq_set1011_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_CLETTER_in_capletter1039_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_CLETTER_in_capletter1039( FOLLOW_CLETTER_in_capletter1039_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_E_in_capletter1049_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_E_in_capletter1049( FOLLOW_E_in_capletter1049_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_R_in_capletter1059_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_R_in_capletter1059( FOLLOW_R_in_capletter1059_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_TRYREDUCE_in_tryreduce1079_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_TRYREDUCE_in_tryreduce1079( FOLLOW_TRYREDUCE_in_tryreduce1079_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_tryreduce1081_bits[]	= { ANTLR_UINT64_LIT(0x80C3C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_tryreduce1081( FOLLOW_LBRACE_in_tryreduce1081_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_livar_in_tryreduce1087_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_livar_in_tryreduce1087( FOLLOW_list_livar_in_tryreduce1087_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_tryreduce1091_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_tryreduce1091( FOLLOW_RBRACE_in_tryreduce1091_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_tryreduce1093_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_tryreduce1093( FOLLOW_SEMI_in_tryreduce1093_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BLOCK_in_block1112_bits[]	= { ANTLR_UINT64_LIT(0x80C3C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BLOCK_in_block1112( FOLLOW_BLOCK_in_block1112_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_block1118_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_block1118( FOLLOW_list_indexing_ex_in_block1118_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_block1130_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_block1130( FOLLOW_id_str_in_block1130_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block1140_bits[]	= { ANTLR_UINT64_LIT(0x0000040002100000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block1140( FOLLOW_LBRACE_in_block1140_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_definitions_in_block1150_bits[]	= { ANTLR_UINT64_LIT(0x0000040000100000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_definitions_in_block1150( FOLLOW_block_definitions_in_block1150_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_controls_in_block1162_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_controls_in_block1162( FOLLOW_block_controls_in_block1162_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_objective_in_block1164_bits[]	= { ANTLR_UINT64_LIT(0x0000040000084000), ANTLR_UINT64_LIT(0x0000000000002100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_objective_in_block1164( FOLLOW_block_objective_in_block1164_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_constraints_in_block1167_bits[]	= { ANTLR_UINT64_LIT(0x0000040000004000), ANTLR_UINT64_LIT(0x0000000000002100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_constraints_in_block1167( FOLLOW_block_constraints_in_block1167_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_identities_in_block1172_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000), ANTLR_UINT64_LIT(0x0000000000002100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_identities_in_block1172( FOLLOW_block_identities_in_block1172_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_identities_in_block1186_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000), ANTLR_UINT64_LIT(0x0000000000002100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_identities_in_block1186( FOLLOW_block_identities_in_block1186_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_shocks_in_block1197_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_shocks_in_block1197( FOLLOW_block_shocks_in_block1197_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_calibr_in_block1208_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_calibr_in_block1208( FOLLOW_block_calibr_in_block1208_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block1217_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block1217( FOLLOW_RBRACE_in_block1217_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block1219_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block1219( FOLLOW_SEMI_in_block1219_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DEFS_in_block_definitions1237_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DEFS_in_block_definitions1237( FOLLOW_DEFS_in_block_definitions1237_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block_definitions1239_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block_definitions1239( FOLLOW_LBRACE_in_block_definitions1239_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_definition_in_block_definitions1241_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4120) };
static  gEconParserImplTraits::BitsetListType FOLLOW_definition_in_block_definitions1241( FOLLOW_definition_in_block_definitions1241_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block_definitions1244_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block_definitions1244( FOLLOW_RBRACE_in_block_definitions1244_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block_definitions1246_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block_definitions1246( FOLLOW_SEMI_in_block_definitions1246_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_definition1268_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_definition1268( FOLLOW_atom_id_t_in_definition1268_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_definition1270_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_definition1270( FOLLOW_EQ_in_definition1270_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_definition1276_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_definition1276( FOLLOW_expr_in_definition1276_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_definition1278_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_definition1278( FOLLOW_SEMI_in_definition1278_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_nt_in_definition1300_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_nt_in_definition1300( FOLLOW_atom_id_nt_in_definition1300_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_definition1302_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_definition1302( FOLLOW_EQ_in_definition1302_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_definition1308_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_definition1308( FOLLOW_expr_in_definition1308_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_definition1310_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_definition1310( FOLLOW_SEMI_in_definition1310_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_CONTROLS_in_block_controls1337_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_CONTROLS_in_block_controls1337( FOLLOW_CONTROLS_in_block_controls1337_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block_controls1339_bits[]	= { ANTLR_UINT64_LIT(0x80C3C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block_controls1339( FOLLOW_LBRACE_in_block_controls1339_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_ctr_var_in_block_controls1345_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_ctr_var_in_block_controls1345( FOLLOW_list_ctr_var_in_block_controls1345_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block_controls1349_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block_controls1349( FOLLOW_RBRACE_in_block_controls1349_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block_controls1351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block_controls1351( FOLLOW_SEMI_in_block_controls1351_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_ctr_var_elem_in_list_ctr_var1383_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_ctr_var_elem_in_list_ctr_var1383( FOLLOW_list_ctr_var_elem_in_list_ctr_var1383_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_list_ctr_var1396_bits[]	= { ANTLR_UINT64_LIT(0x80C3C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_list_ctr_var1396( FOLLOW_COMMA_in_list_ctr_var1396_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_ctr_var_elem_in_list_ctr_var1416_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_ctr_var_elem_in_list_ctr_var1416( FOLLOW_list_ctr_var_elem_in_list_ctr_var1416_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_list_ctr_var1430_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_list_ctr_var1430( FOLLOW_SEMI_in_list_ctr_var1430_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_list_ctr_var_elem1462_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_list_ctr_var_elem1462( FOLLOW_list_indexing_ex_in_list_ctr_var_elem1462_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_list_ctr_var_elem1474_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000082) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_list_ctr_var_elem1474( FOLLOW_atom_id_t_in_list_ctr_var_elem1474_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_AT_in_list_ctr_var_elem1477_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_AT_in_list_ctr_var_elem1477( FOLLOW_AT_in_list_ctr_var_elem1477_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_list_ctr_var_elem1483_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_list_ctr_var_elem1483( FOLLOW_id_str_in_list_ctr_var_elem1483_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OBJ_in_block_objective1505_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OBJ_in_block_objective1505( FOLLOW_OBJ_in_block_objective1505_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block_objective1507_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block_objective1507( FOLLOW_LBRACE_in_block_objective1507_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_objective_in_block_objective1509_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_objective_in_block_objective1509( FOLLOW_objective_in_block_objective1509_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block_objective1511_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block_objective1511( FOLLOW_RBRACE_in_block_objective1511_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block_objective1513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block_objective1513( FOLLOW_SEMI_in_block_objective1513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_objective1535_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_objective1535( FOLLOW_atom_id_t_in_objective1535_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_objective1537_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_objective1537( FOLLOW_EQ_in_objective1537_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_objective1543_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_objective1543( FOLLOW_expr_in_objective1543_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_objective1546_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COLON_in_objective1546( FOLLOW_COLON_in_objective1546_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_objective1552_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_objective1552( FOLLOW_atom_id_t_in_objective1552_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_objective1556_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_objective1556( FOLLOW_SEMI_in_objective1556_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_CONSTRAINTS_in_block_constraints1584_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_CONSTRAINTS_in_block_constraints1584( FOLLOW_CONSTRAINTS_in_block_constraints1584_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block_constraints1586_bits[]	= { ANTLR_UINT64_LIT(0x93E3E78A0468AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block_constraints1586( FOLLOW_LBRACE_in_block_constraints1586_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_constraint_in_block_constraints1588_bits[]	= { ANTLR_UINT64_LIT(0x93E3E78A0468AD50), ANTLR_UINT64_LIT(0x00000000287FC124) };
static  gEconParserImplTraits::BitsetListType FOLLOW_constraint_in_block_constraints1588( FOLLOW_constraint_in_block_constraints1588_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block_constraints1591_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block_constraints1591( FOLLOW_RBRACE_in_block_constraints1591_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block_constraints1593_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block_constraints1593( FOLLOW_SEMI_in_block_constraints1593_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_constraint1615_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_constraint1615( FOLLOW_list_indexing_ex_in_constraint1615_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_constraint1627_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_constraint1627( FOLLOW_expr_in_constraint1627_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_constraint1629_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_constraint1629( FOLLOW_EQ_in_constraint1629_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_constraint1635_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_constraint1635( FOLLOW_expr_in_constraint1635_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_constraint1638_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COLON_in_constraint1638( FOLLOW_COLON_in_constraint1638_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_constraint1644_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_constraint1644( FOLLOW_atom_id_t_in_constraint1644_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_constraint1648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_constraint1648( FOLLOW_SEMI_in_constraint1648_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_ref_in_constraint1670_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_ref_in_constraint1670( FOLLOW_list_ref_in_constraint1670_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_AT_in_constraint1672_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_AT_in_constraint1672( FOLLOW_AT_in_constraint1672_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_constraint1678_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_constraint1678( FOLLOW_id_str_in_constraint1678_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_constraint1680_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_constraint1680( FOLLOW_SEMI_in_constraint1680_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ref_sec_in_list_ref1707_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ref_sec_in_list_ref1707( FOLLOW_ref_sec_in_list_ref1707_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_list_ref1712_bits[]	= { ANTLR_UINT64_LIT(0x1000050000080000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_list_ref1712( FOLLOW_COMMA_in_list_ref1712_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ref_sec_in_list_ref1718_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ref_sec_in_list_ref1718( FOLLOW_ref_sec_in_list_ref1718_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OBJ_in_ref_sec1743_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OBJ_in_ref_sec1743( FOLLOW_OBJ_in_ref_sec1743_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_CONSTRAINTS_in_ref_sec1753_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_CONSTRAINTS_in_ref_sec1753( FOLLOW_CONSTRAINTS_in_ref_sec1753_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_FOCS_in_ref_sec1763_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_FOCS_in_ref_sec1763( FOLLOW_FOCS_in_ref_sec1763_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_IDS_in_ref_sec1773_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_IDS_in_ref_sec1773( FOLLOW_IDS_in_ref_sec1773_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_IDS_in_block_identities1792_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_IDS_in_block_identities1792( FOLLOW_IDS_in_block_identities1792_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block_identities1794_bits[]	= { ANTLR_UINT64_LIT(0x83E3E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block_identities1794( FOLLOW_LBRACE_in_block_identities1794_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_identity_in_block_identities1796_bits[]	= { ANTLR_UINT64_LIT(0x83E3E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC124) };
static  gEconParserImplTraits::BitsetListType FOLLOW_identity_in_block_identities1796( FOLLOW_identity_in_block_identities1796_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block_identities1799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block_identities1799( FOLLOW_RBRACE_in_block_identities1799_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block_identities1801_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block_identities1801( FOLLOW_SEMI_in_block_identities1801_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_identity1823_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_identity1823( FOLLOW_list_indexing_ex_in_identity1823_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_identity1835_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_identity1835( FOLLOW_expr_in_identity1835_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_identity1837_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_identity1837( FOLLOW_EQ_in_identity1837_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_identity1843_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_identity1843( FOLLOW_expr_in_identity1843_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_identity1845_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_identity1845( FOLLOW_SEMI_in_identity1845_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SHOCKS_in_block_shocks1864_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SHOCKS_in_block_shocks1864( FOLLOW_SHOCKS_in_block_shocks1864_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block_shocks1866_bits[]	= { ANTLR_UINT64_LIT(0x80C3C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block_shocks1866( FOLLOW_LBRACE_in_block_shocks1866_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_var_in_block_shocks1872_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_var_in_block_shocks1872( FOLLOW_list_var_in_block_shocks1872_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block_shocks1876_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block_shocks1876( FOLLOW_RBRACE_in_block_shocks1876_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block_shocks1878_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block_shocks1878( FOLLOW_SEMI_in_block_shocks1878_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_shock1900_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_shock1900( FOLLOW_list_indexing_ex_in_shock1900_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_shock1912_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_shock1912( FOLLOW_atom_id_t_in_shock1912_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_shock1914_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_shock1914( FOLLOW_SEMI_in_shock1914_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_CALIBR_in_block_calibr1933_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_CALIBR_in_block_calibr1933( FOLLOW_CALIBR_in_block_calibr1933_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block_calibr1935_bits[]	= { ANTLR_UINT64_LIT(0x83E3E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block_calibr1935( FOLLOW_LBRACE_in_block_calibr1935_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_calibr_eq_in_block_calibr1937_bits[]	= { ANTLR_UINT64_LIT(0x83E3E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC124) };
static  gEconParserImplTraits::BitsetListType FOLLOW_calibr_eq_in_block_calibr1937( FOLLOW_calibr_eq_in_block_calibr1937_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block_calibr1940_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block_calibr1940( FOLLOW_RBRACE_in_block_calibr1940_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block_calibr1942_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block_calibr1942( FOLLOW_SEMI_in_block_calibr1942_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_calibr_eq1964_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_calibr_eq1964( FOLLOW_list_indexing_ex_in_calibr_eq1964_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_calibr_eq1976_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_calibr_eq1976( FOLLOW_expr_in_calibr_eq1976_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_calibr_eq1978_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_calibr_eq1978( FOLLOW_EQ_in_calibr_eq1978_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_calibr_eq1984_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000880) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_calibr_eq1984( FOLLOW_expr_in_calibr_eq1984_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RARROW_in_calibr_eq1988_bits[]	= { ANTLR_UINT64_LIT(0x80C3C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RARROW_in_calibr_eq1988( FOLLOW_RARROW_in_calibr_eq1988_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_par_in_calibr_eq1994_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_par_in_calibr_eq1994( FOLLOW_list_par_in_calibr_eq1994_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_calibr_eq1999_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_calibr_eq1999( FOLLOW_SEMI_in_calibr_eq1999_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_var_elem_in_list_var2035_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_var_elem_in_list_var2035( FOLLOW_list_var_elem_in_list_var2035_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_list_var2048_bits[]	= { ANTLR_UINT64_LIT(0x80C3C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_list_var2048( FOLLOW_COMMA_in_list_var2048_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_var_elem_in_list_var2068_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_var_elem_in_list_var2068( FOLLOW_list_var_elem_in_list_var2068_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_list_var2082_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_list_var2082( FOLLOW_SEMI_in_list_var2082_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_livar_elem_in_list_livar2117_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_livar_elem_in_list_livar2117( FOLLOW_list_livar_elem_in_list_livar2117_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_list_livar2130_bits[]	= { ANTLR_UINT64_LIT(0x80C3C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_list_livar2130( FOLLOW_COMMA_in_list_livar2130_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_livar_elem_in_list_livar2150_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_livar_elem_in_list_livar2150( FOLLOW_list_livar_elem_in_list_livar2150_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_list_livar2164_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_list_livar2164( FOLLOW_SEMI_in_list_livar2164_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_list_var_elem2191_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_list_var_elem2191( FOLLOW_list_indexing_ex_in_list_var_elem2191_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_list_var_elem2205_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_list_var_elem2205( FOLLOW_atom_id_t_in_list_var_elem2205_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_lindexing_ex_in_list_livar_elem2232_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_lindexing_ex_in_list_livar_elem2232( FOLLOW_list_lindexing_ex_in_list_livar_elem2232_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_list_livar_elem2246_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_list_livar_elem2246( FOLLOW_atom_id_t_in_list_livar_elem2246_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_par_elem_in_list_par2279_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_par_elem_in_list_par2279( FOLLOW_list_par_elem_in_list_par2279_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_list_par2292_bits[]	= { ANTLR_UINT64_LIT(0x80C3C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_list_par2292( FOLLOW_COMMA_in_list_par2292_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_par_elem_in_list_par2312_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_par_elem_in_list_par2312( FOLLOW_list_par_elem_in_list_par2312_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_list_par2326_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_list_par2326( FOLLOW_SEMI_in_list_par2326_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_list_par_elem2353_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_list_par_elem2353( FOLLOW_list_indexing_ex_in_list_par_elem2353_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_nt_in_list_par_elem2367_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_nt_in_list_par_elem2367( FOLLOW_atom_id_nt_in_list_par_elem2367_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_add_in_expr2394_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_add_in_expr2394( FOLLOW_expr_add_in_expr2394_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_sum_in_expr_add2421_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000002), ANTLR_UINT64_LIT(0x0000000000000001) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_sum_in_expr_add2421( FOLLOW_expr_sum_in_expr_add2421_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_PLUS_in_expr_add2443_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_PLUS_in_expr_add2443( FOLLOW_PLUS_in_expr_add2443_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_sum_in_expr_add2449_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000002), ANTLR_UINT64_LIT(0x0000000000000001) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_sum_in_expr_add2449( FOLLOW_expr_sum_in_expr_add2449_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_expr_add2472_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MINUS_in_expr_add2472( FOLLOW_MINUS_in_expr_add2472_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_sum_in_expr_add2478_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000002), ANTLR_UINT64_LIT(0x0000000000000001) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_sum_in_expr_add2478( FOLLOW_expr_sum_in_expr_add2478_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_mul_in_expr_sum2513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_mul_in_expr_sum2513( FOLLOW_expr_mul_in_expr_sum2513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_expr_sum2524_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000100000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MINUS_in_expr_sum2524( FOLLOW_MINUS_in_expr_sum2524_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SUM_in_expr_sum2531_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SUM_in_expr_sum2531( FOLLOW_SUM_in_expr_sum2531_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_indexing_ex_in_expr_sum2537_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_indexing_ex_in_expr_sum2537( FOLLOW_indexing_ex_in_expr_sum2537_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_sum_in_expr_sum2543_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_sum_in_expr_sum2543( FOLLOW_expr_sum_in_expr_sum2543_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_prod_in_expr_mul2570_bits[]	= { ANTLR_UINT64_LIT(0x0400000040000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_prod_in_expr_mul2570( FOLLOW_expr_prod_in_expr_mul2570_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MUL_in_expr_mul2592_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000286FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MUL_in_expr_mul2592( FOLLOW_MUL_in_expr_mul2592_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_prod_in_expr_mul2598_bits[]	= { ANTLR_UINT64_LIT(0x0400000040000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_prod_in_expr_mul2598( FOLLOW_expr_prod_in_expr_mul2598_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DIV_in_expr_mul2621_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000286FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DIV_in_expr_mul2621( FOLLOW_DIV_in_expr_mul2621_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_prod_in_expr_mul2627_bits[]	= { ANTLR_UINT64_LIT(0x0400000040000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_prod_in_expr_mul2627( FOLLOW_expr_prod_in_expr_mul2627_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_pow_in_expr_prod2662_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_pow_in_expr_prod2662( FOLLOW_expr_pow_in_expr_prod2662_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_expr_prod2673_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MINUS_in_expr_prod2673( FOLLOW_MINUS_in_expr_prod2673_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_PROD_in_expr_prod2680_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_PROD_in_expr_prod2680( FOLLOW_PROD_in_expr_prod2680_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_indexing_ex_in_expr_prod2686_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000286FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_indexing_ex_in_expr_prod2686( FOLLOW_indexing_ex_in_expr_prod2686_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_prod_in_expr_prod2692_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_prod_in_expr_prod2692( FOLLOW_expr_prod_in_expr_prod2692_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_indexing_ex_in_list_indexing_ex2726_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_indexing_ex_in_list_indexing_ex2726( FOLLOW_indexing_ex_in_list_indexing_ex2726_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_indexing_ex_in_list_lindexing_ex2770_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_indexing_ex_in_list_lindexing_ex2770( FOLLOW_indexing_ex_in_list_lindexing_ex2770_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_indexing_ex2809_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_indexing_ex2809( FOLLOW_LANGBR_in_indexing_ex2809_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_indexing_ex2815_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_indexing_ex2815( FOLLOW_id_str_in_indexing_ex2815_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DBLCOLON_in_indexing_ex2817_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DBLCOLON_in_indexing_ex2817( FOLLOW_DBLCOLON_in_indexing_ex2817_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_indexing_ex2823_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_indexing_ex2823( FOLLOW_id_str_in_indexing_ex2823_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_indexing_ex2825_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_indexing_ex2825( FOLLOW_RANGBR_in_indexing_ex2825_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_indexing_ex2835_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_indexing_ex2835( FOLLOW_LANGBR_in_indexing_ex2835_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_indexing_ex2841_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_indexing_ex2841( FOLLOW_id_str_in_indexing_ex2841_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DBLCOLON_in_indexing_ex2843_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DBLCOLON_in_indexing_ex2843( FOLLOW_DBLCOLON_in_indexing_ex2843_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_indexing_ex2849_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_indexing_ex2849( FOLLOW_id_str_in_indexing_ex2849_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BACKSLASH_in_indexing_ex2851_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BACKSLASH_in_indexing_ex2851( FOLLOW_BACKSLASH_in_indexing_ex2851_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_indexing_ex2857_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_indexing_ex2857( FOLLOW_id_str_in_indexing_ex2857_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_indexing_ex2859_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_indexing_ex2859( FOLLOW_RANGBR_in_indexing_ex2859_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_indexing_ex2869_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_indexing_ex2869( FOLLOW_LANGBR_in_indexing_ex2869_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_indexing_ex2875_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_indexing_ex2875( FOLLOW_id_str_in_indexing_ex2875_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DBLCOLON_in_indexing_ex2877_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DBLCOLON_in_indexing_ex2877( FOLLOW_DBLCOLON_in_indexing_ex2877_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_indexing_ex2883_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_indexing_ex2883( FOLLOW_id_str_in_indexing_ex2883_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BACKSLASH_in_indexing_ex2885_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BACKSLASH_in_indexing_ex2885( FOLLOW_BACKSLASH_in_indexing_ex2885_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_indexing_ex2887_bits[]	= { ANTLR_UINT64_LIT(0x80C2F2081000AC00), ANTLR_UINT64_LIT(0x00000000280A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_indexing_ex2887( FOLLOW_QUOTE_in_indexing_ex2887_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_indexing_ex2893_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_indexing_ex2893( FOLLOW_idx_str_in_indexing_ex2893_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_indexing_ex2895_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_indexing_ex2895( FOLLOW_QUOTE_in_indexing_ex2895_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_indexing_ex2897_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_indexing_ex2897( FOLLOW_RANGBR_in_indexing_ex2897_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_expr_pow2926_bits[]	= { ANTLR_UINT64_LIT(0x81E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000286FC020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MINUS_in_expr_pow2926( FOLLOW_MINUS_in_expr_pow2926_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_atom_in_expr_pow2944_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_atom_in_expr_pow2944( FOLLOW_expr_atom_in_expr_pow2944_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_POW_in_expr_pow2957_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000286FC020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_POW_in_expr_pow2957( FOLLOW_POW_in_expr_pow2957_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_expr_pow2962_bits[]	= { ANTLR_UINT64_LIT(0x81E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000286FC020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MINUS_in_expr_pow2962( FOLLOW_MINUS_in_expr_pow2962_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_atom_in_expr_pow2972_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_atom_in_expr_pow2972( FOLLOW_expr_atom_in_expr_pow2972_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_num_in_expr_atom3020_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_num_in_expr_atom3020( FOLLOW_atom_num_in_expr_atom3020_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_in_expr_atom3034_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_in_expr_atom3034( FOLLOW_atom_id_in_expr_atom3034_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_delta_in_expr_atom3048_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_delta_in_expr_atom3048( FOLLOW_atom_delta_in_expr_atom3048_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_func_in_expr_atom3062_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_func_in_expr_atom3062( FOLLOW_expr_func_in_expr_atom3062_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_e_in_expr_atom3076_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_e_in_expr_atom3076( FOLLOW_expr_e_in_expr_atom3076_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_atom3086_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_atom3086( FOLLOW_LPAREN_in_expr_atom3086_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_atom3093_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_atom3093( FOLLOW_expr_in_expr_atom3093_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_atom3098_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_atom3098( FOLLOW_RPAREN_in_expr_atom3098_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SQRT_in_expr_func3119_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SQRT_in_expr_func3119( FOLLOW_SQRT_in_expr_func3119_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3121_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3121( FOLLOW_LPAREN_in_expr_func3121_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3127( FOLLOW_expr_in_expr_func3127_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3129_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3129( FOLLOW_RPAREN_in_expr_func3129_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EXP_in_expr_func3139_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EXP_in_expr_func3139( FOLLOW_EXP_in_expr_func3139_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3141_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3141( FOLLOW_LPAREN_in_expr_func3141_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3147_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3147( FOLLOW_expr_in_expr_func3147_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3149_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3149( FOLLOW_RPAREN_in_expr_func3149_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LOG_in_expr_func3159_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LOG_in_expr_func3159( FOLLOW_LOG_in_expr_func3159_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3161_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3161( FOLLOW_LPAREN_in_expr_func3161_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3167_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3167( FOLLOW_expr_in_expr_func3167_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3169_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3169( FOLLOW_RPAREN_in_expr_func3169_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SIN_in_expr_func3179_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SIN_in_expr_func3179( FOLLOW_SIN_in_expr_func3179_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3181_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3181( FOLLOW_LPAREN_in_expr_func3181_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3187_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3187( FOLLOW_expr_in_expr_func3187_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3189_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3189( FOLLOW_RPAREN_in_expr_func3189_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COS_in_expr_func3199_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COS_in_expr_func3199( FOLLOW_COS_in_expr_func3199_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3201_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3201( FOLLOW_LPAREN_in_expr_func3201_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3207_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3207( FOLLOW_expr_in_expr_func3207_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3209_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3209( FOLLOW_RPAREN_in_expr_func3209_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_TAN_in_expr_func3219_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_TAN_in_expr_func3219( FOLLOW_TAN_in_expr_func3219_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3221_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3221( FOLLOW_LPAREN_in_expr_func3221_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3227_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3227( FOLLOW_expr_in_expr_func3227_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3229_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3229( FOLLOW_RPAREN_in_expr_func3229_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ASIN_in_expr_func3239_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ASIN_in_expr_func3239( FOLLOW_ASIN_in_expr_func3239_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3241_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3241( FOLLOW_LPAREN_in_expr_func3241_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3247_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3247( FOLLOW_expr_in_expr_func3247_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3249_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3249( FOLLOW_RPAREN_in_expr_func3249_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ACOS_in_expr_func3259_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ACOS_in_expr_func3259( FOLLOW_ACOS_in_expr_func3259_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3261_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3261( FOLLOW_LPAREN_in_expr_func3261_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3267_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3267( FOLLOW_expr_in_expr_func3267_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3269_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3269( FOLLOW_RPAREN_in_expr_func3269_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ATAN_in_expr_func3279_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ATAN_in_expr_func3279( FOLLOW_ATAN_in_expr_func3279_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3281_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3281( FOLLOW_LPAREN_in_expr_func3281_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3287_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3287( FOLLOW_expr_in_expr_func3287_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3289_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3289( FOLLOW_RPAREN_in_expr_func3289_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SINH_in_expr_func3299_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SINH_in_expr_func3299( FOLLOW_SINH_in_expr_func3299_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3301_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3301( FOLLOW_LPAREN_in_expr_func3301_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3307_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3307( FOLLOW_expr_in_expr_func3307_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3309_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3309( FOLLOW_RPAREN_in_expr_func3309_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COSH_in_expr_func3319_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COSH_in_expr_func3319( FOLLOW_COSH_in_expr_func3319_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3321_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3321( FOLLOW_LPAREN_in_expr_func3321_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3327_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3327( FOLLOW_expr_in_expr_func3327_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3329_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3329( FOLLOW_RPAREN_in_expr_func3329_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_TANH_in_expr_func3339_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_TANH_in_expr_func3339( FOLLOW_TANH_in_expr_func3339_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3341_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3341( FOLLOW_LPAREN_in_expr_func3341_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3347_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3347( FOLLOW_expr_in_expr_func3347_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3349_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3349( FOLLOW_RPAREN_in_expr_func3349_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_E_in_expr_e3373_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_E_in_expr_e3373( FOLLOW_E_in_expr_e3373_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACK_in_expr_e3375_bits[]	= { ANTLR_UINT64_LIT(0x0200200000000000), ANTLR_UINT64_LIT(0x0000000020080201) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACK_in_expr_e3375( FOLLOW_LBRACK_in_expr_e3375_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_time_idx_in_expr_e3381_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_time_idx_in_expr_e3381( FOLLOW_time_idx_in_expr_e3381_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACK_in_expr_e3383_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACK_in_expr_e3383( FOLLOW_RBRACK_in_expr_e3383_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACK_in_expr_e3385_bits[]	= { ANTLR_UINT64_LIT(0x83E2E28A0460AD50), ANTLR_UINT64_LIT(0x00000000287FC024) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACK_in_expr_e3385( FOLLOW_LBRACK_in_expr_e3385_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_e3391_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_e3391( FOLLOW_expr_in_expr_e3391_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACK_in_expr_e3393_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACK_in_expr_e3393( FOLLOW_RBRACK_in_expr_e3393_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DELTA_in_atom_delta3416_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DELTA_in_atom_delta3416( FOLLOW_DELTA_in_atom_delta3416_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_atom_delta3418_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_atom_delta3418( FOLLOW_LANGBR_in_atom_delta3418_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_atom_delta3424_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_atom_delta3424( FOLLOW_id_str_in_atom_delta3424_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_atom_delta3426_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_atom_delta3426( FOLLOW_COMMA_in_atom_delta3426_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_atom_delta3432_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_atom_delta3432( FOLLOW_id_str_in_atom_delta3432_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_atom_delta3434_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_atom_delta3434( FOLLOW_RANGBR_in_atom_delta3434_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DELTA_in_atom_delta3444_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DELTA_in_atom_delta3444( FOLLOW_DELTA_in_atom_delta3444_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_atom_delta3446_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_atom_delta3446( FOLLOW_LANGBR_in_atom_delta3446_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3448_bits[]	= { ANTLR_UINT64_LIT(0x80C2F2081000AC00), ANTLR_UINT64_LIT(0x00000000280A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3448( FOLLOW_QUOTE_in_atom_delta3448_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_atom_delta3454_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_atom_delta3454( FOLLOW_idx_str_in_atom_delta3454_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3456_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3456( FOLLOW_QUOTE_in_atom_delta3456_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_atom_delta3458_bits[]	= { ANTLR_UINT64_LIT(0x80C2F2081000AC00), ANTLR_UINT64_LIT(0x00000000280A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_atom_delta3458( FOLLOW_COMMA_in_atom_delta3458_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_atom_delta3464_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_atom_delta3464( FOLLOW_idx_str_in_atom_delta3464_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_atom_delta3466_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_atom_delta3466( FOLLOW_RANGBR_in_atom_delta3466_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DELTA_in_atom_delta3476_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DELTA_in_atom_delta3476( FOLLOW_DELTA_in_atom_delta3476_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_atom_delta3478_bits[]	= { ANTLR_UINT64_LIT(0x80C2C2000000AC00), ANTLR_UINT64_LIT(0x00000000080A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_atom_delta3478( FOLLOW_LANGBR_in_atom_delta3478_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_atom_delta3484_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_atom_delta3484( FOLLOW_id_str_in_atom_delta3484_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_atom_delta3486_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_atom_delta3486( FOLLOW_COMMA_in_atom_delta3486_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3488_bits[]	= { ANTLR_UINT64_LIT(0x80C2F2081000AC00), ANTLR_UINT64_LIT(0x00000000280A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3488( FOLLOW_QUOTE_in_atom_delta3488_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_atom_delta3494_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_atom_delta3494( FOLLOW_idx_str_in_atom_delta3494_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3496_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3496( FOLLOW_QUOTE_in_atom_delta3496_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_atom_delta3498_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_atom_delta3498( FOLLOW_RANGBR_in_atom_delta3498_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DELTA_in_atom_delta3508_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DELTA_in_atom_delta3508( FOLLOW_DELTA_in_atom_delta3508_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_atom_delta3510_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_atom_delta3510( FOLLOW_LANGBR_in_atom_delta3510_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3512_bits[]	= { ANTLR_UINT64_LIT(0x80C2F2081000AC00), ANTLR_UINT64_LIT(0x00000000280A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3512( FOLLOW_QUOTE_in_atom_delta3512_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_atom_delta3518_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_atom_delta3518( FOLLOW_idx_str_in_atom_delta3518_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3520_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3520( FOLLOW_QUOTE_in_atom_delta3520_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_atom_delta3522_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_atom_delta3522( FOLLOW_COMMA_in_atom_delta3522_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3524_bits[]	= { ANTLR_UINT64_LIT(0x80C2F2081000AC00), ANTLR_UINT64_LIT(0x00000000280A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3524( FOLLOW_QUOTE_in_atom_delta3524_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_atom_delta3530_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_atom_delta3530( FOLLOW_idx_str_in_atom_delta3530_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3532_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3532( FOLLOW_QUOTE_in_atom_delta3532_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_atom_delta3534_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_atom_delta3534( FOLLOW_RANGBR_in_atom_delta3534_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_nt_in_atom_id3561_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_nt_in_atom_id3561( FOLLOW_atom_id_nt_in_atom_id3561_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_atom_id3575_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_atom_id3575( FOLLOW_atom_id_t_in_atom_id3575_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_atom_id_t3602_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_atom_id_t3602( FOLLOW_id_str_in_atom_id_t3602_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACK_in_atom_id_t3604_bits[]	= { ANTLR_UINT64_LIT(0x0200200000000000), ANTLR_UINT64_LIT(0x0000000020080201) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACK_in_atom_id_t3604( FOLLOW_LBRACK_in_atom_id_t3604_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_time_idx_in_atom_id_t3610_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_time_idx_in_atom_id_t3610( FOLLOW_time_idx_in_atom_id_t3610_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACK_in_atom_id_t3612_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACK_in_atom_id_t3612( FOLLOW_RBRACK_in_atom_id_t3612_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_atom_id_t3626_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_atom_id_t3626( FOLLOW_id_str_in_atom_id_t3626_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_idx_in_atom_id_t3632_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_idx_in_atom_id_t3632( FOLLOW_list_idx_in_atom_id_t3632_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACK_in_atom_id_t3634_bits[]	= { ANTLR_UINT64_LIT(0x0200200000000000), ANTLR_UINT64_LIT(0x0000000020080201) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACK_in_atom_id_t3634( FOLLOW_LBRACK_in_atom_id_t3634_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_time_idx_in_atom_id_t3640_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_time_idx_in_atom_id_t3640( FOLLOW_time_idx_in_atom_id_t3640_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACK_in_atom_id_t3642_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACK_in_atom_id_t3642( FOLLOW_RBRACK_in_atom_id_t3642_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_int_in_time_idx3680_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_int_in_time_idx3680( FOLLOW_atom_int_in_time_idx3680_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_PLUS_in_time_idx3690_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_PLUS_in_time_idx3690( FOLLOW_PLUS_in_time_idx3690_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_int_in_time_idx3696_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_int_in_time_idx3696( FOLLOW_atom_int_in_time_idx3696_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_time_idx3706_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MINUS_in_time_idx3706( FOLLOW_MINUS_in_time_idx3706_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_int_in_time_idx3712_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_int_in_time_idx3712( FOLLOW_atom_int_in_time_idx3712_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SS_in_time_idx3722_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SS_in_time_idx3722( FOLLOW_SS_in_time_idx3722_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_time_idx3732_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MINUS_in_time_idx3732( FOLLOW_MINUS_in_time_idx3732_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_INF_in_time_idx3734_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_INF_in_time_idx3734( FOLLOW_INF_in_time_idx3734_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_atom_id_nt3761_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_atom_id_nt3761( FOLLOW_id_str_in_atom_id_nt3761_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_atom_id_nt3775_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_atom_id_nt3775( FOLLOW_id_str_in_atom_id_nt3775_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_idx_in_atom_id_nt3781_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_idx_in_atom_id_nt3781( FOLLOW_list_idx_in_atom_id_nt3781_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_list_idx3809_bits[]	= { ANTLR_UINT64_LIT(0x80C2F2081000AC00), ANTLR_UINT64_LIT(0x00000000280A4030) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_list_idx3809( FOLLOW_LANGBR_in_list_idx3809_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_list_idx3825_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000040) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_list_idx3825( FOLLOW_idx_str_in_list_idx3825_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_idx3833_bits[]	= { ANTLR_UINT64_LIT(0x80C2F2081000AC00), ANTLR_UINT64_LIT(0x00000000280A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_idx3833( FOLLOW_QUOTE_in_list_idx3833_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_list_idx3839_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_list_idx3839( FOLLOW_idx_str_in_list_idx3839_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_idx3841_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000040) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_idx3841( FOLLOW_QUOTE_in_list_idx3841_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_list_idx3856_bits[]	= { ANTLR_UINT64_LIT(0x80C2F2081000AC00), ANTLR_UINT64_LIT(0x00000000280A4030) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_list_idx3856( FOLLOW_COMMA_in_list_idx3856_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_list_idx3864_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000040) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_list_idx3864( FOLLOW_idx_str_in_list_idx3864_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_idx3872_bits[]	= { ANTLR_UINT64_LIT(0x80C2F2081000AC00), ANTLR_UINT64_LIT(0x00000000280A4020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_idx3872( FOLLOW_QUOTE_in_list_idx3872_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_list_idx3878_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_list_idx3878( FOLLOW_idx_str_in_list_idx3878_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_idx3880_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000040) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_idx3880( FOLLOW_QUOTE_in_list_idx3880_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_list_idx3891_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_list_idx3891( FOLLOW_RANGBR_in_list_idx3891_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_idx_str3916_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_idx_str3916( FOLLOW_id_str_in_idx_str3916_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_E_in_idx_str3926_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_E_in_idx_str3926( FOLLOW_E_in_idx_str3926_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_INF_in_idx_str3936_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_INF_in_idx_str3936( FOLLOW_INF_in_idx_str3936_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ZERO_in_idx_str3946_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ZERO_in_idx_str3946( FOLLOW_ZERO_in_idx_str3946_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_INT_in_idx_str3956_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_INT_in_idx_str3956( FOLLOW_INT_in_idx_str3956_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DID_in_idx_str3966_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DID_in_idx_str3966( FOLLOW_DID_in_idx_str3966_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_id_str3989_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ID_in_id_str3989( FOLLOW_ID_in_id_str3989_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SLETTER_in_id_str3999_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SLETTER_in_id_str3999( FOLLOW_SLETTER_in_id_str3999_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_CLETTER_in_id_str4009_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_CLETTER_in_id_str4009( FOLLOW_CLETTER_in_id_str4009_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OUTPUT_in_id_str4019_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OUTPUT_in_id_str4019( FOLLOW_OUTPUT_in_id_str4019_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_R_in_id_str4029_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_R_in_id_str4029( FOLLOW_R_in_id_str4029_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LATEX_in_id_str4039_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LATEX_in_id_str4039( FOLLOW_LATEX_in_id_str4039_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANDSCAPE_in_id_str4049_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANDSCAPE_in_id_str4049( FOLLOW_LANDSCAPE_in_id_str4049_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LOGF_in_id_str4059_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LOGF_in_id_str4059( FOLLOW_LOGF_in_id_str4059_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LONG_in_id_str4069_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LONG_in_id_str4069( FOLLOW_LONG_in_id_str4069_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SHORT_in_id_str4079_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SHORT_in_id_str4079( FOLLOW_SHORT_in_id_str4079_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BTRUE_in_id_str4089_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BTRUE_in_id_str4089( FOLLOW_BTRUE_in_id_str4089_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BFALSE_in_id_str4099_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BFALSE_in_id_str4099( FOLLOW_BFALSE_in_id_str4099_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SS_in_id_str4109_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SS_in_id_str4109( FOLLOW_SS_in_id_str4109_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_VERBOSE_in_id_str4119_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_VERBOSE_in_id_str4119( FOLLOW_VERBOSE_in_id_str4119_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BACKWARDCOMP_in_id_str4129_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BACKWARDCOMP_in_id_str4129( FOLLOW_BACKWARDCOMP_in_id_str4129_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_JACOBIAN_in_id_str4140_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_JACOBIAN_in_id_str4140( FOLLOW_JACOBIAN_in_id_str4140_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_int_in_atom_num4167_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_int_in_atom_num4167( FOLLOW_atom_int_in_atom_num4167_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_double_in_atom_num4181_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_double_in_atom_num4181( FOLLOW_atom_double_in_atom_num4181_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ZERO_in_atom_int4210_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ZERO_in_atom_int4210( FOLLOW_ZERO_in_atom_int4210_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_INT_in_atom_int4219_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_INT_in_atom_int4219( FOLLOW_INT_in_atom_int4219_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLE_in_atom_double4249_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DOUBLE_in_atom_double4249( FOLLOW_DOUBLE_in_atom_double4249_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BTRUE_in_atom_bool4278_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BTRUE_in_atom_bool4278( FOLLOW_BTRUE_in_atom_bool4278_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BFALSE_in_atom_bool4288_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BFALSE_in_atom_bool4288( FOLLOW_BFALSE_in_atom_bool4288_bits, 1 );



/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    264:1: definition : (lhs= atom_id_t EQ rhs= expr SEMI |lhs= atom_id_nt EQ rhs= expr SEMI );
 */
static const ANTLR_INT32 dfa35_eot[110] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR_INT32 dfa35_eof[110] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR_INT32 dfa35_min[110] =
    {
	10, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, 
	10, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 10, 10, 36, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 10, 17, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
	68, 17
    };
static const ANTLR_INT32 dfa35_max[110] =
    {
	91, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, -1, 
	93, -1, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 93, 93, 51, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 93, 70, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
	68, 70
    };
static const ANTLR_INT32 dfa35_accept[110] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 
	-1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR_INT32 dfa35_special[110] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa35_T_empty	 =   NULL;

static const ANTLR_INT32 dfa35_T0[] =
    {
	42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43
    };

static const ANTLR_INT32 dfa35_T1[] =
    {
	109
    };

static const ANTLR_INT32 dfa35_T2[] =
    {
	102, 99, -1, 98, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	108, -1, -1, -1, -1, -1, -1, 104, -1, -1, -1, -1, -1, 88, -1, -1, 105, 
	107, 103, 94, -1, 93, -1, -1, -1, -1, 95, 96, -1, -1, -1, -1, -1, -1, -1, 
	91, -1, -1, -1, -1, -1, 92, -1, -1, -1, -1, -1, -1, -1, -1, 97, -1, -1, 
	89, -1, 100, -1, -1, -1, -1, -1, -1, -1, 101, -1, 106
    };

static const ANTLR_INT32 dfa35_T3[] =
    {
	87
    };

static const ANTLR_INT32 dfa35_T4[] =
    {
	19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, 17
    };

static const ANTLR_INT32 dfa35_T5[] =
    {
	19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17
    };

static const ANTLR_INT32 dfa35_T6[] =
    {
	34, 31, -1, 30, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	40, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, 20, -1, -1, 37, 39, 
	35, 26, -1, 25, -1, -1, -1, -1, 27, 28, -1, -1, -1, -1, -1, -1, -1, 23, 
	-1, -1, -1, -1, 41, 24, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, 21, 
	-1, 32, -1, -1, -1, -1, -1, -1, -1, 33, -1, 38
    };

static const ANTLR_INT32 dfa35_T7[] =
    {
	79, 76, -1, 75, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	85, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, 65, -1, -1, 82, 84, 
	80, 71, -1, 70, -1, -1, -1, -1, 72, 73, -1, -1, -1, -1, -1, -1, -1, 68, 
	-1, -1, -1, -1, 86, 69, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, 66, 
	-1, 77, -1, -1, -1, -1, -1, -1, -1, 78, -1, 83
    };

static const ANTLR_INT32 dfa35_T8[] =
    {
	15, 12, -1, 11, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 
	16, 7, -1, 6, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, 4, -1, 
	-1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 2, -1, 13, 
	-1, -1, -1, -1, -1, -1, -1, 14
    };

static const ANTLR_INT32 dfa35_T9[] =
    {
	58, 55, -1, 54, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	64, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, 44, -1, -1, 61, 63, 
	59, 50, -1, 49, -1, -1, -1, -1, 51, 52, -1, -1, -1, -1, -1, -1, -1, 47, 
	-1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, 45, 
	-1, 56, -1, -1, -1, -1, -1, -1, -1, 57, -1, 62
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa35_transitions[] =
{
    dfa35_T8, dfa35_T4, dfa35_T4, dfa35_T4, dfa35_T4, dfa35_T4, dfa35_T4, 
    dfa35_T4, dfa35_T4, dfa35_T4, dfa35_T4, dfa35_T4, dfa35_T4, dfa35_T4, 
    dfa35_T4, dfa35_T4, dfa35_T4, NULL, dfa35_T6, NULL, dfa35_T0, dfa35_T0, 
    dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, 
    dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, 
    dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T9, dfa35_T7, 
    dfa35_T5, dfa35_T3, dfa35_T3, dfa35_T3, dfa35_T3, dfa35_T3, dfa35_T3, 
    dfa35_T3, dfa35_T3, dfa35_T3, dfa35_T3, dfa35_T3, dfa35_T3, dfa35_T3, 
    dfa35_T3, dfa35_T3, dfa35_T3, dfa35_T3, dfa35_T3, dfa35_T3, dfa35_T3, 
    dfa35_T3, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, 
    dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, 
    dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, dfa35_T0, 
    dfa35_T0, dfa35_T2, dfa35_T0, dfa35_T1, dfa35_T1, dfa35_T1, dfa35_T1, 
    dfa35_T1, dfa35_T1, dfa35_T1, dfa35_T1, dfa35_T1, dfa35_T1, dfa35_T1, 
    dfa35_T1, dfa35_T1, dfa35_T1, dfa35_T1, dfa35_T1, dfa35_T1, dfa35_T1, 
    dfa35_T1, dfa35_T1, dfa35_T1, dfa35_T0
};


/* Declare tracking structure for Cyclic DFA 35
 */
class gEconParserCyclicDFA35 : public CyclicDFA< gEconParserImplTraits, gEconParser >, public gEconParserTokens
{
public:
	typedef CyclicDFA< gEconParserImplTraits, gEconParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	gEconParserCyclicDFA35( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static gEconParserCyclicDFA35  cdfa35(
	    35,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"264:1: definition : (lhs= atom_id_t EQ rhs= expr SEMI |lhs= atom_id_nt EQ rhs= expr SEMI );",
	    dfa35_eot,	    /* EOT table			    */
	    dfa35_eof,	    /* EOF table			    */
	    dfa35_min,	    /* Minimum tokens for each state    */
	    dfa35_max,	    /* Maximum tokens for each state    */
	    dfa35_accept,	/* Accept table			    */
	    dfa35_special,	/* Special transition states	    */
	    dfa35_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 35
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    606:1: atom_id returns [ex val] : (v= atom_id_nt |v= atom_id_t );
 */
static const ANTLR_INT32 dfa71_eot[110] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR_INT32 dfa71_eof[110] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR_INT32 dfa71_min[110] =
    {
	10, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 
	10, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 10, 10, 16, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 10, 17, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
	68, 17
    };
static const ANTLR_INT32 dfa71_max[110] =
    {
	91, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, -1, 
	93, -1, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 93, 93, 75, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 93, 70, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
	68, 70
    };
static const ANTLR_INT32 dfa71_accept[110] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 
	-1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR_INT32 dfa71_special[110] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa71_T_empty	 =   NULL;

static const ANTLR_INT32 dfa71_T0[] =
    {
	42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43
    };

static const ANTLR_INT32 dfa71_T1[] =
    {
	109
    };

static const ANTLR_INT32 dfa71_T2[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 
	-1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, 19, 
	-1, -1, -1, -1, -1, 17, 17, -1, -1, -1, -1, -1, 17, 17, -1, -1, -1, -1, 
	-1, 17, -1, 17, 17, 17
    };

static const ANTLR_INT32 dfa71_T3[] =
    {
	102, 99, -1, 98, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	108, -1, -1, -1, -1, -1, -1, 104, -1, -1, -1, -1, -1, 88, -1, -1, 105, 
	107, 103, 94, -1, 93, -1, -1, -1, -1, 95, 96, -1, -1, -1, -1, -1, -1, -1, 
	91, -1, -1, -1, -1, -1, 92, -1, -1, -1, -1, -1, -1, -1, -1, 97, -1, -1, 
	89, -1, 100, -1, -1, -1, -1, -1, -1, -1, 101, -1, 106
    };

static const ANTLR_INT32 dfa71_T4[] =
    {
	87
    };

static const ANTLR_INT32 dfa71_T5[] =
    {
	34, 31, -1, 30, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	40, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, 20, -1, -1, 37, 39, 
	35, 26, -1, 25, -1, -1, -1, -1, 27, 28, -1, -1, -1, -1, -1, -1, -1, 23, 
	-1, -1, -1, -1, 41, 24, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, 21, 
	-1, 32, -1, -1, -1, -1, -1, -1, -1, 33, -1, 38
    };

static const ANTLR_INT32 dfa71_T6[] =
    {
	15, 12, -1, 11, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 
	16, 7, -1, 6, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, 4, -1, 
	-1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 2, -1, 13, 
	-1, -1, -1, -1, -1, -1, -1, 14
    };

static const ANTLR_INT32 dfa71_T7[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 
	-1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 
	-1, -1, -1, -1, -1, 17, 17, -1, -1, -1, -1, -1, 17, 17, -1, -1, -1, -1, 
	-1, 17, -1, 17, 17, 17
    };

static const ANTLR_INT32 dfa71_T8[] =
    {
	79, 76, -1, 75, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	85, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, 65, -1, -1, 82, 84, 
	80, 71, -1, 70, -1, -1, -1, -1, 72, 73, -1, -1, -1, -1, -1, -1, -1, 68, 
	-1, -1, -1, -1, 86, 69, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, 66, 
	-1, 77, -1, -1, -1, -1, -1, -1, -1, 78, -1, 83
    };

static const ANTLR_INT32 dfa71_T9[] =
    {
	58, 55, -1, 54, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	64, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, 44, -1, -1, 61, 63, 
	59, 50, -1, 49, -1, -1, -1, -1, 51, 52, -1, -1, -1, -1, -1, -1, -1, 47, 
	-1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, 45, 
	-1, 56, -1, -1, -1, -1, -1, -1, -1, 57, -1, 62
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa71_transitions[] =
{
    dfa71_T6, dfa71_T2, dfa71_T2, dfa71_T2, dfa71_T2, dfa71_T2, dfa71_T2, 
    dfa71_T2, dfa71_T2, dfa71_T2, dfa71_T2, dfa71_T2, dfa71_T2, dfa71_T2, 
    dfa71_T2, dfa71_T2, dfa71_T2, NULL, dfa71_T5, NULL, dfa71_T0, dfa71_T0, 
    dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, 
    dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, 
    dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T9, dfa71_T8, 
    dfa71_T7, dfa71_T4, dfa71_T4, dfa71_T4, dfa71_T4, dfa71_T4, dfa71_T4, 
    dfa71_T4, dfa71_T4, dfa71_T4, dfa71_T4, dfa71_T4, dfa71_T4, dfa71_T4, 
    dfa71_T4, dfa71_T4, dfa71_T4, dfa71_T4, dfa71_T4, dfa71_T4, dfa71_T4, 
    dfa71_T4, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, 
    dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, 
    dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, dfa71_T0, 
    dfa71_T0, dfa71_T3, dfa71_T0, dfa71_T1, dfa71_T1, dfa71_T1, dfa71_T1, 
    dfa71_T1, dfa71_T1, dfa71_T1, dfa71_T1, dfa71_T1, dfa71_T1, dfa71_T1, 
    dfa71_T1, dfa71_T1, dfa71_T1, dfa71_T1, dfa71_T1, dfa71_T1, dfa71_T1, 
    dfa71_T1, dfa71_T1, dfa71_T1, dfa71_T0
};


/* Declare tracking structure for Cyclic DFA 71
 */
class gEconParserCyclicDFA71 : public CyclicDFA< gEconParserImplTraits, gEconParser >, public gEconParserTokens
{
public:
	typedef CyclicDFA< gEconParserImplTraits, gEconParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	gEconParserCyclicDFA71( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static gEconParserCyclicDFA71  cdfa71(
	    71,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"606:1: atom_id returns [ex val] : (v= atom_id_nt |v= atom_id_t );",
	    dfa71_eot,	    /* EOT table			    */
	    dfa71_eof,	    /* EOF table			    */
	    dfa71_min,	    /* Minimum tokens for each state    */
	    dfa71_max,	    /* Maximum tokens for each state    */
	    dfa71_accept,	/* Accept table			    */
	    dfa71_special,	/* Special transition states	    */
	    dfa71_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 71
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */

/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start model
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:70:1: model : ( opts )? ( sets )? ( tryreduce )? ( block )+ EOF ;
 */
void
gEconParser::model()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:71:5: ( ( opts )? ( sets )? ( tryreduce )? ( block )+ EOF )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:71:7: ( opts )? ( sets )? ( tryreduce )? ( block )+ EOF
        {
            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:71:7: ( opts )?
            {
                int alt1=2;
                switch ( this->LA(1) )
                {
                    case OPTS:
                    	{
                    		alt1=1;
                    	}
                        break;
                }

                switch (alt1)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:71:7: opts
            	    {
            	        this->followPush(FOLLOW_opts_in_model83);
            	        opts();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodelEx;
            	        }


            	    }
            	    break;

                }
            }

            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:71:13: ( sets )?
            {
                int alt2=2;
                switch ( this->LA(1) )
                {
                    case SETS:
                    	{
                    		alt2=1;
                    	}
                        break;
                }

                switch (alt2)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:71:13: sets
            	    {
            	        this->followPush(FOLLOW_sets_in_model86);
            	        sets();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodelEx;
            	        }


            	    }
            	    break;

                }
            }

            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:71:19: ( tryreduce )?
            {
                int alt3=2;
                switch ( this->LA(1) )
                {
                    case TRYREDUCE:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:71:19: tryreduce
            	    {
            	        this->followPush(FOLLOW_tryreduce_in_model89);
            	        tryreduce();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodelEx;
            	        }


            	    }
            	    break;

                }
            }

            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:71:30: ( block )+
            {
                int cnt4=0;

                for (;;)
                {
                    int alt4=2;
            	switch ( this->LA(1) )
            	{
            	case BLOCK:
            		{
            			alt4=1;
            		}
            	    break;

            	}

            	switch (alt4)
            	{
            	    case 1:
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:71:31: block
            	        {
            	            this->followPush(FOLLOW_block_in_model93);
            	            block();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemodelEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt4 >= 1 )
            		{
            		    goto loop4;
            		}
            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< gEconParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulemodelEx;
            	}
            	cnt4++;
                }
                loop4: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(EOF, &FOLLOW_EOF_in_model97);
            if  (this->hasException())
            {
                goto rulemodelEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemodelEx; /* Prevent compiler warnings */
    rulemodelEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end model */

/**
 * $ANTLR start opts
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:75:1: opts : OPTS LBRACE ( opt )+ RBRACE ( SEMI )? ;
 */
void
gEconParser::opts()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:76:5: ( OPTS LBRACE ( opt )+ RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:76:7: OPTS LBRACE ( opt )+ RBRACE ( SEMI )?
        {
             this->matchToken(OPTS, &FOLLOW_OPTS_in_opts115);
            if  (this->hasException())
            {
                goto ruleoptsEx;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_opts117);
            if  (this->hasException())
            {
                goto ruleoptsEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:76:19: ( opt )+
            {
                int cnt5=0;

                for (;;)
                {
                    int alt5=2;
            	switch ( this->LA(1) )
            	{
            	case BACKWARDCOMP:
            	case OUTPUT:
            	case VERBOSE:
            		{
            			alt5=1;
            		}
            	    break;

            	}

            	switch (alt5)
            	{
            	    case 1:
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:76:20: opt
            	        {
            	            this->followPush(FOLLOW_opt_in_opts120);
            	            opt();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleoptsEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt5 >= 1 )
            		{
            		    goto loop5;
            		}
            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< gEconParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleoptsEx;
            	}
            	cnt5++;
                }
                loop5: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_opts124);
            if  (this->hasException())
            {
                goto ruleoptsEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:76:33: ( SEMI )?
            {
                int alt6=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt6=1;
                    	}
                        break;
                }

                switch (alt6)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:76:33: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opts126);
            	        if  (this->hasException())
            	        {
            	            goto ruleoptsEx;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoptsEx; /* Prevent compiler warnings */
    ruleoptsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end opts */

/**
 * $ANTLR start opt
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:79:1: opt : ( OUTPUT opt_output | VERBOSE EQ b= atom_bool SEMI | BACKWARDCOMP EQ b= atom_bool SEMI );
 */
void
gEconParser::opt()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    bool b;
    typedef	bool RETURN_TYPE_b;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:80:5: ( OUTPUT opt_output | VERBOSE EQ b= atom_bool SEMI | BACKWARDCOMP EQ b= atom_bool SEMI )

            ANTLR_UINT32 alt7;

            alt7=3;

            switch ( this->LA(1) )
            {
            case OUTPUT:
            	{
            		alt7=1;
            	}
                break;
            case VERBOSE:
            	{
            		alt7=2;
            	}
                break;
            case BACKWARDCOMP:
            	{
            		alt7=3;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 7 );
                ex->set_state( 0 );


                goto ruleoptEx;

            }

            switch (alt7)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:80:7: OUTPUT opt_output
        	    {
        	         this->matchToken(OUTPUT, &FOLLOW_OUTPUT_in_opt144);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }


        	        this->followPush(FOLLOW_opt_output_in_opt146);
        	        opt_output();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:81:7: VERBOSE EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(VERBOSE, &FOLLOW_VERBOSE_in_opt154);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt156);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt162);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }


        	        {
        	             model_obj.set_option(Model::verbose, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt166);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:82:7: BACKWARDCOMP EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(BACKWARDCOMP, &FOLLOW_BACKWARDCOMP_in_opt174);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt176);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt182);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }


        	        {
        	             model_obj.set_option(Model::backwardcomp, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt186);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoptEx; /* Prevent compiler warnings */
    ruleoptEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end opt */

/**
 * $ANTLR start opt_output
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:85:1: opt_output : ( LOGF EQ b= atom_bool SEMI | R opt_output_R | LATEX opt_output_latex );
 */
void
gEconParser::opt_output()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    bool b;
    typedef	bool RETURN_TYPE_b;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:86:5: ( LOGF EQ b= atom_bool SEMI | R opt_output_R | LATEX opt_output_latex )

            ANTLR_UINT32 alt8;

            alt8=3;

            switch ( this->LA(1) )
            {
            case LOGF:
            	{
            		alt8=1;
            	}
                break;
            case R:
            	{
            		alt8=2;
            	}
                break;
            case LATEX:
            	{
            		alt8=3;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 8 );
                ex->set_state( 0 );


                goto ruleopt_outputEx;

            }

            switch (alt8)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:86:7: LOGF EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(LOGF, &FOLLOW_LOGF_in_opt_output203);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_outputEx;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt_output205);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_outputEx;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt_output211);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_outputEx;
        	        }


        	        {
        	             model_obj.set_option(Model::output_logf, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt_output215);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_outputEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:87:7: R opt_output_R
        	    {
        	         this->matchToken(R, &FOLLOW_R_in_opt_output223);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_outputEx;
        	        }


        	        this->followPush(FOLLOW_opt_output_R_in_opt_output225);
        	        opt_output_R();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_outputEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:88:7: LATEX opt_output_latex
        	    {
        	         this->matchToken(LATEX, &FOLLOW_LATEX_in_opt_output233);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_outputEx;
        	        }


        	        this->followPush(FOLLOW_opt_output_latex_in_opt_output235);
        	        opt_output_latex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_outputEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleopt_outputEx; /* Prevent compiler warnings */
    ruleopt_outputEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end opt_output */

/**
 * $ANTLR start opt_output_R
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:91:1: opt_output_R : ( EQ b= atom_bool SEMI | LONG EQ b= atom_bool SEMI | JACOBIAN EQ b= atom_bool SEMI );
 */
void
gEconParser::opt_output_R()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    bool b;
    typedef	bool RETURN_TYPE_b;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:92:5: ( EQ b= atom_bool SEMI | LONG EQ b= atom_bool SEMI | JACOBIAN EQ b= atom_bool SEMI )

            ANTLR_UINT32 alt9;

            alt9=3;

            switch ( this->LA(1) )
            {
            case EQ:
            	{
            		alt9=1;
            	}
                break;
            case LONG:
            	{
            		alt9=2;
            	}
                break;
            case JACOBIAN:
            	{
            		alt9=3;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 9 );
                ex->set_state( 0 );


                goto ruleopt_output_REx;

            }

            switch (alt9)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:92:7: EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt_output_R252);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_REx;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt_output_R258);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_REx;
        	        }


        	        {
        	             model_obj.set_option(Model::output_r, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt_output_R262);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_REx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:93:7: LONG EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(LONG, &FOLLOW_LONG_in_opt_output_R270);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_REx;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt_output_R272);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_REx;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt_output_R278);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_REx;
        	        }


        	        {
        	             model_obj.set_option(Model::output_r_long, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt_output_R282);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_REx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:94:7: JACOBIAN EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(JACOBIAN, &FOLLOW_JACOBIAN_in_opt_output_R290);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_REx;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt_output_R292);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_REx;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt_output_R298);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_REx;
        	        }


        	        {
        	             model_obj.set_option(Model::output_r_jacobian, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt_output_R302);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_REx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleopt_output_REx; /* Prevent compiler warnings */
    ruleopt_output_REx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end opt_output_R */

/**
 * $ANTLR start opt_output_latex
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:97:1: opt_output_latex : ( EQ b= atom_bool SEMI | LONG EQ b= atom_bool SEMI | LANDSCAPE EQ b= atom_bool SEMI );
 */
void
gEconParser::opt_output_latex()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    bool b;
    typedef	bool RETURN_TYPE_b;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:98:5: ( EQ b= atom_bool SEMI | LONG EQ b= atom_bool SEMI | LANDSCAPE EQ b= atom_bool SEMI )

            ANTLR_UINT32 alt10;

            alt10=3;

            switch ( this->LA(1) )
            {
            case EQ:
            	{
            		alt10=1;
            	}
                break;
            case LONG:
            	{
            		alt10=2;
            	}
                break;
            case LANDSCAPE:
            	{
            		alt10=3;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 10 );
                ex->set_state( 0 );


                goto ruleopt_output_latexEx;

            }

            switch (alt10)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:98:7: EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt_output_latex319);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_latexEx;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt_output_latex325);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_latexEx;
        	        }


        	        {
        	             model_obj.set_option(Model::output_latex, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt_output_latex329);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_latexEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:99:7: LONG EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(LONG, &FOLLOW_LONG_in_opt_output_latex337);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_latexEx;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt_output_latex339);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_latexEx;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt_output_latex345);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_latexEx;
        	        }


        	        {
        	             model_obj.set_option(Model::output_latex_long, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt_output_latex349);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_latexEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:100:7: LANDSCAPE EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(LANDSCAPE, &FOLLOW_LANDSCAPE_in_opt_output_latex357);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_latexEx;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt_output_latex359);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_latexEx;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt_output_latex365);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_latexEx;
        	        }


        	        {
        	             model_obj.set_option(Model::output_latex_landscape, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt_output_latex369);
        	        if  (this->hasException())
        	        {
        	            goto ruleopt_output_latexEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleopt_output_latexEx; /* Prevent compiler warnings */
    ruleopt_output_latexEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end opt_output_latex */

/**
 * $ANTLR start sets
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:103:1: sets : SETS LBRACE ( seteq | setvalid )+ RBRACE ( SEMI )? ;
 */
void
gEconParser::sets()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:104:5: ( SETS LBRACE ( seteq | setvalid )+ RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:104:7: SETS LBRACE ( seteq | setvalid )+ RBRACE ( SEMI )?
        {
             this->matchToken(SETS, &FOLLOW_SETS_in_sets386);
            if  (this->hasException())
            {
                goto rulesetsEx;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_sets388);
            if  (this->hasException())
            {
                goto rulesetsEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:104:19: ( seteq | setvalid )+
            {
                int cnt11=0;

                for (;;)
                {
                    int alt11=3;
            	switch ( this->LA(1) )
            	{
            	case ID:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case SLETTER:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case CLETTER:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case OUTPUT:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case R:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case LATEX:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case LANDSCAPE:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case LOGF:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case LONG:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case SHORT:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case BTRUE:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case BFALSE:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case SS:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case VERBOSE:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case BACKWARDCOMP:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case JACOBIAN:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt11=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt11=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case LBRACE:
            	case LPAREN:
            	case QUOTE:
            	case ZERO:
            		{
            			alt11=2;
            		}
            	    break;

            	}

            	switch (alt11)
            	{
            	    case 1:
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:104:20: seteq
            	        {
            	            this->followPush(FOLLOW_seteq_in_sets391);
            	            seteq();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulesetsEx;
            	            }


            	        }
            	        break;
            	    case 2:
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:104:28: setvalid
            	        {
            	            this->followPush(FOLLOW_setvalid_in_sets395);
            	            setvalid();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulesetsEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt11 >= 1 )
            		{
            		    goto loop11;
            		}
            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< gEconParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulesetsEx;
            	}
            	cnt11++;
                }
                loop11: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_sets399);
            if  (this->hasException())
            {
                goto rulesetsEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:104:46: ( SEMI )?
            {
                int alt12=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt12=1;
                    	}
                        break;
                }

                switch (alt12)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:104:46: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_sets401);
            	        if  (this->hasException())
            	        {
            	            goto rulesetsEx;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulesetsEx; /* Prevent compiler warnings */
    rulesetsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end sets */

/**
 * $ANTLR start seteq
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:107:1: seteq : ids= id_str EQ s= setex SEMI ;
 */
void
gEconParser::seteq()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    std::pair<std::string, int> ids;
    typedef	std::pair<std::string, int> RETURN_TYPE_ids;

    idx_set s;
    typedef	idx_set RETURN_TYPE_s;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:108:5: (ids= id_str EQ s= setex SEMI )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:108:7: ids= id_str EQ s= setex SEMI
        {
            this->followPush(FOLLOW_id_str_in_seteq423);
            ids=id_str();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleseteqEx;
            }


             this->matchToken(EQ, &FOLLOW_EQ_in_seteq425);
            if  (this->hasException())
            {
                goto ruleseteqEx;
            }


            this->followPush(FOLLOW_setex_in_seteq431);
            s=setex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleseteqEx;
            }


             this->matchToken(SEMI, &FOLLOW_SEMI_in_seteq433);
            if  (this->hasException())
            {
                goto ruleseteqEx;
            }


            {

                        if (!model_obj.add_set(idx_set(s, ids.first)))
                            model_obj.error("set \"" + ids.first + "\" already declared"
                                            + "; error near line " + num2str(ids.second));
                      
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleseteqEx; /* Prevent compiler warnings */
    ruleseteqEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end seteq */

/**
 * $ANTLR start setvalid
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:115:1: setvalid : a= setex ( LEQ | DEQ | NEQ ) b= setex QUESTION ;
 */
void
gEconParser::setvalid()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    QUESTION1;
    idx_set a;
    typedef	idx_set RETURN_TYPE_a;

    idx_set b;
    typedef	idx_set RETURN_TYPE_b;

    /* Initialize rule variables
     */


        bool ok;
        int test;

    QUESTION1       = NULL;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:120:5: (a= setex ( LEQ | DEQ | NEQ ) b= setex QUESTION )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:120:7: a= setex ( LEQ | DEQ | NEQ ) b= setex QUESTION
        {
            this->followPush(FOLLOW_setex_in_setvalid461);
            a=setex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesetvalidEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:120:17: ( LEQ | DEQ | NEQ )
            {
                int alt13=3;
                switch ( this->LA(1) )
                {
                case LEQ:
                	{
                		alt13=1;
                	}
                    break;
                case DEQ:
                	{
                		alt13=2;
                	}
                    break;
                case NEQ:
                	{
                		alt13=3;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 13 );
                    ex->set_state( 0 );


                    goto rulesetvalidEx;

                }

                switch (alt13)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:120:18: LEQ
            	    {
            	         this->matchToken(LEQ, &FOLLOW_LEQ_in_setvalid464);
            	        if  (this->hasException())
            	        {
            	            goto rulesetvalidEx;
            	        }


            	        {
            	             test = 1; 
            	        }


            	    }
            	    break;
            	case 2:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:120:38: DEQ
            	    {
            	         this->matchToken(DEQ, &FOLLOW_DEQ_in_setvalid470);
            	        if  (this->hasException())
            	        {
            	            goto rulesetvalidEx;
            	        }


            	        {
            	             test = 2; 
            	        }


            	    }
            	    break;
            	case 3:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:120:58: NEQ
            	    {
            	         this->matchToken(NEQ, &FOLLOW_NEQ_in_setvalid476);
            	        if  (this->hasException())
            	        {
            	            goto rulesetvalidEx;
            	        }


            	        {
            	             test = 3; 
            	        }


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_setex_in_setvalid485);
            b=setex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesetvalidEx;
            }


            QUESTION1 =  this->matchToken(QUESTION, &FOLLOW_QUESTION_in_setvalid487);
            if  (this->hasException())
            {
                goto rulesetvalidEx;
            }


            {

                        switch (test) {
                            case 1: ok = (a <= b); break;
                            case 2: ok = (a == b); break;
                            case 3: ok = (a != b); break;
                        }
                        if (!ok) {
                            std::string mes = "index set test failed (";
                            switch (test) {
                                case 1: mes += "lhs is not a subset of rhs"; break;
                                case 2: mes += "sets are not equal"; break;
                                case 3: mes += "sets are equal"; break;
                            }
                            mes += ") near line " + num2str((QUESTION1->get_line()));
                            model_obj.error(mes);
                        }
                      
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesetvalidEx; /* Prevent compiler warnings */
    rulesetvalidEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end setvalid */

/**
 * $ANTLR start setex
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:139:1: setex returns [idx_set is] : s= setex_add ;
 */
idx_set
gEconParser::setex()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    idx_set is;


    idx_set s;
    typedef	idx_set RETURN_TYPE_s;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:140:5: (s= setex_add )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:140:7: s= setex_add
        {
            this->followPush(FOLLOW_setex_add_in_setex513);
            s=setex_add();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesetexEx;
            }


            {
                 is= s;
                 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesetexEx; /* Prevent compiler warnings */
    rulesetexEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return is;
}
/* $ANTLR end setex */

/**
 * $ANTLR start setex_add
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:143:1: setex_add returns [idx_set is] : a= setex_intersect ( ( OR b= setex_intersect ) | ( BACKSLASH b= setex_intersect ) )* ;
 */
idx_set
gEconParser::setex_add()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    idx_set is;


    idx_set a;
    typedef	idx_set RETURN_TYPE_a;

    idx_set b;
    typedef	idx_set RETURN_TYPE_b;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:144:5: (a= setex_intersect ( ( OR b= setex_intersect ) | ( BACKSLASH b= setex_intersect ) )* )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:144:7: a= setex_intersect ( ( OR b= setex_intersect ) | ( BACKSLASH b= setex_intersect ) )*
        {
            this->followPush(FOLLOW_setex_intersect_in_setex_add540);
            a=setex_intersect();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesetex_addEx;
            }


            {
                 is= a;
                 
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:145:9: ( ( OR b= setex_intersect ) | ( BACKSLASH b= setex_intersect ) )*

            for (;;)
            {
                int alt14=3;
                switch ( this->LA(1) )
                {
                case OR:
                	{
                		alt14=1;
                	}
                    break;
                case BACKSLASH:
                	{
                		alt14=2;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:145:10: ( OR b= setex_intersect )
            	    {
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:145:10: ( OR b= setex_intersect )
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:145:11: OR b= setex_intersect
            	        {
            	             this->matchToken(OR, &FOLLOW_OR_in_setex_add554);
            	            if  (this->hasException())
            	            {
            	                goto rulesetex_addEx;
            	            }


            	            this->followPush(FOLLOW_setex_intersect_in_setex_add560);
            	            b=setex_intersect();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulesetex_addEx;
            	            }


            	            {
            	                 is= 
            	                is
            	                .set_sum(b);
            	                 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:146:11: ( BACKSLASH b= setex_intersect )
            	    {
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:146:11: ( BACKSLASH b= setex_intersect )
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:146:12: BACKSLASH b= setex_intersect
            	        {
            	             this->matchToken(BACKSLASH, &FOLLOW_BACKSLASH_in_setex_add576);
            	            if  (this->hasException())
            	            {
            	                goto rulesetex_addEx;
            	            }


            	            this->followPush(FOLLOW_setex_intersect_in_setex_add582);
            	            b=setex_intersect();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulesetex_addEx;
            	            }


            	            {
            	                 is= 
            	                is
            	                .set_diff(b);
            	                 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesetex_addEx; /* Prevent compiler warnings */
    rulesetex_addEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return is;
}
/* $ANTLR end setex_add */

/**
 * $ANTLR start setex_intersect
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:149:1: setex_intersect returns [idx_set is] : a= setex_cat ( AND b= setex_cat )* ;
 */
idx_set
gEconParser::setex_intersect()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    idx_set is;


    idx_set a;
    typedef	idx_set RETURN_TYPE_a;

    idx_set b;
    typedef	idx_set RETURN_TYPE_b;

    /* Initialize rule variables
     */


        a = idx_set("");
        b = idx_set("");


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:154:5: (a= setex_cat ( AND b= setex_cat )* )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:154:7: a= setex_cat ( AND b= setex_cat )*
        {
            this->followPush(FOLLOW_setex_cat_in_setex_intersect617);
            a=setex_cat();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesetex_intersectEx;
            }


            {
                 is= a;
                 
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:154:34: ( AND b= setex_cat )*

            for (;;)
            {
                int alt15=2;
                switch ( this->LA(1) )
                {
                case AND:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:154:35: AND b= setex_cat
            	    {
            	         this->matchToken(AND, &FOLLOW_AND_in_setex_intersect622);
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_intersectEx;
            	        }


            	        this->followPush(FOLLOW_setex_cat_in_setex_intersect628);
            	        b=setex_cat();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_intersectEx;
            	        }


            	        {
            	             is= 
            	            is
            	            .set_intersect(b);
            	             
            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesetex_intersectEx; /* Prevent compiler warnings */
    rulesetex_intersectEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return is;
}
/* $ANTLR end setex_intersect */

/**
 * $ANTLR start setex_cat
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:157:1: setex_cat returns [idx_set is] : ( QUOTE ( IDU | DIDU |idxp= idx_str ) QUOTE TILDE )? a= setex_atom ( TILDE QUOTE ( UID | UDID |idxs= idx_str ) QUOTE )? ;
 */
idx_set
gEconParser::setex_cat()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    idx_set is;


    const CommonTokenType*    IDU2;
    const CommonTokenType*    DIDU3;
    const CommonTokenType*    UID4;
    const CommonTokenType*    UDID5;
    std::pair<std::string, int> idxp;
    typedef	std::pair<std::string, int> RETURN_TYPE_idxp;

    idx_set a;
    typedef	idx_set RETURN_TYPE_a;

    std::pair<std::string, int> idxs;
    typedef	std::pair<std::string, int> RETURN_TYPE_idxs;

    /* Initialize rule variables
     */


        a = idx_set("");
        std::string pre, suf;

    IDU2       = NULL;
    DIDU3       = NULL;
    UID4       = NULL;
    UDID5       = NULL;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:162:5: ( ( QUOTE ( IDU | DIDU |idxp= idx_str ) QUOTE TILDE )? a= setex_atom ( TILDE QUOTE ( UID | UDID |idxs= idx_str ) QUOTE )? )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:162:7: ( QUOTE ( IDU | DIDU |idxp= idx_str ) QUOTE TILDE )? a= setex_atom ( TILDE QUOTE ( UID | UDID |idxs= idx_str ) QUOTE )?
        {
            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:162:7: ( QUOTE ( IDU | DIDU |idxp= idx_str ) QUOTE TILDE )?
            {
                int alt17=2;
                switch ( this->LA(1) )
                {
                    case QUOTE:
                    	{
                    		alt17=1;
                    	}
                        break;
                }

                switch (alt17)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:162:8: QUOTE ( IDU | DIDU |idxp= idx_str ) QUOTE TILDE
            	    {
            	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_setex_cat659);
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_catEx;
            	        }


            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:162:14: ( IDU | DIDU |idxp= idx_str )
            	        {
            	            int alt16=3;
            	            switch ( this->LA(1) )
            	            {
            	            case IDU:
            	            	{
            	            		alt16=1;
            	            	}
            	                break;
            	            case DIDU:
            	            	{
            	            		alt16=2;
            	            	}
            	                break;
            	            case BACKWARDCOMP:
            	            case BFALSE:
            	            case BTRUE:
            	            case CLETTER:
            	            case DID:
            	            case E:
            	            case ID:
            	            case INF:
            	            case INT:
            	            case JACOBIAN:
            	            case LANDSCAPE:
            	            case LATEX:
            	            case LOGF:
            	            case LONG:
            	            case OUTPUT:
            	            case R:
            	            case SHORT:
            	            case SLETTER:
            	            case SS:
            	            case VERBOSE:
            	            case ZERO:
            	            	{
            	            		alt16=3;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 16 );
            	                ex->set_state( 0 );


            	                goto rulesetex_catEx;

            	            }

            	            switch (alt16)
            	            {
            	        	case 1:
            	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:162:15: IDU
            	        	    {
            	        	        IDU2 =  this->matchToken(IDU, &FOLLOW_IDU_in_setex_cat662);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesetex_catEx;
            	        	        }


            	        	        {
            	        	             pre = (IDU2->getText()); 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:162:43: DIDU
            	        	    {
            	        	        DIDU3 =  this->matchToken(DIDU, &FOLLOW_DIDU_in_setex_cat669);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesetex_catEx;
            	        	        }


            	        	        {
            	        	             pre = (DIDU3->getText()); 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:162:73: idxp= idx_str
            	        	    {
            	        	        this->followPush(FOLLOW_idx_str_in_setex_cat680);
            	        	        idxp=idx_str();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesetex_catEx;
            	        	        }


            	        	        {
            	        	             pre = idxp.first; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_setex_cat685);
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_catEx;
            	        }


            	         this->matchToken(TILDE, &FOLLOW_TILDE_in_setex_cat687);
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_catEx;
            	        }


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_setex_atom_in_setex_cat695);
            a=setex_atom();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesetex_catEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:163:7: ( TILDE QUOTE ( UID | UDID |idxs= idx_str ) QUOTE )?
            {
                int alt19=2;
                switch ( this->LA(1) )
                {
                    case TILDE:
                    	{
                    		alt19=1;
                    	}
                        break;
                }

                switch (alt19)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:163:8: TILDE QUOTE ( UID | UDID |idxs= idx_str ) QUOTE
            	    {
            	         this->matchToken(TILDE, &FOLLOW_TILDE_in_setex_cat704);
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_catEx;
            	        }


            	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_setex_cat706);
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_catEx;
            	        }


            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:163:20: ( UID | UDID |idxs= idx_str )
            	        {
            	            int alt18=3;
            	            switch ( this->LA(1) )
            	            {
            	            case UID:
            	            	{
            	            		alt18=1;
            	            	}
            	                break;
            	            case UDID:
            	            	{
            	            		alt18=2;
            	            	}
            	                break;
            	            case BACKWARDCOMP:
            	            case BFALSE:
            	            case BTRUE:
            	            case CLETTER:
            	            case DID:
            	            case E:
            	            case ID:
            	            case INF:
            	            case INT:
            	            case JACOBIAN:
            	            case LANDSCAPE:
            	            case LATEX:
            	            case LOGF:
            	            case LONG:
            	            case OUTPUT:
            	            case R:
            	            case SHORT:
            	            case SLETTER:
            	            case SS:
            	            case VERBOSE:
            	            case ZERO:
            	            	{
            	            		alt18=3;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 18 );
            	                ex->set_state( 0 );


            	                goto rulesetex_catEx;

            	            }

            	            switch (alt18)
            	            {
            	        	case 1:
            	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:163:21: UID
            	        	    {
            	        	        UID4 =  this->matchToken(UID, &FOLLOW_UID_in_setex_cat709);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesetex_catEx;
            	        	        }


            	        	        {
            	        	             suf = (UID4->getText()); 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:163:48: UDID
            	        	    {
            	        	        UDID5 =  this->matchToken(UDID, &FOLLOW_UDID_in_setex_cat715);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesetex_catEx;
            	        	        }


            	        	        {
            	        	             suf = (UDID5->getText()); 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:163:77: idxs= idx_str
            	        	    {
            	        	        this->followPush(FOLLOW_idx_str_in_setex_cat725);
            	        	        idxs=idx_str();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesetex_catEx;
            	        	        }


            	        	        {
            	        	             suf = idxs.first; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_setex_cat730);
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_catEx;
            	        }


            	    }
            	    break;

                }
            }

            {
                 is= a.prefix(pre).suffix(suf);
                 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesetex_catEx; /* Prevent compiler warnings */
    rulesetex_catEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return is;
}
/* $ANTLR end setex_cat */

/**
 * $ANTLR start setex_atom
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:166:1: setex_atom returns [idx_set is] : (a= set | LPAREN a= setex RPAREN );
 */
idx_set
gEconParser::setex_atom()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    idx_set is;


    idx_set a;
    typedef	idx_set RETURN_TYPE_a;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:167:5: (a= set | LPAREN a= setex RPAREN )

            ANTLR_UINT32 alt20;

            alt20=2;

            switch ( this->LA(1) )
            {
            case BACKWARDCOMP:
            case BFALSE:
            case BTRUE:
            case CLETTER:
            case ID:
            case JACOBIAN:
            case LANDSCAPE:
            case LATEX:
            case LBRACE:
            case LOGF:
            case LONG:
            case OUTPUT:
            case R:
            case SHORT:
            case SLETTER:
            case SS:
            case VERBOSE:
            case ZERO:
            	{
            		alt20=1;
            	}
                break;
            case LPAREN:
            	{
            		alt20=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 20 );
                ex->set_state( 0 );


                goto rulesetex_atomEx;

            }

            switch (alt20)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:167:7: a= set
        	    {
        	        this->followPush(FOLLOW_set_in_setex_atom759);
        	        a=set();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesetex_atomEx;
        	        }


        	        {
        	             is= a;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:168:7: LPAREN a= setex RPAREN
        	    {
        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_setex_atom769);
        	        if  (this->hasException())
        	        {
        	            goto rulesetex_atomEx;
        	        }


        	        this->followPush(FOLLOW_setex_in_setex_atom775);
        	        a=setex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesetex_atomEx;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_setex_atom777);
        	        if  (this->hasException())
        	        {
        	            goto rulesetex_atomEx;
        	        }


        	        {
        	             is= a;
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulesetex_atomEx; /* Prevent compiler warnings */
    rulesetex_atomEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return is;
}
/* $ANTLR end setex_atom */

/**
 * $ANTLR start set
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:171:1: set returns [idx_set iset] : ( ZERO |is= id_str | LBRACE ls= list_set RBRACE | LBRACE seq= seq_set RBRACE );
 */
idx_set
gEconParser::set()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    idx_set iset;


    std::pair<std::string, int> is;
    typedef	std::pair<std::string, int> RETURN_TYPE_is;

    vec_strint ls;
    typedef	vec_strint RETURN_TYPE_ls;

    triplet<bool, unsigned, unsigned> seq;
    typedef	triplet<bool, unsigned, unsigned> RETURN_TYPE_seq;

    /* Initialize rule variables
     */


        iset = idx_set("");


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:175:5: ( ZERO |is= id_str | LBRACE ls= list_set RBRACE | LBRACE seq= seq_set RBRACE )

            ANTLR_UINT32 alt21;

            alt21=4;

            switch ( this->LA(1) )
            {
            case ZERO:
            	{
            		alt21=1;
            	}
                break;
            case BACKWARDCOMP:
            case BFALSE:
            case BTRUE:
            case CLETTER:
            case ID:
            case JACOBIAN:
            case LANDSCAPE:
            case LATEX:
            case LOGF:
            case LONG:
            case OUTPUT:
            case R:
            case SHORT:
            case SLETTER:
            case SS:
            case VERBOSE:
            	{
            		alt21=2;
            	}
                break;
            case LBRACE:
            	{
            		switch ( this->LA(2) )
            		{
            		case QUOTE:
            			{
            				switch ( this->LA(3) )
            				{
            				case SLETTER:
            					{
            						switch ( this->LA(4) )
            						{
            						case QUOTE:
            							{
            								switch ( this->LA(5) )
            								{
            								case DDOT:
            									{
            										alt21=4;
            									}
            								    break;
            								case COMMA:
            								case RBRACE:
            									{
            										alt21=3;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 21 );
            								    ex->set_state( 12 );


            								    goto rulesetEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 21 );
            						    ex->set_state( 5 );


            						    goto rulesetEx;

            						}

            					}
            				    break;
            				case BACKWARDCOMP:
            				case BFALSE:
            				case BTRUE:
            				case DID:
            				case ID:
            				case INF:
            				case JACOBIAN:
            				case LANDSCAPE:
            				case LATEX:
            				case LOGF:
            				case LONG:
            				case OUTPUT:
            				case SHORT:
            				case SS:
            				case VERBOSE:
            					{
            						alt21=3;
            					}
            				    break;
            				case CLETTER:
            					{
            						switch ( this->LA(4) )
            						{
            						case QUOTE:
            							{
            								switch ( this->LA(5) )
            								{
            								case DDOT:
            									{
            										alt21=4;
            									}
            								    break;
            								case COMMA:
            								case RBRACE:
            									{
            										alt21=3;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 21 );
            								    ex->set_state( 13 );


            								    goto rulesetEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 21 );
            						    ex->set_state( 7 );


            						    goto rulesetEx;

            						}

            					}
            				    break;
            				case R:
            					{
            						switch ( this->LA(4) )
            						{
            						case QUOTE:
            							{
            								switch ( this->LA(5) )
            								{
            								case DDOT:
            									{
            										alt21=4;
            									}
            								    break;
            								case COMMA:
            								case RBRACE:
            									{
            										alt21=3;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 21 );
            								    ex->set_state( 13 );


            								    goto rulesetEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 21 );
            						    ex->set_state( 8 );


            						    goto rulesetEx;

            						}

            					}
            				    break;
            				case E:
            					{
            						switch ( this->LA(4) )
            						{
            						case QUOTE:
            							{
            								switch ( this->LA(5) )
            								{
            								case DDOT:
            									{
            										alt21=4;
            									}
            								    break;
            								case COMMA:
            								case RBRACE:
            									{
            										alt21=3;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 21 );
            								    ex->set_state( 13 );


            								    goto rulesetEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 21 );
            						    ex->set_state( 9 );


            						    goto rulesetEx;

            						}

            					}
            				    break;
            				case ZERO:
            					{
            						switch ( this->LA(4) )
            						{
            						case QUOTE:
            							{
            								switch ( this->LA(5) )
            								{
            								case DDOT:
            									{
            										alt21=4;
            									}
            								    break;
            								case COMMA:
            								case RBRACE:
            									{
            										alt21=3;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 21 );
            								    ex->set_state( 14 );


            								    goto rulesetEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 21 );
            						    ex->set_state( 10 );


            						    goto rulesetEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case QUOTE:
            							{
            								switch ( this->LA(5) )
            								{
            								case DDOT:
            									{
            										alt21=4;
            									}
            								    break;
            								case COMMA:
            								case RBRACE:
            									{
            										alt21=3;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 21 );
            								    ex->set_state( 14 );


            								    goto rulesetEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 21 );
            						    ex->set_state( 11 );


            						    goto rulesetEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 21 );
            				    ex->set_state( 4 );


            				    goto rulesetEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 21 );
            		    ex->set_state( 3 );


            		    goto rulesetEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 21 );
                ex->set_state( 0 );


                goto rulesetEx;

            }

            switch (alt21)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:175:7: ZERO
        	    {
        	         this->matchToken(ZERO, &FOLLOW_ZERO_in_set805);
        	        if  (this->hasException())
        	        {
        	            goto rulesetEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:176:7: is= id_str
        	    {
        	        this->followPush(FOLLOW_id_str_in_set817);
        	        is=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesetEx;
        	        }


        	        {

        	                    if (!model_obj.is_set(is.first))
        	                        model_obj.error("undefined set \"" + is.first + "\" used in expression; error near line "
        	                                        + num2str(is.second));
        	                    iset = model_obj.get_set(is.first);
        	                  
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:182:7: LBRACE ls= list_set RBRACE
        	    {
        	         this->matchToken(LBRACE, &FOLLOW_LBRACE_in_set827);
        	        if  (this->hasException())
        	        {
        	            goto rulesetEx;
        	        }


        	        this->followPush(FOLLOW_list_set_in_set833);
        	        ls=list_set();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesetEx;
        	        }


        	        {

        	                    vec_strint::const_iterator it = ls.begin();
        	                    for (; it != ls.end(); ++it) {
        	                        if (!iset.add(it->first))
        	                            model_obj.error("element \"" + it->first + "\" already present in the set"
        	                                + "; error near line " + num2str(it->second));
        	                    }
        	                  
        	        }


        	         this->matchToken(RBRACE, &FOLLOW_RBRACE_in_set837);
        	        if  (this->hasException())
        	        {
        	            goto rulesetEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:190:7: LBRACE seq= seq_set RBRACE
        	    {
        	         this->matchToken(LBRACE, &FOLLOW_LBRACE_in_set845);
        	        if  (this->hasException())
        	        {
        	            goto rulesetEx;
        	        }


        	        this->followPush(FOLLOW_seq_set_in_set851);
        	        seq=seq_set();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesetEx;
        	        }


        	        {

        	                    if (seq.first) {
        	                        for (char i = seq.second; i <= (char) seq.third; ++i)
        	                            iset.add(std::string() = i);
        	                    } else {
        	                        for (unsigned i = seq.second; i <= seq.third; ++i)
        	                            iset.add(num2str(i));
        	                    }
        	                  
        	        }


        	         this->matchToken(RBRACE, &FOLLOW_RBRACE_in_set855);
        	        if  (this->hasException())
        	        {
        	            goto rulesetEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulesetEx; /* Prevent compiler warnings */
    rulesetEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return iset;
}
/* $ANTLR end set */

/**
 * $ANTLR start list_set
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:201:1: list_set returns [vec_strint vsi] : QUOTE ids= idx_str QUOTE ( COMMA QUOTE ids= idx_str QUOTE )* ;
 */
vec_strint
gEconParser::list_set()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vec_strint vsi;


    std::pair<std::string, int> ids;
    typedef	std::pair<std::string, int> RETURN_TYPE_ids;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:202:5: ( QUOTE ids= idx_str QUOTE ( COMMA QUOTE ids= idx_str QUOTE )* )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:202:8: QUOTE ids= idx_str QUOTE ( COMMA QUOTE ids= idx_str QUOTE )*
        {
             this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_set877);
            if  (this->hasException())
            {
                goto rulelist_setEx;
            }


            this->followPush(FOLLOW_idx_str_in_list_set883);
            ids=idx_str();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_setEx;
            }


             this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_set885);
            if  (this->hasException())
            {
                goto rulelist_setEx;
            }


            {
                 vsi.push_back(strint(ids.first, ids.second)); 
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:203:7: ( COMMA QUOTE ids= idx_str QUOTE )*

            for (;;)
            {
                int alt22=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt22=1;
                	}
                    break;

                }

                switch (alt22)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:203:8: COMMA QUOTE ids= idx_str QUOTE
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_list_set896);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_setEx;
            	        }


            	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_set898);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_setEx;
            	        }


            	        this->followPush(FOLLOW_idx_str_in_list_set904);
            	        ids=idx_str();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_setEx;
            	        }


            	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_set906);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_setEx;
            	        }


            	        {
            	             vsi.push_back(strint(ids.first, ids.second)); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop22;	/* break out of the loop */
            	    break;
                }
            }
            loop22: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_setEx; /* Prevent compiler warnings */
    rulelist_setEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return vsi;
}
/* $ANTLR end list_set */

/**
 * $ANTLR start seq_set
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:206:1: seq_set returns [triplet<bool, unsigned, unsigned> seq] : ( QUOTE beg= SLETTER QUOTE DDOT QUOTE end= SLETTER QUOTE | QUOTE begc= capletter QUOTE DDOT QUOTE endc= capletter QUOTE | QUOTE begi= atom_int QUOTE DDOT QUOTE endi= atom_int QUOTE );
 */
triplet<bool, unsigned, unsigned>
gEconParser::seq_set()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    triplet<bool, unsigned, unsigned> seq;


    const CommonTokenType*    beg;
    const CommonTokenType*    end;
    const CommonTokenType*    DDOT6;
    const CommonTokenType*    DDOT7;
    const CommonTokenType*    DDOT8;
    unsigned begc;
    typedef	unsigned RETURN_TYPE_begc;

    unsigned endc;
    typedef	unsigned RETURN_TYPE_endc;

    int begi;
    typedef	int RETURN_TYPE_begi;

    int endi;
    typedef	int RETURN_TYPE_endi;

    /* Initialize rule variables
     */

    beg       = NULL;
    end       = NULL;
    DDOT6       = NULL;
    DDOT7       = NULL;
    DDOT8       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:207:5: ( QUOTE beg= SLETTER QUOTE DDOT QUOTE end= SLETTER QUOTE | QUOTE begc= capletter QUOTE DDOT QUOTE endc= capletter QUOTE | QUOTE begi= atom_int QUOTE DDOT QUOTE endi= atom_int QUOTE )

            ANTLR_UINT32 alt23;

            alt23=3;

            switch ( this->LA(1) )
            {
            case QUOTE:
            	{
            		switch ( this->LA(2) )
            		{
            		case SLETTER:
            			{
            				alt23=1;
            			}
            		    break;
            		case CLETTER:
            		case E:
            		case R:
            			{
            				alt23=2;
            			}
            		    break;
            		case INT:
            		case ZERO:
            			{
            				alt23=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 23 );
            		    ex->set_state( 1 );


            		    goto ruleseq_setEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 23 );
                ex->set_state( 0 );


                goto ruleseq_setEx;

            }

            switch (alt23)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:207:7: QUOTE beg= SLETTER QUOTE DDOT QUOTE end= SLETTER QUOTE
        	    {
        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set931);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	        beg =  this->matchToken(SLETTER, &FOLLOW_SLETTER_in_seq_set937);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set939);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	        DDOT6 =  this->matchToken(DDOT, &FOLLOW_DDOT_in_seq_set941);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set943);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	        end =  this->matchToken(SLETTER, &FOLLOW_SLETTER_in_seq_set949);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set951);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	        {

        	                    seq.first = true; seq.second = (beg->getText())[0]; seq.third = (end->getText())[0];
        	                    if (seq.second > seq.third)
        	                        model_obj.error("decreasing sequence of elements in set; error near line "
        	                                        + num2str((DDOT6->get_line())));
        	                  
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:213:7: QUOTE begc= capletter QUOTE DDOT QUOTE endc= capletter QUOTE
        	    {
        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set961);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	        this->followPush(FOLLOW_capletter_in_seq_set967);
        	        begc=capletter();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set969);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	        DDOT7 =  this->matchToken(DDOT, &FOLLOW_DDOT_in_seq_set971);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set973);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	        this->followPush(FOLLOW_capletter_in_seq_set979);
        	        endc=capletter();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set981);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	        {

        	                    seq.first = true; seq.second = begc; seq.third = endc;
        	                    if (seq.second > seq.third)
        	                        model_obj.error("decreasing sequence of elements in set; error near line "
        	                                         + num2str((DDOT7->get_line())));
        	                  
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:219:7: QUOTE begi= atom_int QUOTE DDOT QUOTE endi= atom_int QUOTE
        	    {
        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set991);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	        this->followPush(FOLLOW_atom_int_in_seq_set997);
        	        begi=atom_int();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set999);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	        DDOT8 =  this->matchToken(DDOT, &FOLLOW_DDOT_in_seq_set1001);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set1003);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	        this->followPush(FOLLOW_atom_int_in_seq_set1009);
        	        endi=atom_int();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set1011);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }


        	        {

        	                    seq.first = false; seq.second = begi; seq.third = endi;
        	                    if (seq.second > seq.third)
        	                        model_obj.error("decreasing sequence of elements in set; error near line "
        	                                         + num2str((DDOT8->get_line())));
        	                  
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleseq_setEx; /* Prevent compiler warnings */
    ruleseq_setEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return seq;
}
/* $ANTLR end seq_set */

/**
 * $ANTLR start capletter
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:227:1: capletter returns [unsigned c] : ( CLETTER | E | R );
 */
unsigned
gEconParser::capletter()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    unsigned c;


    const CommonTokenType*    CLETTER9;

    /* Initialize rule variables
     */


        c= 0;


    CLETTER9       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:231:5: ( CLETTER | E | R )

            ANTLR_UINT32 alt24;

            alt24=3;

            switch ( this->LA(1) )
            {
            case CLETTER:
            	{
            		alt24=1;
            	}
                break;
            case E:
            	{
            		alt24=2;
            	}
                break;
            case R:
            	{
            		alt24=3;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 24 );
                ex->set_state( 0 );


                goto rulecapletterEx;

            }

            switch (alt24)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:231:7: CLETTER
        	    {
        	        CLETTER9 =  this->matchToken(CLETTER, &FOLLOW_CLETTER_in_capletter1039);
        	        if  (this->hasException())
        	        {
        	            goto rulecapletterEx;
        	        }


        	        {
        	             c= (CLETTER9->getText())[0];
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:232:7: E
        	    {
        	         this->matchToken(E, &FOLLOW_E_in_capletter1049);
        	        if  (this->hasException())
        	        {
        	            goto rulecapletterEx;
        	        }


        	        {
        	             c= 'E';
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:233:7: R
        	    {
        	         this->matchToken(R, &FOLLOW_R_in_capletter1059);
        	        if  (this->hasException())
        	        {
        	            goto rulecapletterEx;
        	        }


        	        {
        	             c= 'R';
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulecapletterEx; /* Prevent compiler warnings */
    rulecapletterEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return c;
}
/* $ANTLR end capletter */

/**
 * $ANTLR start tryreduce
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:237:1: tryreduce : TRYREDUCE LBRACE lv= list_livar RBRACE ( SEMI )? ;
 */
void
gEconParser::tryreduce()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    vec_exint lv;
    typedef	vec_exint RETURN_TYPE_lv;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:238:5: ( TRYREDUCE LBRACE lv= list_livar RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:238:7: TRYREDUCE LBRACE lv= list_livar RBRACE ( SEMI )?
        {
             this->matchToken(TRYREDUCE, &FOLLOW_TRYREDUCE_in_tryreduce1079);
            if  (this->hasException())
            {
                goto ruletryreduceEx;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_tryreduce1081);
            if  (this->hasException())
            {
                goto ruletryreduceEx;
            }


            this->followPush(FOLLOW_list_livar_in_tryreduce1087);
            lv=list_livar();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletryreduceEx;
            }


            {
                 model_obj.add_red_vars(lv); 
            }


             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_tryreduce1091);
            if  (this->hasException())
            {
                goto ruletryreduceEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:238:79: ( SEMI )?
            {
                int alt25=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt25=1;
                    	}
                        break;
                }

                switch (alt25)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:238:79: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_tryreduce1093);
            	        if  (this->hasException())
            	        {
            	            goto ruletryreduceEx;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruletryreduceEx; /* Prevent compiler warnings */
    ruletryreduceEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end tryreduce */

/**
 * $ANTLR start block
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:242:1: block : BLOCK lie= list_indexing_ex ids= id_str LBRACE ( block_definitions )? ( block_controls block_objective ( block_constraints )? ( block_identities )? | block_identities ) ( block_shocks )? ( block_calibr )? RBRACE ( SEMI )? ;
 */
void
gEconParser::block()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    std::pair<std::string, int> ids;
    typedef	std::pair<std::string, int> RETURN_TYPE_ids;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:243:5: ( BLOCK lie= list_indexing_ex ids= id_str LBRACE ( block_definitions )? ( block_controls block_objective ( block_constraints )? ( block_identities )? | block_identities ) ( block_shocks )? ( block_calibr )? RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:243:7: BLOCK lie= list_indexing_ex ids= id_str LBRACE ( block_definitions )? ( block_controls block_objective ( block_constraints )? ( block_identities )? | block_identities ) ( block_shocks )? ( block_calibr )? RBRACE ( SEMI )?
        {
             this->matchToken(BLOCK, &FOLLOW_BLOCK_in_block1112);
            if  (this->hasException())
            {
                goto ruleblockEx;
            }


            this->followPush(FOLLOW_list_indexing_ex_in_block1118);
            lie=list_indexing_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleblockEx;
            }


            this->followPush(FOLLOW_id_str_in_block1130);
            ids=id_str();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleblockEx;
            }


            {

                        if (model_obj.block_declared(ids.first)) {
                            model_obj.error("block \"" + ids.first + "\" already declared"
                                            + "; error near line " + num2str(ids.second));
                        }
                        model_obj.add_block(ids.first, ids.second, lie[0], lie[1]);
                      
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block1140);
            if  (this->hasException())
            {
                goto ruleblockEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:252:9: ( block_definitions )?
            {
                int alt26=2;
                switch ( this->LA(1) )
                {
                    case DEFS:
                    	{
                    		alt26=1;
                    	}
                        break;
                }

                switch (alt26)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:252:9: block_definitions
            	    {
            	        this->followPush(FOLLOW_block_definitions_in_block1150);
            	        block_definitions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleblockEx;
            	        }


            	    }
            	    break;

                }
            }

            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:253:9: ( block_controls block_objective ( block_constraints )? ( block_identities )? | block_identities )
            {
                int alt29=2;
                switch ( this->LA(1) )
                {
                case CONTROLS:
                	{
                		alt29=1;
                	}
                    break;
                case IDS:
                	{
                		alt29=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 29 );
                    ex->set_state( 0 );


                    goto ruleblockEx;

                }

                switch (alt29)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:253:10: block_controls block_objective ( block_constraints )? ( block_identities )?
            	    {
            	        this->followPush(FOLLOW_block_controls_in_block1162);
            	        block_controls();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleblockEx;
            	        }


            	        this->followPush(FOLLOW_block_objective_in_block1164);
            	        block_objective();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleblockEx;
            	        }


            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:253:41: ( block_constraints )?
            	        {
            	            int alt27=2;
            	            switch ( this->LA(1) )
            	            {
            	                case CONSTRAINTS:
            	                	{
            	                		alt27=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt27)
            	            {
            	        	case 1:
            	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:253:42: block_constraints
            	        	    {
            	        	        this->followPush(FOLLOW_block_constraints_in_block1167);
            	        	        block_constraints();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleblockEx;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:253:62: ( block_identities )?
            	        {
            	            int alt28=2;
            	            switch ( this->LA(1) )
            	            {
            	                case IDS:
            	                	{
            	                		alt28=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt28)
            	            {
            	        	case 1:
            	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:253:63: block_identities
            	        	    {
            	        	        this->followPush(FOLLOW_block_identities_in_block1172);
            	        	        block_identities();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleblockEx;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:254:11: block_identities
            	    {
            	        this->followPush(FOLLOW_block_identities_in_block1186);
            	        block_identities();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleblockEx;
            	        }


            	    }
            	    break;

                }
            }

            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:255:9: ( block_shocks )?
            {
                int alt30=2;
                switch ( this->LA(1) )
                {
                    case SHOCKS:
                    	{
                    		alt30=1;
                    	}
                        break;
                }

                switch (alt30)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:255:9: block_shocks
            	    {
            	        this->followPush(FOLLOW_block_shocks_in_block1197);
            	        block_shocks();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleblockEx;
            	        }


            	    }
            	    break;

                }
            }

            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:256:9: ( block_calibr )?
            {
                int alt31=2;
                switch ( this->LA(1) )
                {
                    case CALIBR:
                    	{
                    		alt31=1;
                    	}
                        break;
                }

                switch (alt31)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:256:9: block_calibr
            	    {
            	        this->followPush(FOLLOW_block_calibr_in_block1208);
            	        block_calibr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleblockEx;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block1217);
            if  (this->hasException())
            {
                goto ruleblockEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:257:14: ( SEMI )?
            {
                int alt32=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt32=1;
                    	}
                        break;
                }

                switch (alt32)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:257:14: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block1219);
            	        if  (this->hasException())
            	        {
            	            goto ruleblockEx;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblockEx; /* Prevent compiler warnings */
    ruleblockEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block */

/**
 * $ANTLR start block_definitions
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:260:1: block_definitions : DEFS LBRACE ( definition )+ RBRACE ( SEMI )? ;
 */
void
gEconParser::block_definitions()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:261:5: ( DEFS LBRACE ( definition )+ RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:261:7: DEFS LBRACE ( definition )+ RBRACE ( SEMI )?
        {
             this->matchToken(DEFS, &FOLLOW_DEFS_in_block_definitions1237);
            if  (this->hasException())
            {
                goto ruleblock_definitionsEx;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block_definitions1239);
            if  (this->hasException())
            {
                goto ruleblock_definitionsEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:261:19: ( definition )+
            {
                int cnt33=0;

                for (;;)
                {
                    int alt33=2;
            	switch ( this->LA(1) )
            	{
            	case BACKWARDCOMP:
            	case BFALSE:
            	case BTRUE:
            	case CLETTER:
            	case ID:
            	case JACOBIAN:
            	case LANDSCAPE:
            	case LATEX:
            	case LOGF:
            	case LONG:
            	case OUTPUT:
            	case R:
            	case SHORT:
            	case SLETTER:
            	case SS:
            	case VERBOSE:
            		{
            			alt33=1;
            		}
            	    break;

            	}

            	switch (alt33)
            	{
            	    case 1:
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:261:19: definition
            	        {
            	            this->followPush(FOLLOW_definition_in_block_definitions1241);
            	            definition();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleblock_definitionsEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt33 >= 1 )
            		{
            		    goto loop33;
            		}
            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< gEconParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleblock_definitionsEx;
            	}
            	cnt33++;
                }
                loop33: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block_definitions1244);
            if  (this->hasException())
            {
                goto ruleblock_definitionsEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:261:38: ( SEMI )?
            {
                int alt34=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt34=1;
                    	}
                        break;
                }

                switch (alt34)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:261:38: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block_definitions1246);
            	        if  (this->hasException())
            	        {
            	            goto ruleblock_definitionsEx;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblock_definitionsEx; /* Prevent compiler warnings */
    ruleblock_definitionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block_definitions */

/**
 * $ANTLR start definition
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:264:1: definition : (lhs= atom_id_t EQ rhs= expr SEMI |lhs= atom_id_nt EQ rhs= expr SEMI );
 */
void
gEconParser::definition()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    SEMI10;
    const CommonTokenType*    SEMI11;
    ex lhs;
    typedef	ex RETURN_TYPE_lhs;

    ex rhs;
    typedef	ex RETURN_TYPE_rhs;

    /* Initialize rule variables
     */

    SEMI10       = NULL;
    SEMI11       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:265:5: (lhs= atom_id_t EQ rhs= expr SEMI |lhs= atom_id_nt EQ rhs= expr SEMI )

            ANTLR_UINT32 alt35;

            alt35=2;

            alt35 = cdfa35.predict(this, this->get_rec(), this->get_istream(), cdfa35 );
            if  (this->hasException())
            {
                goto ruledefinitionEx;
            }

            switch (alt35)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:265:7: lhs= atom_id_t EQ rhs= expr SEMI
        	    {
        	        this->followPush(FOLLOW_atom_id_t_in_definition1268);
        	        lhs=atom_id_t();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_definition1270);
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_definition1276);
        	        rhs=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }


        	        SEMI10 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_definition1278);
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }


        	        {
        	             model_obj.add_definition(lhs, rhs, (SEMI10->get_line())); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:267:7: lhs= atom_id_nt EQ rhs= expr SEMI
        	    {
        	        this->followPush(FOLLOW_atom_id_nt_in_definition1300);
        	        lhs=atom_id_nt();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_definition1302);
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_definition1308);
        	        rhs=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }


        	        SEMI11 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_definition1310);
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }


        	        {
        	             model_obj.add_definition(lhs, rhs, (SEMI11->get_line())); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruledefinitionEx; /* Prevent compiler warnings */
    ruledefinitionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end definition */

/**
 * $ANTLR start block_controls
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:271:1: block_controls : CONTROLS LBRACE lv= list_ctr_var RBRACE ( SEMI )? ;
 */
void
gEconParser::block_controls()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    vec_exintstr lv;
    typedef	vec_exintstr RETURN_TYPE_lv;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:272:5: ( CONTROLS LBRACE lv= list_ctr_var RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:272:7: CONTROLS LBRACE lv= list_ctr_var RBRACE ( SEMI )?
        {
             this->matchToken(CONTROLS, &FOLLOW_CONTROLS_in_block_controls1337);
            if  (this->hasException())
            {
                goto ruleblock_controlsEx;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block_controls1339);
            if  (this->hasException())
            {
                goto ruleblock_controlsEx;
            }


            this->followPush(FOLLOW_list_ctr_var_in_block_controls1345);
            lv=list_ctr_var();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleblock_controlsEx;
            }


            {
                 model_obj.add_controls(lv); 
            }


             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block_controls1349);
            if  (this->hasException())
            {
                goto ruleblock_controlsEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:272:80: ( SEMI )?
            {
                int alt36=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt36=1;
                    	}
                        break;
                }

                switch (alt36)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:272:80: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block_controls1351);
            	        if  (this->hasException())
            	        {
            	            goto ruleblock_controlsEx;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblock_controlsEx; /* Prevent compiler warnings */
    ruleblock_controlsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block_controls */

/**
 * $ANTLR start list_ctr_var
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:275:1: list_ctr_var returns [vec_exintstr listln] : val= list_ctr_var_elem ( COMMA val= list_ctr_var_elem )* SEMI ;
 */
vec_exintstr
gEconParser::list_ctr_var()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vec_exintstr listln;


    const CommonTokenType*    COMMA12;
    const CommonTokenType*    SEMI13;
    exstr val;
    typedef	exstr RETURN_TYPE_val;

    /* Initialize rule variables
     */


        vec_ex liste;
        std::vector<std::string> lists;
        std::vector<int> listl;

    COMMA12       = NULL;
    SEMI13       = NULL;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:281:5: (val= list_ctr_var_elem ( COMMA val= list_ctr_var_elem )* SEMI )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:281:8: val= list_ctr_var_elem ( COMMA val= list_ctr_var_elem )* SEMI
        {
            this->followPush(FOLLOW_list_ctr_var_elem_in_list_ctr_var1383);
            val=list_ctr_var_elem();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_ctr_varEx;
            }


            {
                 liste.push_back(val.first); lists.push_back(val.second); 
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:282:9: ( COMMA val= list_ctr_var_elem )*

            for (;;)
            {
                int alt37=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt37=1;
                	}
                    break;

                }

                switch (alt37)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:282:10: COMMA val= list_ctr_var_elem
            	    {
            	        COMMA12 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_list_ctr_var1396);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_ctr_varEx;
            	        }


            	        {
            	             listl.push_back((COMMA12->get_line())); 
            	        }


            	        this->followPush(FOLLOW_list_ctr_var_elem_in_list_ctr_var1416);
            	        val=list_ctr_var_elem();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_ctr_varEx;
            	        }


            	        {
            	             liste.push_back(val.first); lists.push_back(val.second); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop37;	/* break out of the loop */
            	    break;
                }
            }
            loop37: ; /* Jump out to here if this rule does not match */


            SEMI13 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_list_ctr_var1430);
            if  (this->hasException())
            {
                goto rulelist_ctr_varEx;
            }


            {
                 listl.push_back((SEMI13->get_line()));
                            unsigned i = 0, n = listl.size();
                            listln.reserve(n);
                            for (; i < n; ++i)
                                listln.push_back(exintstr(liste[i], listl[i], lists[i]));
                        
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_ctr_varEx; /* Prevent compiler warnings */
    rulelist_ctr_varEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return listln;
}
/* $ANTLR end list_ctr_var */

/**
 * $ANTLR start list_ctr_var_elem
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:292:1: list_ctr_var_elem returns [exstr val] : lie= list_indexing_ex v= atom_id_t ( AT ids= id_str )? ;
 */
exstr
gEconParser::list_ctr_var_elem()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    exstr val;


    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    ex v;
    typedef	ex RETURN_TYPE_v;

    std::pair<std::string, int> ids;
    typedef	std::pair<std::string, int> RETURN_TYPE_ids;

    /* Initialize rule variables
     */


        std::string ref;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:296:5: (lie= list_indexing_ex v= atom_id_t ( AT ids= id_str )? )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:296:7: lie= list_indexing_ex v= atom_id_t ( AT ids= id_str )?
        {
            this->followPush(FOLLOW_list_indexing_ex_in_list_ctr_var_elem1462);
            lie=list_indexing_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_ctr_var_elemEx;
            }


            this->followPush(FOLLOW_atom_id_t_in_list_ctr_var_elem1474);
            v=atom_id_t();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_ctr_var_elemEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:297:21: ( AT ids= id_str )?
            {
                int alt38=2;
                switch ( this->LA(1) )
                {
                    case AT:
                    	{
                    		alt38=1;
                    	}
                        break;
                }

                switch (alt38)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:297:22: AT ids= id_str
            	    {
            	         this->matchToken(AT, &FOLLOW_AT_in_list_ctr_var_elem1477);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_ctr_var_elemEx;
            	        }


            	        this->followPush(FOLLOW_id_str_in_list_ctr_var_elem1483);
            	        ids=id_str();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_ctr_var_elemEx;
            	        }


            	        {
            	             ref = ids.first; 
            	        }


            	    }
            	    break;

                }
            }

            {

                        val= exstr(ex(lie[0], ex(lie[1], v)), ref);

                      
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_ctr_var_elemEx; /* Prevent compiler warnings */
    rulelist_ctr_var_elemEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end list_ctr_var_elem */

/**
 * $ANTLR start block_objective
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:301:1: block_objective : OBJ LBRACE objective RBRACE ( SEMI )? ;
 */
void
gEconParser::block_objective()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:302:5: ( OBJ LBRACE objective RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:302:7: OBJ LBRACE objective RBRACE ( SEMI )?
        {
             this->matchToken(OBJ, &FOLLOW_OBJ_in_block_objective1505);
            if  (this->hasException())
            {
                goto ruleblock_objectiveEx;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block_objective1507);
            if  (this->hasException())
            {
                goto ruleblock_objectiveEx;
            }


            this->followPush(FOLLOW_objective_in_block_objective1509);
            objective();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleblock_objectiveEx;
            }


             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block_objective1511);
            if  (this->hasException())
            {
                goto ruleblock_objectiveEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:302:35: ( SEMI )?
            {
                int alt39=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt39=1;
                    	}
                        break;
                }

                switch (alt39)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:302:35: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block_objective1513);
            	        if  (this->hasException())
            	        {
            	            goto ruleblock_objectiveEx;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblock_objectiveEx; /* Prevent compiler warnings */
    ruleblock_objectiveEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block_objective */

/**
 * $ANTLR start objective
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:305:1: objective : obj= atom_id_t EQ obj_eq= expr ( COLON lambda= atom_id_t )? SEMI ;
 */
void
gEconParser::objective()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    SEMI14;
    ex obj;
    typedef	ex RETURN_TYPE_obj;

    ex obj_eq;
    typedef	ex RETURN_TYPE_obj_eq;

    ex lambda;
    typedef	ex RETURN_TYPE_lambda;

    /* Initialize rule variables
     */

    SEMI14       = NULL;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:306:5: (obj= atom_id_t EQ obj_eq= expr ( COLON lambda= atom_id_t )? SEMI )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:306:7: obj= atom_id_t EQ obj_eq= expr ( COLON lambda= atom_id_t )? SEMI
        {
            this->followPush(FOLLOW_atom_id_t_in_objective1535);
            obj=atom_id_t();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleobjectiveEx;
            }


             this->matchToken(EQ, &FOLLOW_EQ_in_objective1537);
            if  (this->hasException())
            {
                goto ruleobjectiveEx;
            }


            this->followPush(FOLLOW_expr_in_objective1543);
            obj_eq=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleobjectiveEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:306:40: ( COLON lambda= atom_id_t )?
            {
                int alt40=2;
                switch ( this->LA(1) )
                {
                    case COLON:
                    	{
                    		alt40=1;
                    	}
                        break;
                }

                switch (alt40)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:306:41: COLON lambda= atom_id_t
            	    {
            	         this->matchToken(COLON, &FOLLOW_COLON_in_objective1546);
            	        if  (this->hasException())
            	        {
            	            goto ruleobjectiveEx;
            	        }


            	        this->followPush(FOLLOW_atom_id_t_in_objective1552);
            	        lambda=atom_id_t();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleobjectiveEx;
            	        }


            	    }
            	    break;

                }
            }

            SEMI14 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_objective1556);
            if  (this->hasException())
            {
                goto ruleobjectiveEx;
            }


            {
                 model_obj.add_objective(obj, obj_eq, lambda, (SEMI14->get_line())); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleobjectiveEx; /* Prevent compiler warnings */
    ruleobjectiveEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end objective */

/**
 * $ANTLR start block_constraints
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:311:1: block_constraints : CONSTRAINTS LBRACE ( constraint )+ RBRACE ( SEMI )? ;
 */
void
gEconParser::block_constraints()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:312:5: ( CONSTRAINTS LBRACE ( constraint )+ RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:312:7: CONSTRAINTS LBRACE ( constraint )+ RBRACE ( SEMI )?
        {
             this->matchToken(CONSTRAINTS, &FOLLOW_CONSTRAINTS_in_block_constraints1584);
            if  (this->hasException())
            {
                goto ruleblock_constraintsEx;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block_constraints1586);
            if  (this->hasException())
            {
                goto ruleblock_constraintsEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:312:26: ( constraint )+
            {
                int cnt41=0;

                for (;;)
                {
                    int alt41=2;
            	switch ( this->LA(1) )
            	{
            	case ACOS:
            	case ASIN:
            	case ATAN:
            	case BACKWARDCOMP:
            	case BFALSE:
            	case BTRUE:
            	case CLETTER:
            	case CONSTRAINTS:
            	case COS:
            	case COSH:
            	case DELTA:
            	case DOUBLE:
            	case E:
            	case EXP:
            	case FOCS:
            	case ID:
            	case IDS:
            	case INT:
            	case JACOBIAN:
            	case LANDSCAPE:
            	case LANGBR:
            	case LATEX:
            	case LOG:
            	case LOGF:
            	case LONG:
            	case LPAREN:
            	case MINUS:
            	case OBJ:
            	case OUTPUT:
            	case PROD:
            	case R:
            	case SHORT:
            	case SIN:
            	case SINH:
            	case SLETTER:
            	case SQRT:
            	case SS:
            	case SUM:
            	case TAN:
            	case TANH:
            	case VERBOSE:
            	case ZERO:
            		{
            			alt41=1;
            		}
            	    break;

            	}

            	switch (alt41)
            	{
            	    case 1:
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:312:26: constraint
            	        {
            	            this->followPush(FOLLOW_constraint_in_block_constraints1588);
            	            constraint();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleblock_constraintsEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt41 >= 1 )
            		{
            		    goto loop41;
            		}
            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< gEconParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleblock_constraintsEx;
            	}
            	cnt41++;
                }
                loop41: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block_constraints1591);
            if  (this->hasException())
            {
                goto ruleblock_constraintsEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:312:45: ( SEMI )?
            {
                int alt42=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt42=1;
                    	}
                        break;
                }

                switch (alt42)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:312:45: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block_constraints1593);
            	        if  (this->hasException())
            	        {
            	            goto ruleblock_constraintsEx;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblock_constraintsEx; /* Prevent compiler warnings */
    ruleblock_constraintsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block_constraints */

/**
 * $ANTLR start constraint
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:315:1: constraint : (lie= list_indexing_ex lhs= expr EQ rhs= expr ( COLON lambda= atom_id_t )? SEMI |lr= list_ref AT ids= id_str SEMI );
 */
void
gEconParser::constraint()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    SEMI15;
    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    ex lhs;
    typedef	ex RETURN_TYPE_lhs;

    ex rhs;
    typedef	ex RETURN_TYPE_rhs;

    ex lambda;
    typedef	ex RETURN_TYPE_lambda;

    vec_intint lr;
    typedef	vec_intint RETURN_TYPE_lr;

    std::pair<std::string, int> ids;
    typedef	std::pair<std::string, int> RETURN_TYPE_ids;

    /* Initialize rule variables
     */

    SEMI15       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:316:5: (lie= list_indexing_ex lhs= expr EQ rhs= expr ( COLON lambda= atom_id_t )? SEMI |lr= list_ref AT ids= id_str SEMI )

            ANTLR_UINT32 alt44;

            alt44=2;

            switch ( this->LA(1) )
            {
            case ACOS:
            case ASIN:
            case ATAN:
            case BACKWARDCOMP:
            case BFALSE:
            case BTRUE:
            case CLETTER:
            case COS:
            case COSH:
            case DELTA:
            case DOUBLE:
            case E:
            case EXP:
            case ID:
            case INT:
            case JACOBIAN:
            case LANDSCAPE:
            case LANGBR:
            case LATEX:
            case LOG:
            case LOGF:
            case LONG:
            case LPAREN:
            case MINUS:
            case OUTPUT:
            case PROD:
            case R:
            case SHORT:
            case SIN:
            case SINH:
            case SLETTER:
            case SQRT:
            case SS:
            case SUM:
            case TAN:
            case TANH:
            case VERBOSE:
            case ZERO:
            	{
            		alt44=1;
            	}
                break;
            case CONSTRAINTS:
            case FOCS:
            case IDS:
            case OBJ:
            	{
            		alt44=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 44 );
                ex->set_state( 0 );


                goto ruleconstraintEx;

            }

            switch (alt44)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:316:7: lie= list_indexing_ex lhs= expr EQ rhs= expr ( COLON lambda= atom_id_t )? SEMI
        	    {
        	        this->followPush(FOLLOW_list_indexing_ex_in_constraint1615);
        	        lie=list_indexing_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_constraint1627);
        	        lhs=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_constraint1629);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_constraint1635);
        	        rhs=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }


        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:317:32: ( COLON lambda= atom_id_t )?
        	        {
        	            int alt43=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COLON:
        	                	{
        	                		alt43=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt43)
        	            {
        	        	case 1:
        	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:317:33: COLON lambda= atom_id_t
        	        	    {
        	        	         this->matchToken(COLON, &FOLLOW_COLON_in_constraint1638);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleconstraintEx;
        	        	        }


        	        	        this->followPush(FOLLOW_atom_id_t_in_constraint1644);
        	        	        lambda=atom_id_t();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleconstraintEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        SEMI15 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_constraint1648);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }


        	        {
        	             model_obj.add_constraint(ex(lie[0], ex(lie[1], lhs)), ex(lie[0], ex(lie[1], rhs)),
        	                                                ex(lie[0], ex(lie[1], lambda)), (SEMI15->get_line())); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:320:7: lr= list_ref AT ids= id_str SEMI
        	    {
        	        this->followPush(FOLLOW_list_ref_in_constraint1670);
        	        lr=list_ref();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }


        	         this->matchToken(AT, &FOLLOW_AT_in_constraint1672);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }


        	        this->followPush(FOLLOW_id_str_in_constraint1678);
        	        ids=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_constraint1680);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }


        	        {

        	                        for (unsigned i = 0; i < lr.size(); ++i) {
        	                            model_obj.add_constraint_ref(ids.first, lr[i].first, lr[i].second);
        	                        }
        	                  
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleconstraintEx; /* Prevent compiler warnings */
    ruleconstraintEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end constraint */

/**
 * $ANTLR start list_ref
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:327:1: list_ref returns [vec_intint lr] : r= ref_sec ( COMMA r= ref_sec )* ;
 */
vec_intint
gEconParser::list_ref()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vec_intint lr;


    std::pair<int, int> r;
    typedef	std::pair<int, int> RETURN_TYPE_r;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:328:5: (r= ref_sec ( COMMA r= ref_sec )* )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:328:7: r= ref_sec ( COMMA r= ref_sec )*
        {
            this->followPush(FOLLOW_ref_sec_in_list_ref1707);
            r=ref_sec();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_refEx;
            }


            {
                 lr.push_back(r); 
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:328:40: ( COMMA r= ref_sec )*

            for (;;)
            {
                int alt45=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt45=1;
                	}
                    break;

                }

                switch (alt45)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:328:41: COMMA r= ref_sec
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_list_ref1712);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_refEx;
            	        }


            	        this->followPush(FOLLOW_ref_sec_in_list_ref1718);
            	        r=ref_sec();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_refEx;
            	        }


            	        {
            	             lr.push_back(r); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop45;	/* break out of the loop */
            	    break;
                }
            }
            loop45: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_refEx; /* Prevent compiler warnings */
    rulelist_refEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return lr;
}
/* $ANTLR end list_ref */

/**
 * $ANTLR start ref_sec
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:331:1: ref_sec returns [std::pair<int, int> rs] : ( OBJ | CONSTRAINTS | FOCS | IDS );
 */
std::pair<int, int>
gEconParser::ref_sec()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::pair<int, int> rs;


    const CommonTokenType*    OBJ16;
    const CommonTokenType*    CONSTRAINTS17;
    const CommonTokenType*    FOCS18;
    const CommonTokenType*    IDS19;

    /* Initialize rule variables
     */

    OBJ16       = NULL;
    CONSTRAINTS17       = NULL;
    FOCS18       = NULL;
    IDS19       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:332:5: ( OBJ | CONSTRAINTS | FOCS | IDS )

            ANTLR_UINT32 alt46;

            alt46=4;

            switch ( this->LA(1) )
            {
            case OBJ:
            	{
            		alt46=1;
            	}
                break;
            case CONSTRAINTS:
            	{
            		alt46=2;
            	}
                break;
            case FOCS:
            	{
            		alt46=3;
            	}
                break;
            case IDS:
            	{
            		alt46=4;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 46 );
                ex->set_state( 0 );


                goto ruleref_secEx;

            }

            switch (alt46)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:332:7: OBJ
        	    {
        	        OBJ16 =  this->matchToken(OBJ, &FOLLOW_OBJ_in_ref_sec1743);
        	        if  (this->hasException())
        	        {
        	            goto ruleref_secEx;
        	        }


        	        {
        	             return std::pair<int, int>(Model_block::objective, (OBJ16->get_line())); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:333:7: CONSTRAINTS
        	    {
        	        CONSTRAINTS17 =  this->matchToken(CONSTRAINTS, &FOLLOW_CONSTRAINTS_in_ref_sec1753);
        	        if  (this->hasException())
        	        {
        	            goto ruleref_secEx;
        	        }


        	        {
        	             return std::pair<int, int>(Model_block::constraints, (CONSTRAINTS17->get_line())); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:334:7: FOCS
        	    {
        	        FOCS18 =  this->matchToken(FOCS, &FOLLOW_FOCS_in_ref_sec1763);
        	        if  (this->hasException())
        	        {
        	            goto ruleref_secEx;
        	        }


        	        {
        	             return std::pair<int, int>(Model_block::focs, (FOCS18->get_line())); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:335:7: IDS
        	    {
        	        IDS19 =  this->matchToken(IDS, &FOLLOW_IDS_in_ref_sec1773);
        	        if  (this->hasException())
        	        {
        	            goto ruleref_secEx;
        	        }


        	        {
        	             return std::pair<int, int>(Model_block::identities, (IDS19->get_line())); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleref_secEx; /* Prevent compiler warnings */
    ruleref_secEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return rs;
}
/* $ANTLR end ref_sec */

/**
 * $ANTLR start block_identities
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:338:1: block_identities : IDS LBRACE ( identity )+ RBRACE ( SEMI )? ;
 */
void
gEconParser::block_identities()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:339:5: ( IDS LBRACE ( identity )+ RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:339:7: IDS LBRACE ( identity )+ RBRACE ( SEMI )?
        {
             this->matchToken(IDS, &FOLLOW_IDS_in_block_identities1792);
            if  (this->hasException())
            {
                goto ruleblock_identitiesEx;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block_identities1794);
            if  (this->hasException())
            {
                goto ruleblock_identitiesEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:339:18: ( identity )+
            {
                int cnt47=0;

                for (;;)
                {
                    int alt47=2;
            	switch ( this->LA(1) )
            	{
            	case ACOS:
            	case ASIN:
            	case ATAN:
            	case BACKWARDCOMP:
            	case BFALSE:
            	case BTRUE:
            	case CLETTER:
            	case COS:
            	case COSH:
            	case DELTA:
            	case DOUBLE:
            	case E:
            	case EXP:
            	case ID:
            	case INT:
            	case JACOBIAN:
            	case LANDSCAPE:
            	case LANGBR:
            	case LATEX:
            	case LOG:
            	case LOGF:
            	case LONG:
            	case LPAREN:
            	case MINUS:
            	case OUTPUT:
            	case PROD:
            	case R:
            	case SHORT:
            	case SIN:
            	case SINH:
            	case SLETTER:
            	case SQRT:
            	case SS:
            	case SUM:
            	case TAN:
            	case TANH:
            	case VERBOSE:
            	case ZERO:
            		{
            			alt47=1;
            		}
            	    break;

            	}

            	switch (alt47)
            	{
            	    case 1:
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:339:18: identity
            	        {
            	            this->followPush(FOLLOW_identity_in_block_identities1796);
            	            identity();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleblock_identitiesEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt47 >= 1 )
            		{
            		    goto loop47;
            		}
            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< gEconParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleblock_identitiesEx;
            	}
            	cnt47++;
                }
                loop47: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block_identities1799);
            if  (this->hasException())
            {
                goto ruleblock_identitiesEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:339:35: ( SEMI )?
            {
                int alt48=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt48=1;
                    	}
                        break;
                }

                switch (alt48)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:339:35: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block_identities1801);
            	        if  (this->hasException())
            	        {
            	            goto ruleblock_identitiesEx;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblock_identitiesEx; /* Prevent compiler warnings */
    ruleblock_identitiesEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block_identities */

/**
 * $ANTLR start identity
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:342:1: identity : lie= list_indexing_ex lhs= expr EQ rhs= expr SEMI ;
 */
void
gEconParser::identity()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    SEMI20;
    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    ex lhs;
    typedef	ex RETURN_TYPE_lhs;

    ex rhs;
    typedef	ex RETURN_TYPE_rhs;

    /* Initialize rule variables
     */

    SEMI20       = NULL;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:343:5: (lie= list_indexing_ex lhs= expr EQ rhs= expr SEMI )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:343:7: lie= list_indexing_ex lhs= expr EQ rhs= expr SEMI
        {
            this->followPush(FOLLOW_list_indexing_ex_in_identity1823);
            lie=list_indexing_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleidentityEx;
            }


            this->followPush(FOLLOW_expr_in_identity1835);
            lhs=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleidentityEx;
            }


             this->matchToken(EQ, &FOLLOW_EQ_in_identity1837);
            if  (this->hasException())
            {
                goto ruleidentityEx;
            }


            this->followPush(FOLLOW_expr_in_identity1843);
            rhs=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleidentityEx;
            }


            SEMI20 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_identity1845);
            if  (this->hasException())
            {
                goto ruleidentityEx;
            }


            {

                        model_obj.add_identity(ex(lie[0], ex(lie[1], lhs)), ex(lie[0], ex(lie[1], rhs)), (SEMI20->get_line()));
                      
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleidentityEx; /* Prevent compiler warnings */
    ruleidentityEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end identity */

/**
 * $ANTLR start block_shocks
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:349:1: block_shocks : SHOCKS LBRACE ls= list_var RBRACE ( SEMI )? ;
 */
void
gEconParser::block_shocks()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    vec_exint ls;
    typedef	vec_exint RETURN_TYPE_ls;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:350:5: ( SHOCKS LBRACE ls= list_var RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:350:7: SHOCKS LBRACE ls= list_var RBRACE ( SEMI )?
        {
             this->matchToken(SHOCKS, &FOLLOW_SHOCKS_in_block_shocks1864);
            if  (this->hasException())
            {
                goto ruleblock_shocksEx;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block_shocks1866);
            if  (this->hasException())
            {
                goto ruleblock_shocksEx;
            }


            this->followPush(FOLLOW_list_var_in_block_shocks1872);
            ls=list_var();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleblock_shocksEx;
            }


            {
                 model_obj.add_shocks(ls); 
            }


             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block_shocks1876);
            if  (this->hasException())
            {
                goto ruleblock_shocksEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:350:72: ( SEMI )?
            {
                int alt49=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt49=1;
                    	}
                        break;
                }

                switch (alt49)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:350:72: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block_shocks1878);
            	        if  (this->hasException())
            	        {
            	            goto ruleblock_shocksEx;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblock_shocksEx; /* Prevent compiler warnings */
    ruleblock_shocksEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block_shocks */

/**
 * $ANTLR start shock
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:353:1: shock : lie= list_indexing_ex s= atom_id_t SEMI ;
 */
void
gEconParser::shock()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    SEMI21;
    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    ex s;
    typedef	ex RETURN_TYPE_s;

    /* Initialize rule variables
     */

    SEMI21       = NULL;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:354:5: (lie= list_indexing_ex s= atom_id_t SEMI )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:354:7: lie= list_indexing_ex s= atom_id_t SEMI
        {
            this->followPush(FOLLOW_list_indexing_ex_in_shock1900);
            lie=list_indexing_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleshockEx;
            }


            this->followPush(FOLLOW_atom_id_t_in_shock1912);
            s=atom_id_t();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleshockEx;
            }


            SEMI21 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_shock1914);
            if  (this->hasException())
            {
                goto ruleshockEx;
            }


            {
                 model_obj.add_shock(ex(lie[0], ex(lie[1], s)), (SEMI21->get_line())); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleshockEx; /* Prevent compiler warnings */
    ruleshockEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end shock */

/**
 * $ANTLR start block_calibr
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:358:1: block_calibr : CALIBR LBRACE ( calibr_eq )+ RBRACE ( SEMI )? ;
 */
void
gEconParser::block_calibr()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:359:5: ( CALIBR LBRACE ( calibr_eq )+ RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:359:7: CALIBR LBRACE ( calibr_eq )+ RBRACE ( SEMI )?
        {
             this->matchToken(CALIBR, &FOLLOW_CALIBR_in_block_calibr1933);
            if  (this->hasException())
            {
                goto ruleblock_calibrEx;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block_calibr1935);
            if  (this->hasException())
            {
                goto ruleblock_calibrEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:359:21: ( calibr_eq )+
            {
                int cnt50=0;

                for (;;)
                {
                    int alt50=2;
            	switch ( this->LA(1) )
            	{
            	case ACOS:
            	case ASIN:
            	case ATAN:
            	case BACKWARDCOMP:
            	case BFALSE:
            	case BTRUE:
            	case CLETTER:
            	case COS:
            	case COSH:
            	case DELTA:
            	case DOUBLE:
            	case E:
            	case EXP:
            	case ID:
            	case INT:
            	case JACOBIAN:
            	case LANDSCAPE:
            	case LANGBR:
            	case LATEX:
            	case LOG:
            	case LOGF:
            	case LONG:
            	case LPAREN:
            	case MINUS:
            	case OUTPUT:
            	case PROD:
            	case R:
            	case SHORT:
            	case SIN:
            	case SINH:
            	case SLETTER:
            	case SQRT:
            	case SS:
            	case SUM:
            	case TAN:
            	case TANH:
            	case VERBOSE:
            	case ZERO:
            		{
            			alt50=1;
            		}
            	    break;

            	}

            	switch (alt50)
            	{
            	    case 1:
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:359:21: calibr_eq
            	        {
            	            this->followPush(FOLLOW_calibr_eq_in_block_calibr1937);
            	            calibr_eq();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleblock_calibrEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt50 >= 1 )
            		{
            		    goto loop50;
            		}
            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< gEconParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleblock_calibrEx;
            	}
            	cnt50++;
                }
                loop50: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block_calibr1940);
            if  (this->hasException())
            {
                goto ruleblock_calibrEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:359:39: ( SEMI )?
            {
                int alt51=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt51=1;
                    	}
                        break;
                }

                switch (alt51)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:359:39: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block_calibr1942);
            	        if  (this->hasException())
            	        {
            	            goto ruleblock_calibrEx;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblock_calibrEx; /* Prevent compiler warnings */
    ruleblock_calibrEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block_calibr */

/**
 * $ANTLR start calibr_eq
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:362:1: calibr_eq : lie= list_indexing_ex lhs= expr EQ rhs= expr ( ( RARROW lp= list_par ) | SEMI ) ;
 */
void
gEconParser::calibr_eq()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    EQ22;
    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    ex lhs;
    typedef	ex RETURN_TYPE_lhs;

    ex rhs;
    typedef	ex RETURN_TYPE_rhs;

    vec_exint lp;
    typedef	vec_exint RETURN_TYPE_lp;

    /* Initialize rule variables
     */

    EQ22       = NULL;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:363:5: (lie= list_indexing_ex lhs= expr EQ rhs= expr ( ( RARROW lp= list_par ) | SEMI ) )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:363:7: lie= list_indexing_ex lhs= expr EQ rhs= expr ( ( RARROW lp= list_par ) | SEMI )
        {
            this->followPush(FOLLOW_list_indexing_ex_in_calibr_eq1964);
            lie=list_indexing_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecalibr_eqEx;
            }


            this->followPush(FOLLOW_expr_in_calibr_eq1976);
            lhs=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecalibr_eqEx;
            }


            EQ22 =  this->matchToken(EQ, &FOLLOW_EQ_in_calibr_eq1978);
            if  (this->hasException())
            {
                goto rulecalibr_eqEx;
            }


            this->followPush(FOLLOW_expr_in_calibr_eq1984);
            rhs=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecalibr_eqEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:364:32: ( ( RARROW lp= list_par ) | SEMI )
            {
                int alt52=2;
                switch ( this->LA(1) )
                {
                case RARROW:
                	{
                		alt52=1;
                	}
                    break;
                case SEMI:
                	{
                		alt52=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 52 );
                    ex->set_state( 0 );


                    goto rulecalibr_eqEx;

                }

                switch (alt52)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:364:33: ( RARROW lp= list_par )
            	    {
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:364:33: ( RARROW lp= list_par )
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:364:34: RARROW lp= list_par
            	        {
            	             this->matchToken(RARROW, &FOLLOW_RARROW_in_calibr_eq1988);
            	            if  (this->hasException())
            	            {
            	                goto rulecalibr_eqEx;
            	            }


            	            this->followPush(FOLLOW_list_par_in_calibr_eq1994);
            	            lp=list_par();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulecalibr_eqEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:364:58: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_calibr_eq1999);
            	        if  (this->hasException())
            	        {
            	            goto rulecalibr_eqEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                        vec_exint pln;
                        pln.reserve(lp.size());
                        for (unsigned i = 0; i < lp.size(); ++i) {
                            pln.push_back(exint(ex(lie[0], ex(lie[1], lp[i].first)), lp[i].second));
                        }
                        model_obj.add_calibr(ex(lie[0], ex(lie[1], lhs)), ex(lie[0], ex(lie[1], rhs)), (EQ22->get_line()), pln);
                      
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecalibr_eqEx; /* Prevent compiler warnings */
    rulecalibr_eqEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end calibr_eq */

/**
 * $ANTLR start list_var
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:376:1: list_var returns [vec_exint listln] : val= list_var_elem ( COMMA val= list_var_elem )* SEMI ;
 */
vec_exint
gEconParser::list_var()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vec_exint listln;


    const CommonTokenType*    COMMA23;
    const CommonTokenType*    SEMI24;
    ex val;
    typedef	ex RETURN_TYPE_val;

    /* Initialize rule variables
     */


        vec_ex liste;
        std::vector<int> listl;

    COMMA23       = NULL;
    SEMI24       = NULL;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:381:5: (val= list_var_elem ( COMMA val= list_var_elem )* SEMI )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:381:8: val= list_var_elem ( COMMA val= list_var_elem )* SEMI
        {
            this->followPush(FOLLOW_list_var_elem_in_list_var2035);
            val=list_var_elem();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_varEx;
            }


            {
                 liste.push_back(val); 
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:382:9: ( COMMA val= list_var_elem )*

            for (;;)
            {
                int alt53=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt53=1;
                	}
                    break;

                }

                switch (alt53)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:382:10: COMMA val= list_var_elem
            	    {
            	        COMMA23 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_list_var2048);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_varEx;
            	        }


            	        {
            	             listl.push_back((COMMA23->get_line())); 
            	        }


            	        this->followPush(FOLLOW_list_var_elem_in_list_var2068);
            	        val=list_var_elem();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_varEx;
            	        }


            	        {
            	             liste.push_back(val); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop53;	/* break out of the loop */
            	    break;
                }
            }
            loop53: ; /* Jump out to here if this rule does not match */


            SEMI24 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_list_var2082);
            if  (this->hasException())
            {
                goto rulelist_varEx;
            }


            {
                 listl.push_back((SEMI24->get_line()));
                            unsigned i = 0, n = listl.size();
                            listln.reserve(n);
                            for (; i < n; ++i)
                                listln.push_back(exint(liste[i], listl[i]));
                        
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_varEx; /* Prevent compiler warnings */
    rulelist_varEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return listln;
}
/* $ANTLR end list_var */

/**
 * $ANTLR start list_livar
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:394:1: list_livar returns [vec_exint listln] : val= list_livar_elem ( COMMA val= list_livar_elem )* SEMI ;
 */
vec_exint
gEconParser::list_livar()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vec_exint listln;


    const CommonTokenType*    COMMA25;
    const CommonTokenType*    SEMI26;
    ex val;
    typedef	ex RETURN_TYPE_val;

    /* Initialize rule variables
     */


        vec_ex liste;
        std::vector<int> listl;

    COMMA25       = NULL;
    SEMI26       = NULL;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:399:5: (val= list_livar_elem ( COMMA val= list_livar_elem )* SEMI )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:399:8: val= list_livar_elem ( COMMA val= list_livar_elem )* SEMI
        {
            this->followPush(FOLLOW_list_livar_elem_in_list_livar2117);
            val=list_livar_elem();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_livarEx;
            }


            {
                 liste.push_back(val); 
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:400:9: ( COMMA val= list_livar_elem )*

            for (;;)
            {
                int alt54=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt54=1;
                	}
                    break;

                }

                switch (alt54)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:400:10: COMMA val= list_livar_elem
            	    {
            	        COMMA25 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_list_livar2130);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_livarEx;
            	        }


            	        {
            	             listl.push_back((COMMA25->get_line())); 
            	        }


            	        this->followPush(FOLLOW_list_livar_elem_in_list_livar2150);
            	        val=list_livar_elem();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_livarEx;
            	        }


            	        {
            	             liste.push_back(val); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop54;	/* break out of the loop */
            	    break;
                }
            }
            loop54: ; /* Jump out to here if this rule does not match */


            SEMI26 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_list_livar2164);
            if  (this->hasException())
            {
                goto rulelist_livarEx;
            }


            {
                 listl.push_back((SEMI26->get_line()));
                            unsigned i = 0, n = listl.size();
                            listln.reserve(n);
                            for (; i < n; ++i)
                                listln.push_back(exint(liste[i], listl[i]));
                        
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_livarEx; /* Prevent compiler warnings */
    rulelist_livarEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return listln;
}
/* $ANTLR end list_livar */

/**
 * $ANTLR start list_var_elem
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:410:1: list_var_elem returns [ex val] : lie= list_indexing_ex v= atom_id_t ;
 */
ex
gEconParser::list_var_elem()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    ex v;
    typedef	ex RETURN_TYPE_v;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:411:5: (lie= list_indexing_ex v= atom_id_t )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:411:7: lie= list_indexing_ex v= atom_id_t
        {
            this->followPush(FOLLOW_list_indexing_ex_in_list_var_elem2191);
            lie=list_indexing_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_var_elemEx;
            }


            this->followPush(FOLLOW_atom_id_t_in_list_var_elem2205);
            v=atom_id_t();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_var_elemEx;
            }


            {
                 val= ex(lie[0], ex(lie[1], v));
                 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_var_elemEx; /* Prevent compiler warnings */
    rulelist_var_elemEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end list_var_elem */

/**
 * $ANTLR start list_livar_elem
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:415:1: list_livar_elem returns [ex val] : lie= list_lindexing_ex v= atom_id_t ;
 */
ex
gEconParser::list_livar_elem()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    ex v;
    typedef	ex RETURN_TYPE_v;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:416:5: (lie= list_lindexing_ex v= atom_id_t )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:416:7: lie= list_lindexing_ex v= atom_id_t
        {
            this->followPush(FOLLOW_list_lindexing_ex_in_list_livar_elem2232);
            lie=list_lindexing_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_livar_elemEx;
            }


            this->followPush(FOLLOW_atom_id_t_in_list_livar_elem2246);
            v=atom_id_t();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_livar_elemEx;
            }


            {
                 val= ex(lie[0], ex(lie[1], ex(lie[2], ex(lie[3], v))));
                 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_livar_elemEx; /* Prevent compiler warnings */
    rulelist_livar_elemEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end list_livar_elem */

/**
 * $ANTLR start list_par
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:420:1: list_par returns [vec_exint listln] : val= list_par_elem ( COMMA val= list_par_elem )* SEMI ;
 */
vec_exint
gEconParser::list_par()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vec_exint listln;


    const CommonTokenType*    COMMA27;
    const CommonTokenType*    SEMI28;
    ex val;
    typedef	ex RETURN_TYPE_val;

    /* Initialize rule variables
     */


        vec_ex liste;
        std::vector<int> listl;

    COMMA27       = NULL;
    SEMI28       = NULL;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:425:5: (val= list_par_elem ( COMMA val= list_par_elem )* SEMI )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:425:8: val= list_par_elem ( COMMA val= list_par_elem )* SEMI
        {
            this->followPush(FOLLOW_list_par_elem_in_list_par2279);
            val=list_par_elem();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_parEx;
            }


            {
                 liste.push_back(val); 
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:426:9: ( COMMA val= list_par_elem )*

            for (;;)
            {
                int alt55=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt55=1;
                	}
                    break;

                }

                switch (alt55)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:426:10: COMMA val= list_par_elem
            	    {
            	        COMMA27 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_list_par2292);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_parEx;
            	        }


            	        {
            	             listl.push_back((COMMA27->get_line())); 
            	        }


            	        this->followPush(FOLLOW_list_par_elem_in_list_par2312);
            	        val=list_par_elem();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_parEx;
            	        }


            	        {
            	             liste.push_back(val); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop55;	/* break out of the loop */
            	    break;
                }
            }
            loop55: ; /* Jump out to here if this rule does not match */


            SEMI28 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_list_par2326);
            if  (this->hasException())
            {
                goto rulelist_parEx;
            }


            {
                 listl.push_back((SEMI28->get_line()));
                            unsigned i = 0, n = listl.size();
                            listln.reserve(n);
                            for (; i < n; ++i)
                                listln.push_back(exint(liste[i], listl[i]));
                        
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_parEx; /* Prevent compiler warnings */
    rulelist_parEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return listln;
}
/* $ANTLR end list_par */

/**
 * $ANTLR start list_par_elem
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:436:1: list_par_elem returns [ex val] : lie= list_indexing_ex p= atom_id_nt ;
 */
ex
gEconParser::list_par_elem()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    ex p;
    typedef	ex RETURN_TYPE_p;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:437:5: (lie= list_indexing_ex p= atom_id_nt )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:437:7: lie= list_indexing_ex p= atom_id_nt
        {
            this->followPush(FOLLOW_list_indexing_ex_in_list_par_elem2353);
            lie=list_indexing_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_par_elemEx;
            }


            this->followPush(FOLLOW_atom_id_nt_in_list_par_elem2367);
            p=atom_id_nt();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_par_elemEx;
            }


            {
                 val= ex(lie[0], ex(lie[1], p));
                 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_par_elemEx; /* Prevent compiler warnings */
    rulelist_par_elemEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end list_par_elem */

/**
 * $ANTLR start expr
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:441:1: expr returns [ex val] : a= expr_add ;
 */
ex
gEconParser::expr()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex a;
    typedef	ex RETURN_TYPE_a;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:442:5: (a= expr_add )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:442:7: a= expr_add
        {
            this->followPush(FOLLOW_expr_add_in_expr2394);
            a=expr_add();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }


            {
                 val= a;
                 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr */

/**
 * $ANTLR start expr_add
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:445:1: expr_add returns [ex val] : a= expr_sum ( ( PLUS b= expr_sum ) | ( MINUS b= expr_sum ) )* ;
 */
ex
gEconParser::expr_add()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex a;
    typedef	ex RETURN_TYPE_a;

    ex b;
    typedef	ex RETURN_TYPE_b;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:446:5: (a= expr_sum ( ( PLUS b= expr_sum ) | ( MINUS b= expr_sum ) )* )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:446:7: a= expr_sum ( ( PLUS b= expr_sum ) | ( MINUS b= expr_sum ) )*
        {
            this->followPush(FOLLOW_expr_sum_in_expr_add2421);
            a=expr_sum();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpr_addEx;
            }


            {
                 val= a;
                 
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:447:17: ( ( PLUS b= expr_sum ) | ( MINUS b= expr_sum ) )*

            for (;;)
            {
                int alt56=3;
                switch ( this->LA(1) )
                {
                case PLUS:
                	{
                		alt56=1;
                	}
                    break;
                case MINUS:
                	{
                		alt56=2;
                	}
                    break;

                }

                switch (alt56)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:447:18: ( PLUS b= expr_sum )
            	    {
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:447:18: ( PLUS b= expr_sum )
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:447:19: PLUS b= expr_sum
            	        {
            	             this->matchToken(PLUS, &FOLLOW_PLUS_in_expr_add2443);
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_addEx;
            	            }


            	            this->followPush(FOLLOW_expr_sum_in_expr_add2449);
            	            b=expr_sum();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_addEx;
            	            }


            	            {
            	                 val= 
            	                val
            	                 + b;
            	                 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:448:18: ( MINUS b= expr_sum )
            	    {
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:448:18: ( MINUS b= expr_sum )
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:448:19: MINUS b= expr_sum
            	        {
            	             this->matchToken(MINUS, &FOLLOW_MINUS_in_expr_add2472);
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_addEx;
            	            }


            	            this->followPush(FOLLOW_expr_sum_in_expr_add2478);
            	            b=expr_sum();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_addEx;
            	            }


            	            {
            	                 val= 
            	                val
            	                 - b;
            	                 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop56;	/* break out of the loop */
            	    break;
                }
            }
            loop56: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_addEx; /* Prevent compiler warnings */
    ruleexpr_addEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_add */

/**
 * $ANTLR start expr_sum
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:451:1: expr_sum returns [ex val] : (e= expr_mul | ( MINUS )? SUM ie= indexing_ex e= expr_sum );
 */
ex
gEconParser::expr_sum()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex e;
    typedef	ex RETURN_TYPE_e;

    std::pair<idx_ex, int> ie;
    typedef	std::pair<idx_ex, int> RETURN_TYPE_ie;

    /* Initialize rule variables
     */


        bool minus = false;


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:455:5: (e= expr_mul | ( MINUS )? SUM ie= indexing_ex e= expr_sum )

            ANTLR_UINT32 alt58;

            alt58=2;

            switch ( this->LA(1) )
            {
            case MINUS:
            	{
            		switch ( this->LA(2) )
            		{
            		case ACOS:
            		case ASIN:
            		case ATAN:
            		case BACKWARDCOMP:
            		case BFALSE:
            		case BTRUE:
            		case CLETTER:
            		case COS:
            		case COSH:
            		case DELTA:
            		case DOUBLE:
            		case E:
            		case EXP:
            		case ID:
            		case INT:
            		case JACOBIAN:
            		case LANDSCAPE:
            		case LATEX:
            		case LOG:
            		case LOGF:
            		case LONG:
            		case LPAREN:
            		case OUTPUT:
            		case PROD:
            		case R:
            		case SHORT:
            		case SIN:
            		case SINH:
            		case SLETTER:
            		case SQRT:
            		case SS:
            		case TAN:
            		case TANH:
            		case VERBOSE:
            		case ZERO:
            			{
            				alt58=1;
            			}
            		    break;
            		case SUM:
            			{
            				alt58=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 58 );
            		    ex->set_state( 1 );


            		    goto ruleexpr_sumEx;

            		}

            	}
                break;
            case ACOS:
            case ASIN:
            case ATAN:
            case BACKWARDCOMP:
            case BFALSE:
            case BTRUE:
            case CLETTER:
            case COS:
            case COSH:
            case DELTA:
            case DOUBLE:
            case E:
            case EXP:
            case ID:
            case INT:
            case JACOBIAN:
            case LANDSCAPE:
            case LATEX:
            case LOG:
            case LOGF:
            case LONG:
            case LPAREN:
            case OUTPUT:
            case PROD:
            case R:
            case SHORT:
            case SIN:
            case SINH:
            case SLETTER:
            case SQRT:
            case SS:
            case TAN:
            case TANH:
            case VERBOSE:
            case ZERO:
            	{
            		alt58=1;
            	}
                break;
            case SUM:
            	{
            		alt58=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 58 );
                ex->set_state( 0 );


                goto ruleexpr_sumEx;

            }

            switch (alt58)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:455:7: e= expr_mul
        	    {
        	        this->followPush(FOLLOW_expr_mul_in_expr_sum2513);
        	        e=expr_mul();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_sumEx;
        	        }


        	        {
        	             val= e;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:456:7: ( MINUS )? SUM ie= indexing_ex e= expr_sum
        	    {
        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:456:7: ( MINUS )?
        	        {
        	            int alt57=2;
        	            switch ( this->LA(1) )
        	            {
        	                case MINUS:
        	                	{
        	                		alt57=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt57)
        	            {
        	        	case 1:
        	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:456:8: MINUS
        	        	    {
        	        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_expr_sum2524);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleexpr_sumEx;
        	        	        }


        	        	        {
        	        	             minus = true;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(SUM, &FOLLOW_SUM_in_expr_sum2531);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_sumEx;
        	        }


        	        this->followPush(FOLLOW_indexing_ex_in_expr_sum2537);
        	        ie=indexing_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_sumEx;
        	        }


        	        this->followPush(FOLLOW_expr_sum_in_expr_sum2543);
        	        e=expr_sum();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_sumEx;
        	        }


        	        {

        	                    val= ie.first ? sum(ie.first, e) : e;
        	             val= minus ? -
        	            val
        	             : val
        	            ;

        	                  
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_sumEx; /* Prevent compiler warnings */
    ruleexpr_sumEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_sum */

/**
 * $ANTLR start expr_mul
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:461:1: expr_mul returns [ex val] : a= expr_prod ( ( MUL b= expr_prod ) | ( DIV b= expr_prod ) )* ;
 */
ex
gEconParser::expr_mul()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex a;
    typedef	ex RETURN_TYPE_a;

    ex b;
    typedef	ex RETURN_TYPE_b;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:462:5: (a= expr_prod ( ( MUL b= expr_prod ) | ( DIV b= expr_prod ) )* )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:462:7: a= expr_prod ( ( MUL b= expr_prod ) | ( DIV b= expr_prod ) )*
        {
            this->followPush(FOLLOW_expr_prod_in_expr_mul2570);
            a=expr_prod();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpr_mulEx;
            }


            {
                 val= a;
                 
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:463:17: ( ( MUL b= expr_prod ) | ( DIV b= expr_prod ) )*

            for (;;)
            {
                int alt59=3;
                switch ( this->LA(1) )
                {
                case MUL:
                	{
                		alt59=1;
                	}
                    break;
                case DIV:
                	{
                		alt59=2;
                	}
                    break;

                }

                switch (alt59)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:463:18: ( MUL b= expr_prod )
            	    {
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:463:18: ( MUL b= expr_prod )
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:463:19: MUL b= expr_prod
            	        {
            	             this->matchToken(MUL, &FOLLOW_MUL_in_expr_mul2592);
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_mulEx;
            	            }


            	            this->followPush(FOLLOW_expr_prod_in_expr_mul2598);
            	            b=expr_prod();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_mulEx;
            	            }


            	            {
            	                 val= 
            	                val
            	                 * b;
            	                 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:464:18: ( DIV b= expr_prod )
            	    {
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:464:18: ( DIV b= expr_prod )
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:464:19: DIV b= expr_prod
            	        {
            	             this->matchToken(DIV, &FOLLOW_DIV_in_expr_mul2621);
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_mulEx;
            	            }


            	            this->followPush(FOLLOW_expr_prod_in_expr_mul2627);
            	            b=expr_prod();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_mulEx;
            	            }


            	            {
            	                 val= 
            	                val
            	                 / b;
            	                 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop59;	/* break out of the loop */
            	    break;
                }
            }
            loop59: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_mulEx; /* Prevent compiler warnings */
    ruleexpr_mulEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_mul */

/**
 * $ANTLR start expr_prod
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:467:1: expr_prod returns [ex val] : (e= expr_pow | ( MINUS )? PROD ie= indexing_ex e= expr_prod );
 */
ex
gEconParser::expr_prod()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex e;
    typedef	ex RETURN_TYPE_e;

    std::pair<idx_ex, int> ie;
    typedef	std::pair<idx_ex, int> RETURN_TYPE_ie;

    /* Initialize rule variables
     */


        bool minus = false;


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:471:5: (e= expr_pow | ( MINUS )? PROD ie= indexing_ex e= expr_prod )

            ANTLR_UINT32 alt61;

            alt61=2;

            switch ( this->LA(1) )
            {
            case MINUS:
            	{
            		switch ( this->LA(2) )
            		{
            		case ACOS:
            		case ASIN:
            		case ATAN:
            		case BACKWARDCOMP:
            		case BFALSE:
            		case BTRUE:
            		case CLETTER:
            		case COS:
            		case COSH:
            		case DELTA:
            		case DOUBLE:
            		case E:
            		case EXP:
            		case ID:
            		case INT:
            		case JACOBIAN:
            		case LANDSCAPE:
            		case LATEX:
            		case LOG:
            		case LOGF:
            		case LONG:
            		case LPAREN:
            		case OUTPUT:
            		case R:
            		case SHORT:
            		case SIN:
            		case SINH:
            		case SLETTER:
            		case SQRT:
            		case SS:
            		case TAN:
            		case TANH:
            		case VERBOSE:
            		case ZERO:
            			{
            				alt61=1;
            			}
            		    break;
            		case PROD:
            			{
            				alt61=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 61 );
            		    ex->set_state( 1 );


            		    goto ruleexpr_prodEx;

            		}

            	}
                break;
            case ACOS:
            case ASIN:
            case ATAN:
            case BACKWARDCOMP:
            case BFALSE:
            case BTRUE:
            case CLETTER:
            case COS:
            case COSH:
            case DELTA:
            case DOUBLE:
            case E:
            case EXP:
            case ID:
            case INT:
            case JACOBIAN:
            case LANDSCAPE:
            case LATEX:
            case LOG:
            case LOGF:
            case LONG:
            case LPAREN:
            case OUTPUT:
            case R:
            case SHORT:
            case SIN:
            case SINH:
            case SLETTER:
            case SQRT:
            case SS:
            case TAN:
            case TANH:
            case VERBOSE:
            case ZERO:
            	{
            		alt61=1;
            	}
                break;
            case PROD:
            	{
            		alt61=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 61 );
                ex->set_state( 0 );


                goto ruleexpr_prodEx;

            }

            switch (alt61)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:471:7: e= expr_pow
        	    {
        	        this->followPush(FOLLOW_expr_pow_in_expr_prod2662);
        	        e=expr_pow();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_prodEx;
        	        }


        	        {
        	             val= e;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:472:7: ( MINUS )? PROD ie= indexing_ex e= expr_prod
        	    {
        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:472:7: ( MINUS )?
        	        {
        	            int alt60=2;
        	            switch ( this->LA(1) )
        	            {
        	                case MINUS:
        	                	{
        	                		alt60=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt60)
        	            {
        	        	case 1:
        	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:472:8: MINUS
        	        	    {
        	        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_expr_prod2673);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleexpr_prodEx;
        	        	        }


        	        	        {
        	        	             minus = true;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(PROD, &FOLLOW_PROD_in_expr_prod2680);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_prodEx;
        	        }


        	        this->followPush(FOLLOW_indexing_ex_in_expr_prod2686);
        	        ie=indexing_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_prodEx;
        	        }


        	        this->followPush(FOLLOW_expr_prod_in_expr_prod2692);
        	        e=expr_prod();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_prodEx;
        	        }


        	        {

        	                    val= ie.first ? prod(ie.first, e) : e;
        	             val= minus ? -
        	            val
        	             : val
        	            ;

        	                  
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_prodEx; /* Prevent compiler warnings */
    ruleexpr_prodEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_prod */

/**
 * $ANTLR start list_indexing_ex
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:478:1: list_indexing_ex returns [vec_idx_ex lie] : (ie= indexing_ex )* ;
 */
vec_idx_ex
gEconParser::list_indexing_ex()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vec_idx_ex lie;


    std::pair<idx_ex, int> ie;
    typedef	std::pair<idx_ex, int> RETURN_TYPE_ie;

    /* Initialize rule variables
     */


        bool toomany = false;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:482:5: ( (ie= indexing_ex )* )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:482:7: (ie= indexing_ex )*
        {
            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:482:7: (ie= indexing_ex )*

            for (;;)
            {
                int alt62=2;
                switch ( this->LA(1) )
                {
                case LANGBR:
                	{
                		alt62=1;
                	}
                    break;

                }

                switch (alt62)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:482:8: ie= indexing_ex
            	    {
            	        this->followPush(FOLLOW_indexing_ex_in_list_indexing_ex2726);
            	        ie=indexing_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_indexing_exEx;
            	        }


            	        {

            	                    lie.push_back(ie.first);
            	                    if (!toomany && (lie.size() > 2)) {
            	                        toomany = true;
            	                        errors.push_back("up to 2 indexing expressions in a template declaration are supported in this context; error near line "
            	                                            + num2str(ie.second));
            	                    }
            	                  
            	        }


            	    }
            	    break;

            	default:
            	    goto loop62;	/* break out of the loop */
            	    break;
                }
            }
            loop62: ; /* Jump out to here if this rule does not match */


            {
                 while (lie.size() < 2) lie.push_back(idx_ex()); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_indexing_exEx; /* Prevent compiler warnings */
    rulelist_indexing_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return lie;
}
/* $ANTLR end list_indexing_ex */

/**
 * $ANTLR start list_lindexing_ex
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:494:1: list_lindexing_ex returns [vec_idx_ex lie] : (ie= indexing_ex )* ;
 */
vec_idx_ex
gEconParser::list_lindexing_ex()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vec_idx_ex lie;


    std::pair<idx_ex, int> ie;
    typedef	std::pair<idx_ex, int> RETURN_TYPE_ie;

    /* Initialize rule variables
     */


        bool toomany = false;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:498:5: ( (ie= indexing_ex )* )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:498:7: (ie= indexing_ex )*
        {
            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:498:7: (ie= indexing_ex )*

            for (;;)
            {
                int alt63=2;
                switch ( this->LA(1) )
                {
                case LANGBR:
                	{
                		alt63=1;
                	}
                    break;

                }

                switch (alt63)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:498:8: ie= indexing_ex
            	    {
            	        this->followPush(FOLLOW_indexing_ex_in_list_lindexing_ex2770);
            	        ie=indexing_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_lindexing_exEx;
            	        }


            	        {

            	                    lie.push_back(ie.first);
            	                    if (!toomany && (lie.size() > 4)) {
            	                        toomany = true;
            	                        errors.push_back("up to 4 indexing expressions in a template declaration are supported in this context; error near line "
            	                                            + num2str(ie.second));
            	                    }
            	                  
            	        }


            	    }
            	    break;

            	default:
            	    goto loop63;	/* break out of the loop */
            	    break;
                }
            }
            loop63: ; /* Jump out to here if this rule does not match */


            {
                 while (lie.size() < 4) lie.push_back(idx_ex()); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_lindexing_exEx; /* Prevent compiler warnings */
    rulelist_lindexing_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return lie;
}
/* $ANTLR end list_lindexing_ex */

/**
 * $ANTLR start indexing_ex
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:510:1: indexing_ex returns [std::pair<idx_ex, int> val] : ( LANGBR iv= id_str DBLCOLON is= id_str RANGBR | LANGBR iv= id_str DBLCOLON is= id_str BACKSLASH ei= id_str RANGBR | LANGBR iv= id_str DBLCOLON is= id_str BACKSLASH QUOTE ei= idx_str QUOTE RANGBR );
 */
std::pair<idx_ex, int>
gEconParser::indexing_ex()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::pair<idx_ex, int> val;


    const CommonTokenType*    RANGBR29;
    const CommonTokenType*    RANGBR30;
    const CommonTokenType*    RANGBR31;
    std::pair<std::string, int> iv;
    typedef	std::pair<std::string, int> RETURN_TYPE_iv;

    std::pair<std::string, int> is;
    typedef	std::pair<std::string, int> RETURN_TYPE_is;

    std::pair<std::string, int> ei;
    typedef	std::pair<std::string, int> RETURN_TYPE_ei;

    /* Initialize rule variables
     */


        idx_set iset;

    RANGBR29       = NULL;
    RANGBR30       = NULL;
    RANGBR31       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:514:5: ( LANGBR iv= id_str DBLCOLON is= id_str RANGBR | LANGBR iv= id_str DBLCOLON is= id_str BACKSLASH ei= id_str RANGBR | LANGBR iv= id_str DBLCOLON is= id_str BACKSLASH QUOTE ei= idx_str QUOTE RANGBR )

            ANTLR_UINT32 alt64;

            alt64=3;

            switch ( this->LA(1) )
            {
            case LANGBR:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 2 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case SLETTER:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 3 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case CLETTER:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 4 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case OUTPUT:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 5 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case R:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 6 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case LATEX:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 7 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case LANDSCAPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 8 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case LOGF:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 9 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case LONG:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 10 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case SHORT:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 11 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case BTRUE:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 12 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case BFALSE:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 13 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case SS:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 14 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case VERBOSE:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 15 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case BACKWARDCOMP:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 16 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case JACOBIAN:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 33 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt64=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt64=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case JACOBIAN:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt64=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 64 );
            										    ex->set_state( 36 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 64 );
            								    ex->set_state( 34 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 64 );
            						    ex->set_state( 18 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 64 );
            				    ex->set_state( 17 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 64 );
            		    ex->set_state( 1 );


            		    goto ruleindexing_exEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 64 );
                ex->set_state( 0 );


                goto ruleindexing_exEx;

            }

            switch (alt64)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:514:7: LANGBR iv= id_str DBLCOLON is= id_str RANGBR
        	    {
        	         this->matchToken(LANGBR, &FOLLOW_LANGBR_in_indexing_ex2809);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	        this->followPush(FOLLOW_id_str_in_indexing_ex2815);
        	        iv=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	         this->matchToken(DBLCOLON, &FOLLOW_DBLCOLON_in_indexing_ex2817);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	        this->followPush(FOLLOW_id_str_in_indexing_ex2823);
        	        is=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	        RANGBR29 =  this->matchToken(RANGBR, &FOLLOW_RANGBR_in_indexing_ex2825);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	        {

        	                    if (!model_obj.is_set(is.first))
        	                        model_obj.error("undefined set \"" + is.first + "\" used in expression; error near line "
        	                                        + num2str((RANGBR29->get_line())) + ", pos: " + num2str(RANGBR29->get_charPositionInLine() + 1));
        	                    iset = model_obj.get_set(is.first);
        	                    if (!iset.size())
        	                        model_obj.warning("empty set \"" + is.first + "\" used in expression; warning near line "
        	                                        + num2str((RANGBR29->get_line())) + ", pos: " + num2str(RANGBR29->get_charPositionInLine() + 1));
        	                    
        	            val= std::pair<idx_ex, int>(idx_ex(iv.first, iset), (RANGBR29->get_line()));

        	                  
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:524:7: LANGBR iv= id_str DBLCOLON is= id_str BACKSLASH ei= id_str RANGBR
        	    {
        	         this->matchToken(LANGBR, &FOLLOW_LANGBR_in_indexing_ex2835);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	        this->followPush(FOLLOW_id_str_in_indexing_ex2841);
        	        iv=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	         this->matchToken(DBLCOLON, &FOLLOW_DBLCOLON_in_indexing_ex2843);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	        this->followPush(FOLLOW_id_str_in_indexing_ex2849);
        	        is=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	         this->matchToken(BACKSLASH, &FOLLOW_BACKSLASH_in_indexing_ex2851);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	        this->followPush(FOLLOW_id_str_in_indexing_ex2857);
        	        ei=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	        RANGBR30 =  this->matchToken(RANGBR, &FOLLOW_RANGBR_in_indexing_ex2859);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	        {

        	                    if (!model_obj.is_set(is.first))
        	                        model_obj.error("undefined set \"" + is.first + "\" used in expression; error near line "
        	                                        + num2str((RANGBR30->get_line())) + ", pos: " + num2str(RANGBR30->get_charPositionInLine() + 1));
        	                    iset = model_obj.get_set(is.first);
        	                    if (!iset.size())
        	                        model_obj.warning("empty set \"" + is.first + "\" used in expression; warning near line "
        	                                        + num2str((RANGBR30->get_line())) + ", pos: " + num2str(RANGBR30->get_charPositionInLine() + 1));
        	                    if (iv.first == ei.first)
        	                        model_obj.error("excluded index (\"" + ei.first + "\") is the same as free index in indexing expression; error near line " + num2str((RANGBR30->get_line())) + ", pos: " + num2str(RANGBR30->get_charPositionInLine() + 1));
        	                    
        	            val= std::pair<idx_ex, int>(idx_ex(iv.first, iset, ei.first, false), (RANGBR30->get_line()));

        	                  
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:536:7: LANGBR iv= id_str DBLCOLON is= id_str BACKSLASH QUOTE ei= idx_str QUOTE RANGBR
        	    {
        	         this->matchToken(LANGBR, &FOLLOW_LANGBR_in_indexing_ex2869);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	        this->followPush(FOLLOW_id_str_in_indexing_ex2875);
        	        iv=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	         this->matchToken(DBLCOLON, &FOLLOW_DBLCOLON_in_indexing_ex2877);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	        this->followPush(FOLLOW_id_str_in_indexing_ex2883);
        	        is=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	         this->matchToken(BACKSLASH, &FOLLOW_BACKSLASH_in_indexing_ex2885);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_indexing_ex2887);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	        this->followPush(FOLLOW_idx_str_in_indexing_ex2893);
        	        ei=idx_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_indexing_ex2895);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	        RANGBR31 =  this->matchToken(RANGBR, &FOLLOW_RANGBR_in_indexing_ex2897);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }


        	        {

        	                    if (!model_obj.is_set(is.first))
        	                        model_obj.error("undefined set \"" + is.first + "\" used in expression; error near line "
        	                                        + num2str((RANGBR31->get_line())) + ", pos: " + num2str(RANGBR31->get_charPositionInLine() + 1));
        	                    iset = model_obj.get_set(is.first);
        	                    if (!iset.size())
        	                        model_obj.warning("empty set \"" + is.first + "\" used in expression; warning near line "
        	                                        + num2str((RANGBR31->get_line())) + ", pos: " + num2str(RANGBR31->get_charPositionInLine() + 1));
        	                    
        	            val= std::pair<idx_ex, int>(idx_ex(iv.first, iset, ei.first, true), (RANGBR31->get_line()));

        	                  
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleindexing_exEx; /* Prevent compiler warnings */
    ruleindexing_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end indexing_ex */

/**
 * $ANTLR start expr_pow
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:548:1: expr_pow returns [ex val] : ( MINUS )? a= expr_atom ( POW ( MINUS )? b= expr_atom )* ;
 */
ex
gEconParser::expr_pow()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex a;
    typedef	ex RETURN_TYPE_a;

    ex b;
    typedef	ex RETURN_TYPE_b;

    /* Initialize rule variables
     */


        bool min = false;
        vec_ex ve;
        std::vector<bool> vs;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:554:5: ( ( MINUS )? a= expr_atom ( POW ( MINUS )? b= expr_atom )* )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:554:7: ( MINUS )? a= expr_atom ( POW ( MINUS )? b= expr_atom )*
        {
            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:554:7: ( MINUS )?
            {
                int alt65=2;
                switch ( this->LA(1) )
                {
                    case MINUS:
                    	{
                    		alt65=1;
                    	}
                        break;
                }

                switch (alt65)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:554:8: MINUS
            	    {
            	         this->matchToken(MINUS, &FOLLOW_MINUS_in_expr_pow2926);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpr_powEx;
            	        }


            	        {
            	             min = true; 
            	        }


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_expr_atom_in_expr_pow2944);
            a=expr_atom();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpr_powEx;
            }


            {
                 ve.push_back(a); vs.push_back(min); 
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:556:9: ( POW ( MINUS )? b= expr_atom )*

            for (;;)
            {
                int alt67=2;
                switch ( this->LA(1) )
                {
                case POW:
                	{
                		alt67=1;
                	}
                    break;

                }

                switch (alt67)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:556:10: POW ( MINUS )? b= expr_atom
            	    {
            	         this->matchToken(POW, &FOLLOW_POW_in_expr_pow2957);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpr_powEx;
            	        }


            	        {
            	             min = false; 
            	        }


            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:556:31: ( MINUS )?
            	        {
            	            int alt66=2;
            	            switch ( this->LA(1) )
            	            {
            	                case MINUS:
            	                	{
            	                		alt66=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt66)
            	            {
            	        	case 1:
            	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:556:32: MINUS
            	        	    {
            	        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_expr_pow2962);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleexpr_powEx;
            	        	        }


            	        	        {
            	        	             min = true; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_expr_atom_in_expr_pow2972);
            	        b=expr_atom();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpr_powEx;
            	        }


            	        {
            	             ve.push_back(b); vs.push_back(min); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop67;	/* break out of the loop */
            	    break;
                }
            }
            loop67: ; /* Jump out to here if this rule does not match */


            {

                            int i = ve.size() - 1;
                            val = ve[i];
                            if (vs[i]) val = -val;
                            for (--i; i >= 0; --i) {
                                val = pow(ve[i], val);
                                if (vs[i]) val = -val;
                            }
                        
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_powEx; /* Prevent compiler warnings */
    ruleexpr_powEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_pow */

/**
 * $ANTLR start expr_atom
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:570:1: expr_atom returns [ex val] : (a= atom_num |a= atom_id |a= atom_delta |a= expr_func |a= expr_e | LPAREN (a= expr ) RPAREN );
 */
ex
gEconParser::expr_atom()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex a;
    typedef	ex RETURN_TYPE_a;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:571:5: (a= atom_num |a= atom_id |a= atom_delta |a= expr_func |a= expr_e | LPAREN (a= expr ) RPAREN )

            ANTLR_UINT32 alt68;

            alt68=6;

            switch ( this->LA(1) )
            {
            case DOUBLE:
            case INT:
            case ZERO:
            	{
            		alt68=1;
            	}
                break;
            case BACKWARDCOMP:
            case BFALSE:
            case BTRUE:
            case CLETTER:
            case ID:
            case JACOBIAN:
            case LANDSCAPE:
            case LATEX:
            case LOGF:
            case LONG:
            case OUTPUT:
            case R:
            case SHORT:
            case SLETTER:
            case SS:
            case VERBOSE:
            	{
            		alt68=2;
            	}
                break;
            case DELTA:
            	{
            		alt68=3;
            	}
                break;
            case ACOS:
            case ASIN:
            case ATAN:
            case COS:
            case COSH:
            case EXP:
            case LOG:
            case SIN:
            case SINH:
            case SQRT:
            case TAN:
            case TANH:
            	{
            		alt68=4;
            	}
                break;
            case E:
            	{
            		alt68=5;
            	}
                break;
            case LPAREN:
            	{
            		alt68=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 68 );
                ex->set_state( 0 );


                goto ruleexpr_atomEx;

            }

            switch (alt68)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:571:7: a= atom_num
        	    {
        	        this->followPush(FOLLOW_atom_num_in_expr_atom3020);
        	        a=atom_num();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_atomEx;
        	        }


        	        {
        	             val= a;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:572:7: a= atom_id
        	    {
        	        this->followPush(FOLLOW_atom_id_in_expr_atom3034);
        	        a=atom_id();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_atomEx;
        	        }


        	        {
        	             val= a;
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:573:7: a= atom_delta
        	    {
        	        this->followPush(FOLLOW_atom_delta_in_expr_atom3048);
        	        a=atom_delta();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_atomEx;
        	        }


        	        {
        	             val= a;
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:574:7: a= expr_func
        	    {
        	        this->followPush(FOLLOW_expr_func_in_expr_atom3062);
        	        a=expr_func();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_atomEx;
        	        }


        	        {
        	             val= a;
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:575:7: a= expr_e
        	    {
        	        this->followPush(FOLLOW_expr_e_in_expr_atom3076);
        	        a=expr_e();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_atomEx;
        	        }


        	        {
        	             val= a;
        	             
        	        }


        	    }
        	    break;
        	case 6:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:576:7: LPAREN (a= expr ) RPAREN
        	    {
        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_atom3086);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_atomEx;
        	        }


        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:576:14: (a= expr )
        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:576:15: a= expr
        	        {
        	            this->followPush(FOLLOW_expr_in_expr_atom3093);
        	            a=expr();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto ruleexpr_atomEx;
        	            }


        	            {
        	                 val= a;
        	                 
        	            }


        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_atom3098);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_atomEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_atomEx; /* Prevent compiler warnings */
    ruleexpr_atomEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_atom */

/**
 * $ANTLR start expr_func
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:579:1: expr_func returns [ex val] : ( SQRT LPAREN a= expr RPAREN | EXP LPAREN a= expr RPAREN | LOG LPAREN a= expr RPAREN | SIN LPAREN a= expr RPAREN | COS LPAREN a= expr RPAREN | TAN LPAREN a= expr RPAREN | ASIN LPAREN a= expr RPAREN | ACOS LPAREN a= expr RPAREN | ATAN LPAREN a= expr RPAREN | SINH LPAREN a= expr RPAREN | COSH LPAREN a= expr RPAREN | TANH LPAREN a= expr RPAREN );
 */
ex
gEconParser::expr_func()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex a;
    typedef	ex RETURN_TYPE_a;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:580:5: ( SQRT LPAREN a= expr RPAREN | EXP LPAREN a= expr RPAREN | LOG LPAREN a= expr RPAREN | SIN LPAREN a= expr RPAREN | COS LPAREN a= expr RPAREN | TAN LPAREN a= expr RPAREN | ASIN LPAREN a= expr RPAREN | ACOS LPAREN a= expr RPAREN | ATAN LPAREN a= expr RPAREN | SINH LPAREN a= expr RPAREN | COSH LPAREN a= expr RPAREN | TANH LPAREN a= expr RPAREN )

            ANTLR_UINT32 alt69;

            alt69=12;

            switch ( this->LA(1) )
            {
            case SQRT:
            	{
            		alt69=1;
            	}
                break;
            case EXP:
            	{
            		alt69=2;
            	}
                break;
            case LOG:
            	{
            		alt69=3;
            	}
                break;
            case SIN:
            	{
            		alt69=4;
            	}
                break;
            case COS:
            	{
            		alt69=5;
            	}
                break;
            case TAN:
            	{
            		alt69=6;
            	}
                break;
            case ASIN:
            	{
            		alt69=7;
            	}
                break;
            case ACOS:
            	{
            		alt69=8;
            	}
                break;
            case ATAN:
            	{
            		alt69=9;
            	}
                break;
            case SINH:
            	{
            		alt69=10;
            	}
                break;
            case COSH:
            	{
            		alt69=11;
            	}
                break;
            case TANH:
            	{
            		alt69=12;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 69 );
                ex->set_state( 0 );


                goto ruleexpr_funcEx;

            }

            switch (alt69)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:580:7: SQRT LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(SQRT, &FOLLOW_SQRT_in_expr_func3119);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3121);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3127);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3129);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        {
        	             val= sqrt(a);
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:581:7: EXP LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(EXP, &FOLLOW_EXP_in_expr_func3139);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3141);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3147);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3149);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        {
        	             val= exp(a);
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:582:7: LOG LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(LOG, &FOLLOW_LOG_in_expr_func3159);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3161);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3167);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3169);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        {
        	             val= log(a);
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:583:7: SIN LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(SIN, &FOLLOW_SIN_in_expr_func3179);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3181);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3187);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3189);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        {
        	             val= sin(a);
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:584:7: COS LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(COS, &FOLLOW_COS_in_expr_func3199);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3201);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3207);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3209);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        {
        	             val= cos(a);
        	             
        	        }


        	    }
        	    break;
        	case 6:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:585:7: TAN LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(TAN, &FOLLOW_TAN_in_expr_func3219);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3221);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3227);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3229);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        {
        	             val= tan(a);
        	             
        	        }


        	    }
        	    break;
        	case 7:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:586:7: ASIN LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(ASIN, &FOLLOW_ASIN_in_expr_func3239);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3241);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3247);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3249);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        {
        	             val= asin(a);
        	             
        	        }


        	    }
        	    break;
        	case 8:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:587:7: ACOS LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(ACOS, &FOLLOW_ACOS_in_expr_func3259);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3261);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3267);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3269);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        {
        	             val= acos(a);
        	             
        	        }


        	    }
        	    break;
        	case 9:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:588:7: ATAN LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(ATAN, &FOLLOW_ATAN_in_expr_func3279);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3281);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3287);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3289);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        {
        	             val= atan(a);
        	             
        	        }


        	    }
        	    break;
        	case 10:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:589:7: SINH LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(SINH, &FOLLOW_SINH_in_expr_func3299);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3301);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3307);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3309);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        {
        	             val= sinh(a);
        	             
        	        }


        	    }
        	    break;
        	case 11:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:590:7: COSH LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(COSH, &FOLLOW_COSH_in_expr_func3319);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3321);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3327);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3329);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        {
        	             val= cosh(a);
        	             
        	        }


        	    }
        	    break;
        	case 12:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:591:7: TANH LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(TANH, &FOLLOW_TANH_in_expr_func3339);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3341);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3347);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3349);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }


        	        {
        	             val= tanh(a);
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_funcEx; /* Prevent compiler warnings */
    ruleexpr_funcEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_func */

/**
 * $ANTLR start expr_e
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:595:1: expr_e returns [ex val] : E LBRACK l= time_idx RBRACK LBRACK a= expr RBRACK ;
 */
ex
gEconParser::expr_e()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    int l;
    typedef	int RETURN_TYPE_l;

    ex a;
    typedef	ex RETURN_TYPE_a;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:596:5: ( E LBRACK l= time_idx RBRACK LBRACK a= expr RBRACK )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:596:7: E LBRACK l= time_idx RBRACK LBRACK a= expr RBRACK
        {
             this->matchToken(E, &FOLLOW_E_in_expr_e3373);
            if  (this->hasException())
            {
                goto ruleexpr_eEx;
            }


             this->matchToken(LBRACK, &FOLLOW_LBRACK_in_expr_e3375);
            if  (this->hasException())
            {
                goto ruleexpr_eEx;
            }


            this->followPush(FOLLOW_time_idx_in_expr_e3381);
            l=time_idx();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpr_eEx;
            }


             this->matchToken(RBRACK, &FOLLOW_RBRACK_in_expr_e3383);
            if  (this->hasException())
            {
                goto ruleexpr_eEx;
            }


             this->matchToken(LBRACK, &FOLLOW_LBRACK_in_expr_e3385);
            if  (this->hasException())
            {
                goto ruleexpr_eEx;
            }


            this->followPush(FOLLOW_expr_in_expr_e3391);
            a=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpr_eEx;
            }


             this->matchToken(RBRACK, &FOLLOW_RBRACK_in_expr_e3393);
            if  (this->hasException())
            {
                goto ruleexpr_eEx;
            }


            {
                 val= symbolic::E(a, l);

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_eEx; /* Prevent compiler warnings */
    ruleexpr_eEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_e */

/**
 * $ANTLR start atom_delta
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:599:1: atom_delta returns [ex val] : ( DELTA LANGBR i1= id_str COMMA i2= id_str RANGBR | DELTA LANGBR QUOTE i1= idx_str QUOTE COMMA i2= idx_str RANGBR | DELTA LANGBR i1= id_str COMMA QUOTE i2= idx_str QUOTE RANGBR | DELTA LANGBR QUOTE i1= idx_str QUOTE COMMA QUOTE i2= idx_str QUOTE RANGBR );
 */
ex
gEconParser::atom_delta()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    std::pair<std::string, int> i1;
    typedef	std::pair<std::string, int> RETURN_TYPE_i1;

    std::pair<std::string, int> i2;
    typedef	std::pair<std::string, int> RETURN_TYPE_i2;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:600:5: ( DELTA LANGBR i1= id_str COMMA i2= id_str RANGBR | DELTA LANGBR QUOTE i1= idx_str QUOTE COMMA i2= idx_str RANGBR | DELTA LANGBR i1= id_str COMMA QUOTE i2= idx_str QUOTE RANGBR | DELTA LANGBR QUOTE i1= idx_str QUOTE COMMA QUOTE i2= idx_str QUOTE RANGBR )

            ANTLR_UINT32 alt70;

            alt70=4;

            switch ( this->LA(1) )
            {
            case DELTA:
            	{
            		switch ( this->LA(2) )
            		{
            		case LANGBR:
            			{
            				switch ( this->LA(3) )
            				{
            				case QUOTE:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 20 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 21 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 22 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 23 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 24 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 25 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 26 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 27 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 28 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 29 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 30 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 31 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 32 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 33 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 34 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case JACOBIAN:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 35 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case E:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 36 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case INF:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 37 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case ZERO:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 38 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case INT:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case DID:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt70=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case JACOBIAN:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt70=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 70 );
            												    ex->set_state( 45 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 70 );
            										    ex->set_state( 42 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 40 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 3 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case ID:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 4 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case SLETTER:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 5 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case CLETTER:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 6 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case OUTPUT:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 7 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case R:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 8 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case LATEX:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 9 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case LANDSCAPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 10 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case LOGF:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 11 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case LONG:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 12 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case SHORT:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 13 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case BTRUE:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 14 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case BFALSE:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 15 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case SS:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 16 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case VERBOSE:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 17 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case BACKWARDCOMP:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 18 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case JACOBIAN:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt70=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case JACOBIAN:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt70=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 70 );
            								    ex->set_state( 41 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 70 );
            						    ex->set_state( 19 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 70 );
            				    ex->set_state( 2 );


            				    goto ruleatom_deltaEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 70 );
            		    ex->set_state( 1 );


            		    goto ruleatom_deltaEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 70 );
                ex->set_state( 0 );


                goto ruleatom_deltaEx;

            }

            switch (alt70)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:600:7: DELTA LANGBR i1= id_str COMMA i2= id_str RANGBR
        	    {
        	         this->matchToken(DELTA, &FOLLOW_DELTA_in_atom_delta3416);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(LANGBR, &FOLLOW_LANGBR_in_atom_delta3418);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	        this->followPush(FOLLOW_id_str_in_atom_delta3424);
        	        i1=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_atom_delta3426);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	        this->followPush(FOLLOW_id_str_in_atom_delta3432);
        	        i2=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(RANGBR, &FOLLOW_RANGBR_in_atom_delta3434);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	        {
        	             val= ex(false, i1.first, false, i2.first);
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:601:7: DELTA LANGBR QUOTE i1= idx_str QUOTE COMMA i2= idx_str RANGBR
        	    {
        	         this->matchToken(DELTA, &FOLLOW_DELTA_in_atom_delta3444);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(LANGBR, &FOLLOW_LANGBR_in_atom_delta3446);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3448);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	        this->followPush(FOLLOW_idx_str_in_atom_delta3454);
        	        i1=idx_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3456);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_atom_delta3458);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	        this->followPush(FOLLOW_idx_str_in_atom_delta3464);
        	        i2=idx_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(RANGBR, &FOLLOW_RANGBR_in_atom_delta3466);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	        {
        	             val= ex(true, i1.first, false, i2.first);
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:602:7: DELTA LANGBR i1= id_str COMMA QUOTE i2= idx_str QUOTE RANGBR
        	    {
        	         this->matchToken(DELTA, &FOLLOW_DELTA_in_atom_delta3476);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(LANGBR, &FOLLOW_LANGBR_in_atom_delta3478);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	        this->followPush(FOLLOW_id_str_in_atom_delta3484);
        	        i1=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_atom_delta3486);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3488);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	        this->followPush(FOLLOW_idx_str_in_atom_delta3494);
        	        i2=idx_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3496);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(RANGBR, &FOLLOW_RANGBR_in_atom_delta3498);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	        {
        	             val= ex(false, i1.first, true, i2.first);
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:603:7: DELTA LANGBR QUOTE i1= idx_str QUOTE COMMA QUOTE i2= idx_str QUOTE RANGBR
        	    {
        	         this->matchToken(DELTA, &FOLLOW_DELTA_in_atom_delta3508);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(LANGBR, &FOLLOW_LANGBR_in_atom_delta3510);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3512);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	        this->followPush(FOLLOW_idx_str_in_atom_delta3518);
        	        i1=idx_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3520);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_atom_delta3522);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3524);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	        this->followPush(FOLLOW_idx_str_in_atom_delta3530);
        	        i2=idx_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3532);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	         this->matchToken(RANGBR, &FOLLOW_RANGBR_in_atom_delta3534);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }


        	        {
        	             val= ex(true, i1.first, true, i2.first);
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatom_deltaEx; /* Prevent compiler warnings */
    ruleatom_deltaEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_delta */

/**
 * $ANTLR start atom_id
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:606:1: atom_id returns [ex val] : (v= atom_id_nt |v= atom_id_t );
 */
ex
gEconParser::atom_id()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex v;
    typedef	ex RETURN_TYPE_v;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:607:5: (v= atom_id_nt |v= atom_id_t )

            ANTLR_UINT32 alt71;

            alt71=2;

            alt71 = cdfa71.predict(this, this->get_rec(), this->get_istream(), cdfa71 );
            if  (this->hasException())
            {
                goto ruleatom_idEx;
            }

            switch (alt71)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:607:7: v= atom_id_nt
        	    {
        	        this->followPush(FOLLOW_atom_id_nt_in_atom_id3561);
        	        v=atom_id_nt();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_idEx;
        	        }


        	        {
        	             val= v;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:608:7: v= atom_id_t
        	    {
        	        this->followPush(FOLLOW_atom_id_t_in_atom_id3575);
        	        v=atom_id_t();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_idEx;
        	        }


        	        {
        	             val= v;
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatom_idEx; /* Prevent compiler warnings */
    ruleatom_idEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_id */

/**
 * $ANTLR start atom_id_t
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:611:1: atom_id_t returns [ex val] : (ids= id_str LBRACK l= time_idx RBRACK |ids= id_str li= list_idx LBRACK l= time_idx RBRACK );
 */
ex
gEconParser::atom_id_t()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    std::pair<std::string, int> ids;
    typedef	std::pair<std::string, int> RETURN_TYPE_ids;

    int l;
    typedef	int RETURN_TYPE_l;

    std::vector<std::pair<bool, std::string> > li;
    typedef	std::vector<std::pair<bool, std::string> > RETURN_TYPE_li;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:612:5: (ids= id_str LBRACK l= time_idx RBRACK |ids= id_str li= list_idx LBRACK l= time_idx RBRACK )

            ANTLR_UINT32 alt72;

            alt72=2;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 1 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case SLETTER:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 2 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case CLETTER:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 3 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case OUTPUT:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 4 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case R:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 5 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case LATEX:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 6 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case LANDSCAPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 7 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case LOGF:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 8 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case LONG:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 9 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case SHORT:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 10 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case BTRUE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 11 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case BFALSE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 12 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case SS:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 13 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case VERBOSE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 14 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case BACKWARDCOMP:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 15 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case JACOBIAN:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt72=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt72=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 16 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 72 );
                ex->set_state( 0 );


                goto ruleatom_id_tEx;

            }

            switch (alt72)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:612:7: ids= id_str LBRACK l= time_idx RBRACK
        	    {
        	        this->followPush(FOLLOW_id_str_in_atom_id_t3602);
        	        ids=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }


        	         this->matchToken(LBRACK, &FOLLOW_LBRACK_in_atom_id_t3604);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }


        	        this->followPush(FOLLOW_time_idx_in_atom_id_t3610);
        	        l=time_idx();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }


        	         this->matchToken(RBRACK, &FOLLOW_RBRACK_in_atom_id_t3612);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }


        	        {
        	             val= ex(ids.first, l);
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:613:7: ids= id_str li= list_idx LBRACK l= time_idx RBRACK
        	    {
        	        this->followPush(FOLLOW_id_str_in_atom_id_t3626);
        	        ids=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }


        	        this->followPush(FOLLOW_list_idx_in_atom_id_t3632);
        	        li=list_idx();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }


        	         this->matchToken(LBRACK, &FOLLOW_LBRACK_in_atom_id_t3634);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }


        	        this->followPush(FOLLOW_time_idx_in_atom_id_t3640);
        	        l=time_idx();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }


        	         this->matchToken(RBRACK, &FOLLOW_RBRACK_in_atom_id_t3642);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }


        	        {

        	                        switch(li.size()) {
        	                            case 1:
        	                                val= ex(ids.first, l, li[0].first, li[0].second);

        	                                break;
        	                            case 2:
        	                                val= ex(ids.first, l, li[0].first, li[0].second, li[1].first, li[1].second);

        	                                break;
        	                            case 3:
        	                                val= ex(ids.first, l, li[0].first, li[0].second, li[1].first, li[1].second,
        	                                                        li[2].first, li[2].second);

        	                                break;
        	                            case 4:
        	                                val= ex(ids.first, l, li[0].first, li[0].second, li[1].first, li[1].second,
        	                                                        li[2].first, li[2].second, li[3].first, li[3].second);

        	                                break;
        	                        }
        	                    
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatom_id_tEx; /* Prevent compiler warnings */
    ruleatom_id_tEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_id_t */

/**
 * $ANTLR start time_idx
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:633:1: time_idx returns [int val] : (|l= atom_int | PLUS l= atom_int | MINUS l= atom_int | SS | MINUS INF );
 */
int
gEconParser::time_idx()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    int val;


    int l;
    typedef	int RETURN_TYPE_l;

    /* Initialize rule variables
     */


        val= 0;



 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:637:5: (|l= atom_int | PLUS l= atom_int | MINUS l= atom_int | SS | MINUS INF )

            ANTLR_UINT32 alt73;

            alt73=6;

            switch ( this->LA(1) )
            {
            case RBRACK:
            	{
            		alt73=1;
            	}
                break;
            case INT:
            case ZERO:
            	{
            		alt73=2;
            	}
                break;
            case PLUS:
            	{
            		alt73=3;
            	}
                break;
            case MINUS:
            	{
            		switch ( this->LA(2) )
            		{
            		case INF:
            			{
            				alt73=6;
            			}
            		    break;
            		case INT:
            		case ZERO:
            			{
            				alt73=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 4 );


            		    goto ruletime_idxEx;

            		}

            	}
                break;
            case SS:
            	{
            		alt73=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 73 );
                ex->set_state( 0 );


                goto ruletime_idxEx;

            }

            switch (alt73)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:638:5: 
        	    {
        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:638:7: l= atom_int
        	    {
        	        this->followPush(FOLLOW_atom_int_in_time_idx3680);
        	        l=atom_int();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }


        	        {
        	             val= l;
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:639:7: PLUS l= atom_int
        	    {
        	         this->matchToken(PLUS, &FOLLOW_PLUS_in_time_idx3690);
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }


        	        this->followPush(FOLLOW_atom_int_in_time_idx3696);
        	        l=atom_int();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }


        	        {
        	             val= l;
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:640:7: MINUS l= atom_int
        	    {
        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_time_idx3706);
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }


        	        this->followPush(FOLLOW_atom_int_in_time_idx3712);
        	        l=atom_int();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }


        	        {
        	             val= -l;
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:641:7: SS
        	    {
        	         this->matchToken(SS, &FOLLOW_SS_in_time_idx3722);
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }


        	        {
        	             val= INT_MIN;
        	             
        	        }


        	    }
        	    break;
        	case 6:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:642:7: MINUS INF
        	    {
        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_time_idx3732);
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }


        	         this->matchToken(INF, &FOLLOW_INF_in_time_idx3734);
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }


        	        {
        	             val= INT_MIN;
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruletime_idxEx; /* Prevent compiler warnings */
    ruletime_idxEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end time_idx */

/**
 * $ANTLR start atom_id_nt
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:645:1: atom_id_nt returns [ex val] : (ids= id_str |ids= id_str li= list_idx );
 */
ex
gEconParser::atom_id_nt()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    std::pair<std::string, int> ids;
    typedef	std::pair<std::string, int> RETURN_TYPE_ids;

    std::vector<std::pair<bool, std::string> > li;
    typedef	std::vector<std::pair<bool, std::string> > RETURN_TYPE_li;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:646:5: (ids= id_str |ids= id_str li= list_idx )

            ANTLR_UINT32 alt74;

            alt74=2;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 1 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case SLETTER:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 2 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case CLETTER:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 3 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case OUTPUT:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 4 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case R:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 5 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case LATEX:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 6 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case LANDSCAPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 7 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case LOGF:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 8 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case LONG:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 9 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case SHORT:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 10 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case BTRUE:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 11 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case BFALSE:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 12 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case SS:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 13 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case VERBOSE:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 14 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case BACKWARDCOMP:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 15 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case JACOBIAN:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt74=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt74=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 74 );
            		    ex->set_state( 16 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 74 );
                ex->set_state( 0 );


                goto ruleatom_id_ntEx;

            }

            switch (alt74)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:646:7: ids= id_str
        	    {
        	        this->followPush(FOLLOW_id_str_in_atom_id_nt3761);
        	        ids=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_ntEx;
        	        }


        	        {
        	             val= ex(ids.first);
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:647:7: ids= id_str li= list_idx
        	    {
        	        this->followPush(FOLLOW_id_str_in_atom_id_nt3775);
        	        ids=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_ntEx;
        	        }


        	        this->followPush(FOLLOW_list_idx_in_atom_id_nt3781);
        	        li=list_idx();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_ntEx;
        	        }


        	        {

        	                        switch(li.size()) {
        	                            case 1:
        	                                val= ex(ids.first, li[0].first, li[0].second);

        	                                break;
        	                            case 2:
        	                                val= ex(ids.first, li[0].first, li[0].second, li[1].first, li[1].second);

        	                                break;
        	                            case 3:
        	                                val= ex(ids.first, li[0].first, li[0].second, li[1].first, li[1].second,
        	                                                     li[2].first, li[2].second);

        	                                break;
        	                            default:
        	                                val= ex(ids.first, li[0].first, li[0].second, li[1].first, li[1].second,
        	                                                     li[2].first, li[2].second, li[3].first, li[3].second);

        	                                break;
        	                        }
        	                    
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatom_id_ntEx; /* Prevent compiler warnings */
    ruleatom_id_ntEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_id_nt */

/**
 * $ANTLR start list_idx
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:667:1: list_idx returns [std::vector<std::pair<bool, std::string> > listbs] : LANGBR ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) ) ( COMMA ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) ) )* RANGBR ;
 */
std::vector<std::pair<bool, std::string> >
gEconParser::list_idx()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::vector<std::pair<bool, std::string> > listbs;


    const CommonTokenType*    COMMA32;
    std::pair<std::string, int> val;
    typedef	std::pair<std::string, int> RETURN_TYPE_val;

    /* Initialize rule variables
     */


        typedef std::pair<bool, std::string> pbs;
        bool toomany = false;

    COMMA32       = NULL;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:672:5: ( LANGBR ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) ) ( COMMA ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) ) )* RANGBR )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:672:7: LANGBR ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) ) ( COMMA ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) ) )* RANGBR
        {
             this->matchToken(LANGBR, &FOLLOW_LANGBR_in_list_idx3809);
            if  (this->hasException())
            {
                goto rulelist_idxEx;
            }


            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:673:9: ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) )
            {
                int alt75=2;
                switch ( this->LA(1) )
                {
                case BACKWARDCOMP:
                case BFALSE:
                case BTRUE:
                case CLETTER:
                case DID:
                case E:
                case ID:
                case INF:
                case INT:
                case JACOBIAN:
                case LANDSCAPE:
                case LATEX:
                case LOGF:
                case LONG:
                case OUTPUT:
                case R:
                case SHORT:
                case SLETTER:
                case SS:
                case VERBOSE:
                case ZERO:
                	{
                		alt75=1;
                	}
                    break;
                case QUOTE:
                	{
                		alt75=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 75 );
                    ex->set_state( 0 );


                    goto rulelist_idxEx;

                }

                switch (alt75)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:673:10: (val= idx_str )
            	    {
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:673:10: (val= idx_str )
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:673:11: val= idx_str
            	        {
            	            this->followPush(FOLLOW_idx_str_in_list_idx3825);
            	            val=idx_str();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulelist_idxEx;
            	            }


            	            {
            	                 listbs.push_back(pbs(false, val.first)); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:673:73: ( QUOTE val= idx_str QUOTE )
            	    {
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:673:73: ( QUOTE val= idx_str QUOTE )
            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:673:74: QUOTE val= idx_str QUOTE
            	        {
            	             this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_idx3833);
            	            if  (this->hasException())
            	            {
            	                goto rulelist_idxEx;
            	            }


            	            this->followPush(FOLLOW_idx_str_in_list_idx3839);
            	            val=idx_str();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulelist_idxEx;
            	            }


            	             this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_idx3841);
            	            if  (this->hasException())
            	            {
            	                goto rulelist_idxEx;
            	            }


            	            {
            	                 listbs.push_back(pbs(true, val.first)); 
            	            }


            	        }


            	    }
            	    break;

                }
            }

            // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:674:9: ( COMMA ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) ) )*

            for (;;)
            {
                int alt77=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt77=1;
                	}
                    break;

                }

                switch (alt77)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:674:10: COMMA ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) )
            	    {
            	        COMMA32 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_list_idx3856);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_idxEx;
            	        }


            	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:674:16: ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) )
            	        {
            	            int alt76=2;
            	            switch ( this->LA(1) )
            	            {
            	            case BACKWARDCOMP:
            	            case BFALSE:
            	            case BTRUE:
            	            case CLETTER:
            	            case DID:
            	            case E:
            	            case ID:
            	            case INF:
            	            case INT:
            	            case JACOBIAN:
            	            case LANDSCAPE:
            	            case LATEX:
            	            case LOGF:
            	            case LONG:
            	            case OUTPUT:
            	            case R:
            	            case SHORT:
            	            case SLETTER:
            	            case SS:
            	            case VERBOSE:
            	            case ZERO:
            	            	{
            	            		alt76=1;
            	            	}
            	                break;
            	            case QUOTE:
            	            	{
            	            		alt76=2;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 76 );
            	                ex->set_state( 0 );


            	                goto rulelist_idxEx;

            	            }

            	            switch (alt76)
            	            {
            	        	case 1:
            	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:674:17: (val= idx_str )
            	        	    {
            	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:674:17: (val= idx_str )
            	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:674:18: val= idx_str
            	        	        {
            	        	            this->followPush(FOLLOW_idx_str_in_list_idx3864);
            	        	            val=idx_str();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulelist_idxEx;
            	        	            }


            	        	            {
            	        	                 listbs.push_back(pbs(false, val.first)); 
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:674:80: ( QUOTE val= idx_str QUOTE )
            	        	    {
            	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:674:80: ( QUOTE val= idx_str QUOTE )
            	        	        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:674:81: QUOTE val= idx_str QUOTE
            	        	        {
            	        	             this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_idx3872);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulelist_idxEx;
            	        	            }


            	        	            this->followPush(FOLLOW_idx_str_in_list_idx3878);
            	        	            val=idx_str();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulelist_idxEx;
            	        	            }


            	        	             this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_idx3880);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulelist_idxEx;
            	        	            }


            	        	            {
            	        	                 listbs.push_back(pbs(true, val.first)); 
            	        	            }


            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        {

            	                        if (!toomany && (listbs.size() > 4)) {
            	                            toomany = true;
            	                            errors.push_back("up to 4 indices are supported; error near line "
            	                                             + num2str((COMMA32->get_line())) + ", pos: " + num2str(COMMA32->get_charPositionInLine() + 1));
            	                        }
            	                      
            	        }


            	    }
            	    break;

            	default:
            	    goto loop77;	/* break out of the loop */
            	    break;
                }
            }
            loop77: ; /* Jump out to here if this rule does not match */


             this->matchToken(RANGBR, &FOLLOW_RANGBR_in_list_idx3891);
            if  (this->hasException())
            {
                goto rulelist_idxEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_idxEx; /* Prevent compiler warnings */
    rulelist_idxEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return listbs;
}
/* $ANTLR end list_idx */

/**
 * $ANTLR start idx_str
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:683:1: idx_str returns [std::pair<std::string, int> val] : (is= id_str | E | INF | ZERO | INT | DID );
 */
std::pair<std::string, int>
gEconParser::idx_str()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::pair<std::string, int> val;


    const CommonTokenType*    E33;
    const CommonTokenType*    INF34;
    const CommonTokenType*    ZERO35;
    const CommonTokenType*    INT36;
    const CommonTokenType*    DID37;
    std::pair<std::string, int> is;
    typedef	std::pair<std::string, int> RETURN_TYPE_is;

    /* Initialize rule variables
     */

    E33       = NULL;
    INF34       = NULL;
    ZERO35       = NULL;
    INT36       = NULL;
    DID37       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:684:5: (is= id_str | E | INF | ZERO | INT | DID )

            ANTLR_UINT32 alt78;

            alt78=6;

            switch ( this->LA(1) )
            {
            case BACKWARDCOMP:
            case BFALSE:
            case BTRUE:
            case CLETTER:
            case ID:
            case JACOBIAN:
            case LANDSCAPE:
            case LATEX:
            case LOGF:
            case LONG:
            case OUTPUT:
            case R:
            case SHORT:
            case SLETTER:
            case SS:
            case VERBOSE:
            	{
            		alt78=1;
            	}
                break;
            case E:
            	{
            		alt78=2;
            	}
                break;
            case INF:
            	{
            		alt78=3;
            	}
                break;
            case ZERO:
            	{
            		alt78=4;
            	}
                break;
            case INT:
            	{
            		alt78=5;
            	}
                break;
            case DID:
            	{
            		alt78=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 78 );
                ex->set_state( 0 );


                goto ruleidx_strEx;

            }

            switch (alt78)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:684:7: is= id_str
        	    {
        	        this->followPush(FOLLOW_id_str_in_idx_str3916);
        	        is=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleidx_strEx;
        	        }


        	        {
        	             val= is;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:685:7: E
        	    {
        	        E33 =  this->matchToken(E, &FOLLOW_E_in_idx_str3926);
        	        if  (this->hasException())
        	        {
        	            goto ruleidx_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((E33->getText()), (E33->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:686:7: INF
        	    {
        	        INF34 =  this->matchToken(INF, &FOLLOW_INF_in_idx_str3936);
        	        if  (this->hasException())
        	        {
        	            goto ruleidx_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((INF34->getText()), (INF34->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:687:7: ZERO
        	    {
        	        ZERO35 =  this->matchToken(ZERO, &FOLLOW_ZERO_in_idx_str3946);
        	        if  (this->hasException())
        	        {
        	            goto ruleidx_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((ZERO35->getText()), (ZERO35->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:688:7: INT
        	    {
        	        INT36 =  this->matchToken(INT, &FOLLOW_INT_in_idx_str3956);
        	        if  (this->hasException())
        	        {
        	            goto ruleidx_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((INT36->getText()), (INT36->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 6:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:689:7: DID
        	    {
        	        DID37 =  this->matchToken(DID, &FOLLOW_DID_in_idx_str3966);
        	        if  (this->hasException())
        	        {
        	            goto ruleidx_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((DID37->getText()), (DID37->get_line()));
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleidx_strEx; /* Prevent compiler warnings */
    ruleidx_strEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end idx_str */

/**
 * $ANTLR start id_str
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:692:1: id_str returns [std::pair<std::string, int> val] : ( ID | SLETTER | CLETTER | OUTPUT | R | LATEX | LANDSCAPE | LOGF | LONG | SHORT | BTRUE | BFALSE | SS | VERBOSE | BACKWARDCOMP | JACOBIAN );
 */
std::pair<std::string, int>
gEconParser::id_str()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::pair<std::string, int> val;


    const CommonTokenType*    ID38;
    const CommonTokenType*    SLETTER39;
    const CommonTokenType*    CLETTER40;
    const CommonTokenType*    OUTPUT41;
    const CommonTokenType*    R42;
    const CommonTokenType*    LATEX43;
    const CommonTokenType*    LANDSCAPE44;
    const CommonTokenType*    LOGF45;
    const CommonTokenType*    LONG46;
    const CommonTokenType*    SHORT47;
    const CommonTokenType*    BTRUE48;
    const CommonTokenType*    BFALSE49;
    const CommonTokenType*    SS50;
    const CommonTokenType*    VERBOSE51;
    const CommonTokenType*    BACKWARDCOMP52;
    const CommonTokenType*    JACOBIAN53;

    /* Initialize rule variables
     */

    ID38       = NULL;
    SLETTER39       = NULL;
    CLETTER40       = NULL;
    OUTPUT41       = NULL;
    R42       = NULL;
    LATEX43       = NULL;
    LANDSCAPE44       = NULL;
    LOGF45       = NULL;
    LONG46       = NULL;
    SHORT47       = NULL;
    BTRUE48       = NULL;
    BFALSE49       = NULL;
    SS50       = NULL;
    VERBOSE51       = NULL;
    BACKWARDCOMP52       = NULL;
    JACOBIAN53       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:693:5: ( ID | SLETTER | CLETTER | OUTPUT | R | LATEX | LANDSCAPE | LOGF | LONG | SHORT | BTRUE | BFALSE | SS | VERBOSE | BACKWARDCOMP | JACOBIAN )

            ANTLR_UINT32 alt79;

            alt79=16;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt79=1;
            	}
                break;
            case SLETTER:
            	{
            		alt79=2;
            	}
                break;
            case CLETTER:
            	{
            		alt79=3;
            	}
                break;
            case OUTPUT:
            	{
            		alt79=4;
            	}
                break;
            case R:
            	{
            		alt79=5;
            	}
                break;
            case LATEX:
            	{
            		alt79=6;
            	}
                break;
            case LANDSCAPE:
            	{
            		alt79=7;
            	}
                break;
            case LOGF:
            	{
            		alt79=8;
            	}
                break;
            case LONG:
            	{
            		alt79=9;
            	}
                break;
            case SHORT:
            	{
            		alt79=10;
            	}
                break;
            case BTRUE:
            	{
            		alt79=11;
            	}
                break;
            case BFALSE:
            	{
            		alt79=12;
            	}
                break;
            case SS:
            	{
            		alt79=13;
            	}
                break;
            case VERBOSE:
            	{
            		alt79=14;
            	}
                break;
            case BACKWARDCOMP:
            	{
            		alt79=15;
            	}
                break;
            case JACOBIAN:
            	{
            		alt79=16;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 79 );
                ex->set_state( 0 );


                goto ruleid_strEx;

            }

            switch (alt79)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:693:7: ID
        	    {
        	        ID38 =  this->matchToken(ID, &FOLLOW_ID_in_id_str3989);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((ID38->getText()), (ID38->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:694:7: SLETTER
        	    {
        	        SLETTER39 =  this->matchToken(SLETTER, &FOLLOW_SLETTER_in_id_str3999);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((SLETTER39->getText()), (SLETTER39->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:695:7: CLETTER
        	    {
        	        CLETTER40 =  this->matchToken(CLETTER, &FOLLOW_CLETTER_in_id_str4009);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((CLETTER40->getText()), (CLETTER40->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:696:7: OUTPUT
        	    {
        	        OUTPUT41 =  this->matchToken(OUTPUT, &FOLLOW_OUTPUT_in_id_str4019);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((OUTPUT41->getText()), (OUTPUT41->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:697:7: R
        	    {
        	        R42 =  this->matchToken(R, &FOLLOW_R_in_id_str4029);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((R42->getText()), (R42->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 6:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:698:7: LATEX
        	    {
        	        LATEX43 =  this->matchToken(LATEX, &FOLLOW_LATEX_in_id_str4039);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((LATEX43->getText()), (LATEX43->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 7:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:699:7: LANDSCAPE
        	    {
        	        LANDSCAPE44 =  this->matchToken(LANDSCAPE, &FOLLOW_LANDSCAPE_in_id_str4049);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((LANDSCAPE44->getText()), (LANDSCAPE44->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 8:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:700:7: LOGF
        	    {
        	        LOGF45 =  this->matchToken(LOGF, &FOLLOW_LOGF_in_id_str4059);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((LOGF45->getText()), (LOGF45->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 9:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:701:7: LONG
        	    {
        	        LONG46 =  this->matchToken(LONG, &FOLLOW_LONG_in_id_str4069);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((LONG46->getText()), (LONG46->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 10:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:702:7: SHORT
        	    {
        	        SHORT47 =  this->matchToken(SHORT, &FOLLOW_SHORT_in_id_str4079);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((SHORT47->getText()), (SHORT47->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 11:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:703:7: BTRUE
        	    {
        	        BTRUE48 =  this->matchToken(BTRUE, &FOLLOW_BTRUE_in_id_str4089);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((BTRUE48->getText()), (BTRUE48->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 12:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:704:7: BFALSE
        	    {
        	        BFALSE49 =  this->matchToken(BFALSE, &FOLLOW_BFALSE_in_id_str4099);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((BFALSE49->getText()), (BFALSE49->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 13:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:705:7: SS
        	    {
        	        SS50 =  this->matchToken(SS, &FOLLOW_SS_in_id_str4109);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((SS50->getText()), (SS50->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 14:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:706:7: VERBOSE
        	    {
        	        VERBOSE51 =  this->matchToken(VERBOSE, &FOLLOW_VERBOSE_in_id_str4119);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((VERBOSE51->getText()), (VERBOSE51->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 15:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:707:7: BACKWARDCOMP
        	    {
        	        BACKWARDCOMP52 =  this->matchToken(BACKWARDCOMP, &FOLLOW_BACKWARDCOMP_in_id_str4129);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((BACKWARDCOMP52->getText()), (BACKWARDCOMP52->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 16:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:708:7: JACOBIAN
        	    {
        	        JACOBIAN53 =  this->matchToken(JACOBIAN, &FOLLOW_JACOBIAN_in_id_str4140);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }


        	        {
        	             val= std::pair<std::string, int>((JACOBIAN53->getText()), (JACOBIAN53->get_line()));
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleid_strEx; /* Prevent compiler warnings */
    ruleid_strEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end id_str */

/**
 * $ANTLR start atom_num
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:711:1: atom_num returns [ex val] : (a= atom_int |a= atom_double );
 */
ex
gEconParser::atom_num()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    double a;
    typedef	double RETURN_TYPE_a;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:712:5: (a= atom_int |a= atom_double )

            ANTLR_UINT32 alt80;

            alt80=2;

            switch ( this->LA(1) )
            {
            case INT:
            case ZERO:
            	{
            		alt80=1;
            	}
                break;
            case DOUBLE:
            	{
            		alt80=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 80 );
                ex->set_state( 0 );


                goto ruleatom_numEx;

            }

            switch (alt80)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:712:7: a= atom_int
        	    {
        	        this->followPush(FOLLOW_atom_int_in_atom_num4167);
        	        a=atom_int();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_numEx;
        	        }


        	        {
        	             val= ex((double) a);
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:713:7: a= atom_double
        	    {
        	        this->followPush(FOLLOW_atom_double_in_atom_num4181);
        	        a=atom_double();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_numEx;
        	        }


        	        {
        	             val= ex(a);
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatom_numEx; /* Prevent compiler warnings */
    ruleatom_numEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_num */

/**
 * $ANTLR start atom_int
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:716:1: atom_int returns [int val] : ( ZERO | INT );
 */
int
gEconParser::atom_int()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    int val;


    const CommonTokenType*    INT54;

    /* Initialize rule variables
     */


        val= 0;


    INT54       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:720:5: ( ZERO | INT )

            ANTLR_UINT32 alt81;

            alt81=2;

            switch ( this->LA(1) )
            {
            case ZERO:
            	{
            		alt81=1;
            	}
                break;
            case INT:
            	{
            		alt81=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 81 );
                ex->set_state( 0 );


                goto ruleatom_intEx;

            }

            switch (alt81)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:720:8: ZERO
        	    {
        	         this->matchToken(ZERO, &FOLLOW_ZERO_in_atom_int4210);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_intEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:721:8: INT
        	    {
        	        INT54 =  this->matchToken(INT, &FOLLOW_INT_in_atom_int4219);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_intEx;
        	        }


        	        {
        	             val= atoi((INT54->getText()).c_str());
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatom_intEx; /* Prevent compiler warnings */
    ruleatom_intEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_int */

/**
 * $ANTLR start atom_double
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:724:1: atom_double returns [double val] : DOUBLE ;
 */
double
gEconParser::atom_double()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    double val;


    const CommonTokenType*    DOUBLE55;

    /* Initialize rule variables
     */


        val= 0.;


    DOUBLE55       = NULL;


 
    {
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:728:5: ( DOUBLE )
        // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:728:8: DOUBLE
        {
            DOUBLE55 =  this->matchToken(DOUBLE, &FOLLOW_DOUBLE_in_atom_double4249);
            if  (this->hasException())
            {
                goto ruleatom_doubleEx;
            }


            {
                 val= atof((DOUBLE55->getText()).c_str());
                 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleatom_doubleEx; /* Prevent compiler warnings */
    ruleatom_doubleEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_double */

/**
 * $ANTLR start atom_bool
 * ../gEcon_CURRENT/src/parser/grammar/gEcon.g:731:1: atom_bool returns [bool val] : ( BTRUE | BFALSE );
 */
bool
gEconParser::atom_bool()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    bool val;


    /* Initialize rule variables
     */


        val= false;



 
    {
        {
            //  ../gEcon_CURRENT/src/parser/grammar/gEcon.g:735:5: ( BTRUE | BFALSE )

            ANTLR_UINT32 alt82;

            alt82=2;

            switch ( this->LA(1) )
            {
            case BTRUE:
            	{
            		alt82=1;
            	}
                break;
            case BFALSE:
            	{
            		alt82=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 82 );
                ex->set_state( 0 );


                goto ruleatom_boolEx;

            }

            switch (alt82)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:735:7: BTRUE
        	    {
        	         this->matchToken(BTRUE, &FOLLOW_BTRUE_in_atom_bool4278);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_boolEx;
        	        }


        	        {
        	             val= true;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src/parser/grammar/gEcon.g:736:7: BFALSE
        	    {
        	         this->matchToken(BFALSE, &FOLLOW_BFALSE_in_atom_bool4288);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_boolEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatom_boolEx; /* Prevent compiler warnings */
    ruleatom_boolEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_bool */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
